模型服务设计的目的是为了提升模型管理和模型共享服务的便利性、安全性、可用性。面向的人群有模型审核管理员、模型建模师、下载模型的工程师、模型预览者。

三维模型服务概要设计

/****************************2018*******************************/
2018/12/24
1、报到
2、安装软件
3、熟悉文档规范

2018/12/25
1、学习SpringBoot、SpringMVC
     从本质上来说，Spring Boot就是Spring，它做了一些对Spring Bean的默认配置。
2、学习vking-power-web

2018/12/26
1、学习Mybatis
2、编写JavaFX员工绩效统计api接口

2018/12/27 
1、学习javaFX，学习使用fxml
2、编写JavaFX员工绩效统计客户端 使用fxml 

2018/12/28
1、学习javaFX，学习使用java画界面
2、编写JavaFX员工绩效统计客户端 不使用fxml

2018/12/29
1、学习java2d 
2、编写Graphic2D 绘图测试

/****************************2019*******************************/

2019/1/2
1、编写多线程测试java文件复制、网页复制
2、fastDFS文件分布式部署
     安装虚拟机、下载并配置fastdfs、在服务器测试fastdfs

2019/1/3
1、编写http服务测试fastdfs，上传文件、删除文件、修改文件、下载文件

2019/1/4
1、测试Http方式和FastDFS文件读取的速度
2、编制测试报告

2019/1/7
1、配置局域网中虚拟机之间访问
2、测试FastDFS中同组storage数据同步
3、系统重装

2019/1/8
1、配置开发环境
2、发布http形式的上传测试

2019/1/9
1、测试http上传速度
2、相同服务器环境下测试fastDFS的上传速度

2019/1/10
1、分别测试http和fastdfs的读取速度
2、fastdfs测试同步数据的延迟
3、记录测试数据

2019/1/11
1、多线程下分别测试http和fastdfs的文件读取速度
2、编写测试报告
3、查看HDFS的工作机制和文档

2019/1/14
1、测试okhttp上传与下载速度（数据结果有问题）
2、在两台服务器上配置hadoop

2019/1/15
1、解决昨天测试数据问题，重写编写测试报告
2、代码同步到svn
3、CentOS7下搭建hadoop完全分布式环境（安装成功）
4、windows测试上传（报错HADOOP_HOME or hadoop.home.dir are not set）

2019/1/16
1、解决昨天的问题
2、编写HDFS测试上传下载
3、写HDFS和FastDFS对比报告

2019/1/17
1、完善HDFS和FastDFS对比报告
2、研究HDFS和FastDFS的高可用配置

2019/1/18
配置多台服务器测试HDFS

2019/1/21
1、理解运检管控系统三维数据中心建设方案
2、根据文档制作思维导图，根据思维导图理解方案
3、了解Docker集群技术和oracle的RAC技术

2019/1/22
1、HDFS增加数据结点、删除数据节点，实现数据备份平滑过渡
2、三维数据中心服务思维导图

2019/1/23
1、编写vking三维模型服务需求分析
2、查看FastDFS解决方案的论文

2019/1/24-1/25
1、了解Socket、了解Netty
2、了解常用的消息中间件（Kafka、RocketMQ、RabbitMQ、ActiveMQ、ZeroMQ）
3、编写代码测试Netty
4、心跳服务概要设计

2019/1/28
编写代码测试心跳服务、客户端重连、服务端断连

2019/1/29
1、三维模型服务概要设计_心跳服务概要设计完善
2、研究并测试消息中间件ActiveMQ。
3、消息推送服务概要设计

2019/1/30
1、研究并测试消息中间件RabbitMQ。
2、编写三维模型服务概要设计_信息服务概要设计
3、token、redis研究

2019/1/31
1、编写java测试redis
2、编写三维模型服务概要设计_服务安全概要设计

2019/2/1
1、研究tcpdump、dpkt
2、编写三维模型服务概要设计_数据审计概要设计
3、编写三维模型服务概要设计_数据共享概要设计

2019/2/2-2/3
结合redis和mysql编写代码测试token验证权限。

2019/2/11
1、在redhat上部署HDFS基础环境
2、查看okhttp2文档，将okhttp2改成okhttp3
3、测试redhat部署的HDFS

2019/2/12
1、HDFS的权限管理
2、redhat安装redis，测试token

2019/2/13
了解shiro,编写测试代码

2019/2/14
测试api通过token验证，后端用shiro权限控制

2019/2/15
1、完善基础环境搭建
2、封装hdfs的基础操作

2019/2/18-2/19
主要工作：
1、封装分布式文件系统基本操作API（分布式文件的上传、下载、删除）
2、基于原始库实现数据存储服务。
其他工作：
1、学习mybatis的逆向工程
2、学习beetlsql
反省：
没有使用mybatis的逆向工程导出表，增加工作量

2019/2/20
主要工作：
编写数据服务和分布式文件操作的单元测试
其他工作：
寻找eclipse通过svn拉取代码不成功的解决办法
反省：
转换maven项目需要convert to maven project，对eclipse的svn不熟悉

2019/2/21
主要工作：
编写三维数据服务api
其他工作：
了解HDFS的小文件存储占用内存情况

2019/2/22
主要工作
1、搭建fastdfs，编写服务接口
2、编写controller单元测试


2019/2/25-2/26
1、解决上周FastDFS自定义路径：实现非结构化数据的分类存储
2、api实现restful风格约束：统一服务的调用
3、shiro配合token实现restful：实现服务安全

2019/2/27-2/28
1、编写三维数据中心近期报告
2、增加数据源动态切换功能：实现结构化数据库的切换

2019/3/1
文件夹服务设计编写：类似于百度网盘以文件夹分类存储


2019/3/4-3/7
1、设计文件夹存储的测试界面
2、使用javafx编写客户端
（1）文件和文件夹使用拖拽形式直接上传到指定文件夹
（2）客户端处理好数据逻辑，再调用服务api进行数据存储服务 
3、测试客户端上传逻辑，修改服务端bug

2019/3/8
1、解决shiro调用两次权限认证的bug
2、封装token服务
3、文档编写

3/11-3/12
1、文件夹管理服务对接三维数据服务
2、配置文件合并

3/13-3/14
1、数据表字段添加，更新服务
2、使用vue2编写web前端逻辑测试web流程

3/15
1、增加文件原始路径字段，加快文件检索速度
2、文件原始字段建索引，跟新服务


3/18-3/19
1、数据字典确认
2、根据数据字典设计流程图，根据流程图重写服务

3/20-3/21
1、okhttp封装
2、异步存储加锁
3、测试服务

3/22
1、javafx客户端跟新完善
2、测试pak解析、模型预览

3/25
pak解析服务

3/26
1、调bug（linux上缺少javafx依赖）
2、统一服务地址，解决跨域（nginx反向代理）
3、模型预览服务

3/27-3/28
1、临时文件不存在bug（pak解析时导致的bug）
2、客户端处理错误响应拦截
3、添加文件夹分页
4、nginx上传限制大小

3/29
增加站所选择功能


4/1-4/2
1、完善站所选择功能
添加挂载表，将站所挂载在文件夹表中
2、对接pak模型预览功能

4/3-4/4
1、fastdfs添加连接池
2、调试解决fastdfs文件打开过多的bug

4/8-4/9
1、解决客户端传输卡顿
另外开启两个线程分别监听上传和下载
2、客户端添加设置、上传列表、下载列表、传输完成列表
3、添加暂停、取消传输（出现bug，不完善）

4/10
1、重新设计批量删除功能
（1）客户端开启删除文件的线程
（2）查找所有需要删除的文件夹
（3）查找所有需要删除文件夹下的所有文件
（4）删除文件
（4）删除文件夹
2、客户端窗口关闭，程序还在运行bug
监听窗口关闭，关掉所有okhttp线程和传输线程

4/11
1、传输请求占用okhttp的线程资源，使得简单请求变为阻塞状态
okhttp中没找到线程优先级，因此取消了单例模式，创建两个okhttp
对象，分别用于传输请求和简单请求。
2、提取分页查询的公共字段，修改需要分页查询的服务，修改api文档

4/12
1、了解模型库
2、服务器重启造成数据库无法启动
将占用存储高的程序移动到home目录
3、配合同事在linux上安装编译环境

4/15-4/16
1、模型库了解
2、设计文档的编写、数据字典添加

4/17-4/19
1、模型库javafx客户端编写
2、模型库下载服务，加入相对路径的概念
3、重写模型的预览服务

1、模型库上传、修改
2、模型库分类

4/22-4/23
1、编写客户端的模型库上传、跟新
2、模型库上传、跟新服务编写

4/24-4/25
1、模型库分类客户端
2、模型库分类服务和预览服务

4/26-4/27
1、新增加vk_model和vk_model_file表管理模型文件
2、跟新服务

4/29-4/30
1、模型库服务完善
2、项目重写站所管理部分
（1）原来站所以挂载文件夹的形式展现（由于原来文件夹id是int，站所id是vch）
（2）重写后将文件夹id改为vch，文件夹id即站所id

5/5
1、修改重写站所和文件夹后出现的bug
2、增加上传进度展示

5/6-5/7
1、增加消息推送通知（RabbitMQ）
文件上传时服务端进行分布式文件存储、pak解析后，将结果通知给客户端
2、客户端全局线程不使用时使用wait进行沉睡

5/8-5/9
1、重写token
（1）token本身由appid、appkey和时间戳组成
（2）将生成的token作为键（key），用户信息和过期时间作为值（value）存入redis
2、javafx客户端加入登录界面，登录获取到的token写入缓存文件存入本地磁盘

5/10-5/11
调控webgl实现：web服务控制器编写

5/13-5/15
1、调控webgl实现：实时数据获取
2、视频联动机制实现：定时任务监听视频告警、websocket发送消息通知
3、nginx反响代理解决测试跨域问题
3、VkPlace表增加字段，通过vch_RelationGfile查询数据加载资源文件

5/16-5/18
1、调控云：联动模拟
2、三维设备变压器着色
3、调试、整合代码

5/20-5/22
1、springboot过滤器设置CacheControl
2、解决springboot过滤器发布tomcat不能实例化bug
3、tomcat直接添加拦截器设置CacheControl
4、调控云多客户端设计支持
5、调控云数据流程改造，代码标准化，精简
6、三维数据中心服务端日志统一化
7、三维数据中心客户端增加日志
8、三维数据中心增加注销功能

5/23-5/24
1、D5000代码审查、优化不合理的代码
2、测试增加CacheControl后程序的速度
3、资源增加版本号可实现缓存跟新
4、D5000多客户端的实现，客户端和服务端都保存着一个临时生成的客户端id

5/27-5/29
1、增加当个模型和摄像机模型的视频流播放
2、去除实时数据依赖单例站所，根据站所缓存modelInfo信息
3、去除视频联动依赖单例站所

5/30-5/31
1、安装vs2015环境
2、查看引擎文档
3、国网智能管控系统开发
遇到问题：
（1）、需用到44版本谷歌浏览器，win10装不上
（2）、暂时使用笔记本测试vk项目遇到bug

6/3-6/6
1、国网智能管控系统接口测试交接
2、引擎部文档查看
3、编译64、32位的jni的dll并测试
4、java、c++ debug联调测试

6/10-6/14
1、linux下安装相应环境编译v8引擎
2、三维数据中心项目交接，讨论模型管理的设计实现
3、查看java3d_xith3d的代码
4、java code coverage单元测试覆盖率插件的安装及测试
5、JVisualVM调试工具的了解及测试
6、引擎java端单元测试了解，解决交互界面某些不响应的bug

6/17
1、提取java单元测试中的构造函数，使得在交互界面可以运行
2、查找出java单元测试的交互界面只能运行一次bug
3、linux编译v8引擎解决部分bug
（1）\Vking-Engine-V8.0\Source\GIS\samples\TowerRotate\main.cpp 第44行加const
（2）\Vking-Engine-V8.0\Source\Urho3D\JNI\JNITools.cpp  修改include
#include "../ThirdParty/SDL/begin_code.h"
#include "../ThirdParty/SDL/JNI/JavaObject.h"
（3）\Vking-Engine-V8.0\Source\ThirdParty\SDL\src\events\SDL_windowevents.c 94行int posted定义放在了return后

6/18
1、linux编译v8引擎
找不到GL/gl.h
yum install mesa-libGL-devel mesa-libGLU-devel 
yum install freeglut-devel （OpenGL Utility ToolKit ）

6/19
1、c++jni端5处添加viewMask
（1）、CameraPickUtil.cameraNativePick(int, int, long, long)
（2）、CameraPickUtil.cameraNativePickSet(int, int, long, long)
（3）、CameraPickUtil.cameraNativePickNode(int, int, long, long, boolean)
（4）、GisCameraPickUtil.cameraNativePick(int, int, long)
（5）、GisCameraPickUtil.cameraNativePickSet(int, int, long)
2、解决引擎java单元测试页面交互关掉一个单元测试不能开启另一个的bug
解决：在Vking-Engine-V8.0\Source\Urho3D\UI\Text.cpp的822行添加font->AddRef()
3、找出不能在单元测试中同时开启两个单元测试的bug
原因：c++引擎端存在一个全局变量context

6/20
1、单元测试子线程调用资源问题
解决：增加jni的设置主线程接口
2、红帽No OpenGL support in video driver
解决：下载SDL.X86_64（对应ubuntu的libsdl2-dev）

6/21
1、红帽编译v8引擎成功
2、jni java单元测试摄像机调整

6/24-6/28
1、全局变量Context冲突导致单元测试出现各种崩溃
解决方法：
（1）debug 引擎端的测试例子重新了解引擎运行的流程
（2）debug java端的测试例子重新了解java与c++运行流程
（3）当运行第二个java测试例子时将全局变量Context重新赋值

2、默认font设置存在bug（Font *Text::GetDefaultFont()）
原因：重新创建Context的时候，font引用始终是第一个Context
解决：将静态局部变量font改为非静态局部变量

3、在加载gis单元测试之前加载了非gis的单元测试，gis单元测试不能加载
原因：在LoadEnvDepend.java的静态代码块中声明了只有gis测试可以加载gis的dll
解决：静态代码块中放开权限，统一加载dll

4、在加载非gis单元测试加载了gis单元测试，非gis单元测试被gis覆盖
原因：存在一个单例模式在加载gis的时候开启了DisplayInfo.getInstance().setGis3DMode(true)，
在加载其他的非gis的单元测试没有关掉
解决：在第二次加载单元测试的初始化成员变量中设置DisplayInfo.getInstance().setGis3DMode(false)

5、TestSoundSource单元测试关闭出现bug
原因：java端的createNativeSoundSource不能访问到c++，SoundSource头文件函数名全部错误
解决：com_vking_engine_audio_SoundSource.h头文件中将gine全部改成engine

6、TestBoxCollision单元测试关闭出现bug
原因：成员变量未初始化直接使用
解决：将Random random = new Random();直接放入buildWorld()函数中初始化

7、TestGPUPick单元测试开启出现bug
原因：GPUPick注册已被注释
解决：添加GPUPick注册jni接口，只有该单元测试可用

8、DoAnalysisResult单元测试开启出现bug
原因：TileNodeManager未初始化，debugModel空指针
解决：TileNodeManager初始化函数提到构造函数中，debugModel加入空指针判断

7/1-7/5
1、linux服务器死机不能启动
原因：安装nvidia驱动失败
为解决
2、碰撞筛选出现未检测到bug
原因：与边界球碰撞的节点限制为10的bug
解决：放开限制10的判断
3、连续碰撞崩溃
原因：Drawable::AddPass返回值存在空指针
解决：添加空指针判断处理
4、解决：linux服务器死机不能启动
解决：使用linux救援模式启动更改导致启动不了的配置文件
5、PanoramaModel.cpp在linux编译出错
原因：函数传入的参数没有改变值需要加const（linux比较严格）
解决：去掉void PanoramaModel::SetBillboardTextureAttr(ResourceRef& billboardTextureAttr)的参数加上const
6、linux不能关掉程序（部分推进）
改进退出流程，c++端退出时通知java端

7/8-7/12
1、linux不能关闭最终问题定位
问题：c++端删除资源时将java端的窗口删掉了（win和c++中sdl不一样所以win下不会有问题）
解决：未能解决
2、Java单元测试在开启一个gis测试之前开启过一个gis测试出现c++奔溃
问题：java gis分析代码设置了一个静态的地形管理
解决：去Application中实时获取该地形管理
3、java单元测试在低分辨率下超出屏幕
问题：初始化的时候被定死1366*768，且设定了最小像素1366*768
解决：动态设置像素大小，设置窗口的像素大小为电脑屏幕像素的三分之二
4、单元测试添加检索功能（模糊多项匹配）
5、找出GIS单元测试的bug
（1）、DoCalculateDistance（java端崩溃，原来就有问题）
（2）、TestAddLayer（java端崩溃，原来就有问题）
（3）、TestAddPointCloundV8（java端崩溃，原来就有问题）
（4）、TestGisNodeApi（不能通过EngineTestLauncher打开第二次pick）

7/15-7/19
1、TestGisNodeApi.java（EngineTestLauncher第二次打开并且pick）出bug
原因：java端的事件监听为单例模式，被销毁的模型的监听事件没有被销毁掉
解决：
（1）、DefaultWindowListener默认窗口监听单例模式在第二次打开单元测试的时候重新创建
（2）、BillboardManager单例模式在第二次打开单元测试的时候重新创建
（3）、InputManager和JmeUIManager单例模式添加清除函数clearAll
（4）、在第二此打开单元测试的时候将所有事件监听都移除

2、DoCalculateDistance打开空白bug
原因：JNI参数数量不对，返回值也不对
解决：添加参数，更改放回值

3、TestAddLayer.java、TestAddPointCloundV8.java打开直接崩溃
原因：资源加载前没有判空
解决：判断资源是否存在，存在才做后续操作

4、变电运维班：编写测试代码开发统计分析界面

5、TestWeathEffecterFog.java关闭时出bug
原因：C++的jni的头文件缺少了个参数
解决：添加参数

6、TestNodeParent.java、getTowerLine.java关闭崩溃（抛出空指针）
原因：调用空对象中的方法
解决：调用前判空

7、TestNodeSync.java开启了个无限循环的线程
解决：while的条件改为Application.isExit==false（当前单元测试退出，线程退出）

8、JNI添加
GISDataLoader.setElevationLoadingSpeed(int,int)（设置高程加载速度）
GISDataLoader.setTextureLoadingSpeed(int,int)（设置纹理加载速度）

9、单元测试调整每个Gis测试的飞入位置

10、给每个单元测试添加介绍说明注解，在交互界面可以看到每个单元测试的介绍说明

11、变电运维班：统计分析--前端运行统计开发

12、编译android，解决部分不兼容问题
为解决问题：未找到定义UHO3D_JNI的地方

7/22-7/26
1、android Vking-Engine-V8.0-JNI编译成功
说明：编译成功后的代码和原来的程序不兼容，导致不能加载JNI
待解决：需查看一些android的文档了解android加载流程

2、JNI自动工具链（由java文件生成.h和.cpp文件）
cpp文件自动生成遇到的难点：
待解决：
（1）、不知道使用哪种命名空间 using namespace ？？？
（2）、c++端有些对象的赋值或方法调用不能通过函数名或者参数推断出来

3、编写代码完成资源同步和资源同步后的一些处理（比如要注释掉一些东西）
解决：ResourceSyn.java

4、JNI自动工具链改进（由xml配置文件自动生成.java、.h、.cpp文件）
解决：成功自动生成java、.h、.cpp文件

7/29-8/2
1、JNI自动工具链完善
（1）、类xml配置文件重构，尽量使用属性使得配置文件更加简明
（2）、增加资源xml文件，用于对依赖类的配置
（3）、代码优化，将功能分离开来便于管理
（4）、寻找javah生成h文件的签名规则
（5）、将javah命令生成的h文件改为代码生成，重构工具链中生成h文件的部分
2、Jni添加接口
（1）、ApertureQuad.GetSceneArea
（2）、ApertureQuad.GetSelfRatio
（3）、CalculateSceneCoverArea.GetSceneCoverArea
3、JNI自动工具链完善
（1）、将程序的输入改成图形化界面的选择

8/5-8/9
1、JNI工具链批量生成
说明：完成

2、编写javafx界面整合java端工具：JNI自动生成、单元测试、资源同步、打包pak
说明：完成

3、下载官网urho3d1.7版本编译android并且运行在安卓虚拟机
说明：完成

4、编译引擎V8.0的android项目并运行在安卓虚拟机上
说明：
（1）编译注释掉CmakeLists中的Tools工具可以成功：#add_subdirectory (Tools)
（2）运行时报错: A/libc(12577): Fatal signal 11 (SIGSEGV), code 1, fault addr 0x0 in tid 12602 (SDLThread)


8/12-8/16
1、编辑器需要的服务端开发（未完成）
说明：项目搭建、数据Dao基本操作

2、android studio下编译项目
说明：
（1）、了解android studio的工程目录
（2）、android studio测试整合SDL开发环境

3、编译引擎V8.0的android项目并运行在安卓虚拟机上
说明：
（1）、运行引擎自带的测试
（2）、运行站所JNI（缺少事件监听）

4、了解引擎的触摸屏的监听事件
（1）、画时序图了解引擎安卓运行流程
（2）、测试是否监听到事件
（3）、注册触摸移动事件测试触摸移动效果

8/19-8/23
1、引擎android触摸事件完善
CameraControl.cpp中增加：
#if defined(URHO3D_ANDROIDJNI) || defined(ANDROID) || defined(__ANDROID__)
SubscribeToEvent(Urho3D::E_TOUCHMOVE, URHO3D_HANDLER(Urho3D::CameraControl, HandleTouchMoveEvent));
SubscribeToEvent(Urho3D::E_TOUCHBEGIN, URHO3D_HANDLER(Urho3D::CameraControl, HandleTouchDownEvent));
SubscribeToEvent(Urho3D::E_TOUCHEND, URHO3D_HANDLER(Urho3D::CameraControl, HandleTouchUpEvent));
#endif
2、编辑器需要的服务端开发
（1）、增加通过读xml实时获取版本号
（2）、获取登录数据的历史记录
（3）、Post方式添加登录数据
（4）、界面开发（历史登录数据条形图统计、实时跟新最新版本号和在线人数）
3、引擎创建窗口流程
（1）、java端：将窗口创建放在引擎初始化之前（将canvas隐藏的项目启动会报创建窗口失败的错误）
（2）、c++端：程序结束时，释放全局变量的内存空间（引擎结束时存在未释放完全的对象）
（3）、linux端测试关闭，偶尔能够关闭成功


8/26-8/30
1、编辑器需要的服务端开发
说明：
（1）、接口请求参数封装json格式
（2）、增加操作日志服务
（3）、增加登录、注销服务
（4）、同步跟新到web管理界面展示
2、FindBug插件熟悉
说明：安装至eclipse中检查并修正不正规的代码

3、maven打包VkingUtil（JNI自动生成、单元测试、资源同步、打包apk）
说明：将引擎的测试项目打包放到未安装2015 c++环境中测试

4、解决CenterStation项目前端统计柱状图坐标重叠问题

9/2-9/6
1、引擎的测试项目测试vc++2015环境
步骤：
（1）安装虚拟机分别安装win10和win7测试
（2）java侧调用cmd的reg命令通过注册表查看是否安装vc++2015
结果：（不太理想）
（1）win10下运行正常，win7必须以管理员权限运行cmd reg

2、引擎不安装vc++2015也能运行
步骤：
（1）虚拟机卸载vc++2015，将引擎编辑器的dll的依赖包拷贝到虚拟机中，并添加环境变量。
（2）分别在win10和win7下运行引擎测试项目
结果：正常运行
解决：先把依赖dll按依赖顺序加载，最后加载引擎侧的dll

3、窗口大小变化比例尺上的数字不随之改变
解决：注册窗口监听事件，窗口大小改变时重新画一遍比例尺

4、比例尺位置调整
解决：
（1）java在TileNodeManager类添加JNI接口setScalePositionNative
（2）c++在ScalebarLayer类中更改PrepareRendering方法，替换位置偏量

5、android项目更改位maven管理
步骤
（1）Eclipse安装maven for android插件
（2）编写测试工程

9/9-9/12
1、eclipse 不同版本测试android maven管理
结果：
Juno、Kepler、Luna版本测试通过，Luna以上的版本pom文件开头会报错

2、eclipse android maven加入引擎项目
结果：
引擎项目中和db项目中包含jdk1.8的特性，eclipse的ADT已经停止维护不支持jdk1.8

3、android studio 测试引擎项目的maven管理
结果：
（1）、不加maven测试通过
（2）、加入maven后需要android8.0以上的虚拟机，目前没有android8.0以上的虚拟机
（3）、改成真机测试（报错：java.lang.OutOfMemoryError (no error message)）

9/16
1、Android Studio 使用maven整合引擎的测试单元
结果：
完成
2、Android Studio引入引擎测试项目报内存溢出。
原因：
依赖不包括VR-Comp-DB项目的则不会出现内存溢出

9/17
1、调试通过node名字获取子node获取不到的原因
原因：loadxml的时候会更改node的名字

2、32位奔溃调试
原因：内存对齐的问题

9/18
1、引擎单元测试关闭单元测试，整个程序全关闭
原因：c++的关闭回调处直接使用了System.exit(0);
解决：java侧发送关闭消息后等待c++回调，回调后执行super.processWindowEvent(e);

2、Vking-Java-Util代码优化
说明：组件继承基础组件，规范组件的格式

3、新建Vking-Engine-V8.0的分支Vking-Engine-V8.0-20190918，编译

9/19-9/20
1、系统偶尔关闭出现RemoveEventSender崩溃
原因：关闭系统之前c++没有完全清除Application对象
解决：将Application的创建放到一个花括号内形成一个独立的作用域

2、Node.java下的JNI函数转换成xml
说明：Node下的JNI数量太多，手动转换太慢，试着用写个工具转换

9/23-9/27、9/29
1、java端封装类似c++端的事件
功能：普通事件、特定事件的订阅和发送

2、java端和c++端分离jni和逻辑测试
思想：
（1）java端发送jni需继承自动生成的jni类，逻辑写在子类中，父类是jni工具自动生成不作任何逻辑处理的native代码
（2）c++端接收java的jni类需继承c++的功能类，属于c++端的功能写在父类中，子类中主要作java和c++端的参数转换

3、linux下测试
结果：
（1）非外来窗口启动报错：pthread_mutex_lock
（2）外来串口关闭偶尔崩溃
说明：
需要和江东专门用几天时间来解决

4、VREffect_CustomModel过期写法更新，改为status写法

9/30
1、抽象出AbstractApplication，提供给android和pc的Application继承

2、jni自动生成代码更改
（1）java中的依赖通过xml的目录层级结构读取

10/8-10/12
1、跟新Vking-Engine-V8.0-Java、VR-Comp-Scene、VR-Comp-SceneApp、VR-Perception中Application.enqueue过期写法
2、Java客户端和Android的Application合并
（1）Application抽象为通用适配Java客户端和Android，考虑为抽象类；
（2）Java客户端的个性化元素放在SampleApplication；
（3）android包的Application更名为AndroidApplication继承Application。
3、jni自动生成代码优化更改
（1）、去掉资源xml，c++的资源依赖从类的xml中读取
（2）、严格按照目录结构进行代码生成
（3）、实现参数递归拆箱
（4）、参数拆箱加入json解析
4、引擎退出场景出现崩溃（已解决）
崩溃信息：Urho3D::Node::ResetScene
错误位置：15045版本656行，去除设置结点ID
5、发现bug
bug信息：Urho3D::BoundingBox::Extent
位置：com.vking.vr.scene.model.operate.SceneMouseOperate 594行和597
原因：场景退出时node已经被移除，此处未update每帧都要运行的地方，在597行处使用被移除的node对象造成引擎崩溃

10/14-10/18
1、pak打包资源精简
方法：通过配置xml，在资源同步的时候过滤资源

2、新增api判断节点在不在可视窗口中
位置：com.vking.engine.graphics.isInsideNode

3、Jni自动生成增加代理对象和代理方法的概念
说明：当通过当前的对象中的方法不足以完成功能的时候，配置代理对象和方法去完成

4、java侧模型加载测试（未完成）
遇到问题：无法确定场景所有模型渲染完毕消耗的时间

5、整理VREffect_ModelEffect代码，补充未设置的取消的特效


10/21-10/25
1、jni事件的订阅与发送
（1）、c++调java的代码封装整理到JniTools
（2）、增加SendJavaEvent事件发送方法（只能传递字符串数据）

2、jni中node类自动生成尝试
（1）、jni中node类下所有native方法转为xml
（2）、尝试创建node的jni的自动生成

3、jni测试把参数对象拆解成基础变量传递速度和通过映射参数传递速度
（1）测试对象传递和二维数组传递
（2）数组类等集合的传递

10/28-11/2
1、c++增加jclass的Map存储，c++每帧运行回调java直接从map中获取java类
2、java端优化
（1）、查找Texture.setImage会导致Texture一直增大的原因
原因：allocateDirect申请的外部内存空间没有释放，通过jprofiler工具可以看到int[]一直增大
（2）、java端对象的赋值从new对象改为set成员变量
3、jni事件修改
（1）、使用VariantMap参数的形式传递参数
（2）、jni事件从core项目中分离到jni项目中
（3）、jni事件融合到引擎原始事件中
4、视频覆盖率jni接口
（1）、用jni自动生成CustomComponent下8个类的接口
（2）、修改生成的接口，怎加成员变量、构造函数怎加node、scene两种

11/4-11/8
1、jni事件过滤、编写事件文档
3、单元测试
（1）事件测试案例
（2）GISAnalysisUITest测试案例

4、bug联调
（1）CustomComponent下新增接口的bug联调
说明：解决
（2）BillboardGeometry#setDefaultTexture失败bug
说明：为解决，设置100个BillboardGeometry，再重新设置100次，未发现bug

5、模型和BoundingBox的碰撞只返回一次数据
说明：通过设置isSingle返回所有节点的碰撞

6、编写脚本自动生成c++的发布说明

7、查看摄像机旋转代码

11/11-11/15
1、Sprite支持byte[]类型的RGB数据包
（1）、sprite.swapFxBuffer支持byte
（2）、ProjectiveTextureMappingFilter.setProjectionTexture设置BGRA类型
（3）、测试视频流传入的效果

2、Could not create GL context:句柄无效的bug查找
分析过程：
（1）、SDL_windowswindow.c 的SetupWindowData拿着java创建的窗口句柄创建hdc；
（2）、SDL_windowsopengl.c的WIN_GL_CreateContext拿着hdc创建GL的上下文时出错

3、jni生成工具生成node的jni
（1）、生成node.xml  （完成）
（2）、构建JNINode.cpp桥梁（完成）
（3）、自动生成node下的所有jni （完成）
（4）、测试生成的jni （未完成）

4、构建桥梁：
JNINode.cpp、JNIVector2.cpp、JNIVector3.cpp、JNIVector4.cpp、JNIColor.cpp等

11/18-11/22
1、事件过滤jar包下无法获取事件类
解决：使用spring的ClassPathScanningCandidateComponentProvider

2、提供jni接口
（1）、提供Fence、polygom下获取成员变量的jni
（2）、gis分析添加

3、联调bug：
（1）、java没有分发c++UI的键盘事件：专门添加字符、数组、小数点的分发
（2）、线段组件未穿透
（3）、GPUOcclusionSearch事件未发送：jni 参数不正确、SetDepthWithCamera函数处理直接被return拦截
4、jni自动生成工具完善
（1）、提供拆箱与非拆箱两种功能
（2）、编写文档


11/25-11/29
1、gis分析打包发布

2、webgl封装熟悉：emscripten熟悉

3、协助解决web输入框不可用的bug

4、jni自动工具代码优化，考虑java端能否用注解的形式解决java的继承和业务逻辑

12/2-12/6
1、Gis缓存设置问题
（1）、SetLocalCachePath中文件夹不能存在没有创建文件夹
（2）、获取图片的路径端口号错误

2、Node下添加JNI（使用jni自动工具）：
（1）、setNativeWorldRotation

3、JNI自动工具使用时bug修复：
（1）、未考虑JNI函数返回值为类和数组的情况

4、熟悉webgl封装：Urho3D-Core.idl

5、版本发布：
（1）jni自动工具v0.1发布
（2）引擎发布版本
（3）gis发布版本

6、日志的日期格式调整，改为更可视的2019-12-05 11:29:49

7、32位sendNativeFocus报错
原因：引擎中context都没有创建就收到了屏幕的点击事件
解决：引擎没启动的事件拦截

8、句柄无效bug
类似bug：
（1）Could not create window, root cause:'SetPixelFormat(): 句柄无效'。
（2）Could not create OpenGL context, root cause:'Could not create GL context: 句柄无效'。
（3）Could not create window, root cause:'SetProp() failed: 无效的窗口句柄'
原因：在特殊情况下，获得的hand是启动时小蚂蚁的窗口句柄，或则是canvas没有加载完毕。
重现：获取一次hand，线程睡眠3s再去获取hand，发现两次的hand不一样，而出现bug的情况就是用了启动时的小蚂蚁的窗口句柄，或则是canvas没有加载完
解决：VkingStartWindow.showFrame()中dispose()释放小蚂蚁的窗口的时候通知获取hand

9、Log::Write时候VkingMain::HandleSomeEven出现bug：GetGlobalVar
原因：context->SetGlobalVar没有被创建就被调用
解决：添加拦截

12/9-12/13
12/9
1、gis分析测试bug解决与分发

2、JNI添加
（1）、接口添加
OcclusionSearch_auto、View_auto、Viewport_auto
（2）、桥梁添加
JNIIntRect、JNIIntVector2、JNIVector2、JNIVector3
（3）、相应的xml添加

3、JNI自动工具bug
（1）、函数参数首字母小写
（2）、参数去除多余空格和逗号

4、VkingCavans支持graphics后期绘制
说明：主要联调查看c++对java端创建的canvas的处理

12/10
1、jni自动工具依赖bug
解决：解析所有对象来解析依赖

2、遮挡查询bug
说明：ReleaseRes();放到SetDrawableNode下

3、Win_HideWindow bug:
说明：Win_HideWindow是在窗口关闭的时候调用的，这种情况产生的可能原因：
系统窗口在启动的时候就被强制关闭，原因可能是系统启动时传的hand不是主窗口的hand。

4、VkingCavans支持graphics后期绘制
说明：通过修改每帧绘制顺序来测试，先引擎绘制再java绘制（失败）

12/11
1、jni自动工具枚举类签名bug修复

2、gis分析
（1）、修改gis分析目录层级
（2）、面板位置设置和恢复添加枚举参数

3、VkingCavans支持graphics后期绘制
（1）引擎每帧绘制会把canvas清空，测试在每帧绘制完引擎后再绘制graphics上的东西。结果：画面会不停交替闪烁。
（2）canvas只给引擎用，其它UI用JLayeredPane绘制上去可行，但是以前的UI需重构工作量巨大

4、x64、x86引擎dll发布跟新

12/12
1、整理Gis和Gis-JNI的cmake文件
说明：使得代码符合层级结构

2、修改脚本codeVersion.py，增加svn的起始版本号：
生成的字符串：svn version: 18156~18211; 2019-12-12 13:19:18(Release)_x64
说明：能够准确定位生成dll的代码修改内容

3、将byte[]数据绘制到JLayeredPane测试
说明：绘制成功

4、将视频绘制到JLayeredPane测试
说明：视频流未能打开

12/13
1、将视频流绘制到JLayeredPane测试
说明：成功测试主子站

2、双击设备，面板出来一半（概率性发生）bug测试
说明：出现RobotMainDataScene面板时候将ByteBuffer的position设置为1000，
此时面板的buffer的读取位置从1000开始，面板没有出来

3、编辑器会议

12/16
1、 双击设备，面板出来一半（概率性发生），bug重现
说明：
（1）直接扔掉一半的buffer（面板完全消失）
（2）大小设置为一半（面板完全消失）
（3）设置jvm的参数-XX:MaxDirectMemorySize=19505k（面板部分消失，底部按钮消失）

2、Gis分析打包并测试
说明：
（1）、发现关闭按钮名字相同关闭冲突bug

3、32位billboard pick测试
说明：
（1）、用主子站测试联调（太多干扰，未能完成）
（2）、使用TestGisBillboard测试案例测试同样出现不能pick的情况

12/17
1、HideProgrammerControl中showDownModel设置setModelVisible不起作用
原因：node不是billboard的根节点，不能设置隐藏

2、android打包编译长桥站（完成）

3、使用TestGisBillboard测试32位billboard pick
说明：排查中

12/18
1、android跟新到最新版本
说明：逐一解决不能编译的代码
（1）、OcclusionSearch宏定义TU_DEPTHBUFFER
（2）、去除依赖VkingMain
（3）、ProjectiveTextureMappingFilter中GL_BGRA为定义
（4）、Viewpoart中IndirectLightingPrefilter中方法未定义

2、引擎编译新dll（Billboard pick问题）

3、引擎资源管理会议

12/19
1、linux编译最新版bug（编译成功、运行失败）
（1）依赖大小写未区分导致linux编译失败
（2）、GISAnalysisUI.cpp case中存在变量的定义则需要用{}阔起来

2、android编译（编译成功、运行失败）

12/20
1、android编译最新版运行长桥站（成功）
说明：\\192.168.8.189\share\文件交换区\引擎\android\2019-12-20-14-18
（1）、使用pak加载（2分钟左右，有点卡）
（2）、非pak加载长桥站（3秒左右，不卡）

2、linux编译最新版运行
说明：成功，但是关闭还是会崩溃

3、java引擎事件
说明：event的处理函数添加规范判定

12/23
1、测试Sprite得卡顿现象
说明：只创建100Sprite，swapFxBuffer设置大图片，无明显卡顿现象（还待继续测试）

2、协助遮挡查询联调bug（解决）
说明：摄像机被billboard挡住或是被点云的点挡住

3、android调试某些模型不显示原因：
说明：不显示的模型均为完全复制的模型，android不支持Instancing模式（协助调试）

4、android阴影问题：
说明：只有在离模型很近的情况下才有阴影（还待继续查询）

12/24
1、android阴影问题
说明：移动平台目前不支持静态阴影优化（协助调试）
修改地方：DayNightWeatherControl::Start()

2、android添加退出提示和系统完全退出

3、gis分析打包发布v0.3

12/25
1、android添加Console界面的控制JNI

2、引擎添加openGL版本的获取JNI

3、linux协助编译调试

4、加密狗开发套件安装，文档查看

12/26
1、android关闭提示改为确认提示

2、android对数深度测试（协助调试）
说明：开启对数调试，打包后的apk出现条纹闪烁
apk地址：\\192.168.8.189\share\文件交换区\引擎\android\2019-12-26-16-01（对数深度测试）

3、加密狗开发商文档
说明：了解加密狗两种保护方法（外壳加密、Licensing API保护）

12/27
1、加密狗加密dll
说明：
（1）加密测试dll能够成功
（2）加密引擎dll出现内部错误

2、调试android真机提示框样式崩坏bug（解决）

3、linux问题
（1）GIS问题定位到GL2的问题，显卡启动跟新到GL3
（2）关闭奔溃问题定位到context销毁


12/30
1、加密狗加密dll
说明：
（1）、加密Vking-Engine-Core.dll和Vking-Engine-V8.0-JNI.dll成功，测试内容成功
（2）、Gis.dll加密成功，测试内容失败

2、协助调试遮挡查询bug
说明：定位到模型被拉伸的问题没有更新到引擎

12/31
1、了解学习maven-assembly-plugin打包插件

/****************************2020*******************************/

1/2
1、maven打包测试VR-Perception项目
说明：使用maven-assembly-plugin分离依赖

2、虚实对位联调bug
说明：glTexImage2D一直冲突

1/3
1、mesa3d学习并使用
说明：配置mesa3d环境

2、协助联调遮挡查询bug


1/6
1、linux下gis打印日志
说明：分别在gis当前层级和获取图片路径下打印

2、gis分析打包0.4版本

1/7
1、解决Vking-Engine-V8.0-Java下findbugs发现的bug

2、linux测试机（ubuntu）下重新编译引擎

3、Gis.dll加密失败问题定位
说明：测试c++加载加密的dll（编译阶段）

1/8
1、linux下引擎编译eclipse项目测试
说明：报错GIS_API未定义

2、Gis.dll加密失败问题定位
说明：经过加密狗加密的dll的文件大小减少了一半

3、协助曹启文搭建联调环境

1/9
1、添加csg的jni桥梁和接口

2、寻找Gis.dll被加密狗加密后文件大小减少一半的原因
说明：调整各种高级保护参数未查明原因。

3、linux下引擎编译eclipse项目测试（编译release版）
说明：编译成功，运行界面为白色

1/10
1、linux安装mesa3d
说明：依赖逐一安装中

2、linux使用eclipse编译release版
说明：运行界面为白色是因为linux在eclipse编译测试案例编译后使用的是GL3接口

3、发布新dll

--------------------------------------

1/13
1、mesa3d在windows下编译成功
说明：必须使用python2编译

2、FrustumBox新增5个JNI接口并测试

3、了解gis代码下具体流程

---------------------------------------------

1/14
1、gis文档查看
说明：了解gis渲染流程、地形和贴图的细分

2、gis分析组件更改为子系统
说明：对应修改gis分析相应的jni接口并测试

3、空间测量jni接口和桥梁的添加和测试

--------------------------------------------
1/15
1、gis瓦片在linux上调试输出和windows下做对比
调试结果：linux和windows上在相同的经纬度下需要加载的瓦片是相同的（通过打印日志）
结果：排除计算瓦片和请求瓦片的逻辑问题

2、引擎崩溃调试
bug:Urho3D::Graphics::HasTextureUnit
说明：BuildRenderTarget销毁组件时崩溃

3、gis分析打包内测

----------------------------------------------
1/16
1、linux地球下增加网格
说明：网格在windows下可以开启，在linux不能开启，原因不知

2、在另一台电脑上装好发布和联调的环境，方便以后打包测试

3、Texture.setImage会导致Texture一直增大
说明：
（1）编写测试案例测试BufferUtils.destroyDirectBuffer效果
结果：在438次的创建和销毁allocateDirect后，DirectByteBuffer的大小从
576bytes增加到28608bytes，只有当跑jprofiler的GC的时候DirectByteBuffer的大小才
会降到570bytes左右
---------------------------------------------------------------------
1/17
1、Texture.setImage会导致Texture一直增大原因定位
说明：编写测试案例测试，JProfiler的结果反应Texture的大小并未增大

2、智能运检管控系统打包后gis分析输入框无法输入问题
说明：使用maven分离依赖打包出智能运检管控系统进行日志打印测试
结果：在DefaultWindowListener被拦截


------------------------------------------------------------------------

1/19
1、单独的PackageTool Linux版本，支持服务端打包/拆包
说明：编译并测试（完成）

2、gis加密狗问题试着联系技术支持
说明：发送邮件得到回复，回复内容无意义

--------------------------------------------------------------------------------
1/20
1、引擎发布dll
（1）、发布dll和资源
（2）、编写批处理命令实现自动编译发布dll（缺少日志实时打印输出的功能）

2、 gisNode.getDirectionRelativeTo返回的值无效调试
说明：编写测试案例测试，获取到的值有零也有负值

----------------------------------------------------------------------------------
2/3
1、发布dll
2、一键发布dll工具制作
（1）、找到日志查看baretail.exe工具
（2）、界面制作

---------------------------------------------------------------
2/4 工作时长8小时

1、一键发布dll工具测试
说明：可以自动调用vs2015的命令编译生成dll，
并将编译过程输出至日志查看工具baretail.exe中

2、了解全景相关
（1）、通过TestPanorama测试案例了解
（2）、通过c++代码PanoramaCamera了解全景相机

---------------------------------------------------
2/5 工作时长8小时
1、全景测试小键盘事件
（1）PanoramaCamera新增CameraRotate接口和相应jni
（2）在TestPanorama中通过测试

2、全景测试添加小视口
说明：查阅代码研究中

--------------------------------------------------
2/6 工作时长8小时
1、全景添加鹰眼小视口测试
遇到问题：添加的小视口在进入全景的后，
小视口中看到的的全景是个球形

2、全景支持命名和入库
说明：编写

2/7 工作时长8小时
1、全景支持命名和入库
说明：测试

2、查找鹰眼小视口全景是球形的原因
说明：PanoramaCamera为Camera做了处理

2/10 工作时长8小时
1、解决模糊查询的bug
说明：将%放到setString中：pstmt.setString(1, "%" + panoramaName + "%");

2、了解viewmask的原理
说明：为鹰眼视口做准备

2/11-2/12 工时4小时（发烧休息）
添加模型下载的jni

2/13 工作时长8小时
1、添加java设置默认字体文件
2、测试非全景下的鹰眼视图和viewmask
3、发布dll并测试

2/14 工时4小时（家里断电）
1、字体jni添加测试
2、资源还原同步到c++

-------------------------------------------------

2/17
1、Drawable下添加设置能否pick的jni

2、场景鸟瞰小视口封装
说明：测试俯视角度和跟随主相机（完成）

2/18

场景鸟瞰小视口封装
（1）、测试viewMask（完成）
（2）、测试增强实现特效（部分使用viewport的特效可以实现）
（3）、全景测试（全景中点云或站所透明度被设置为0，不能使用鸟瞰小视口）

2/19
1、场景鸟瞰小视口封装
（1）、全景中透明度改为viewmask（成功）
（2）、测试全景俯视小视口并修复销毁bug

2、32位dll发布测试

2/20

1、天地图道路图层标注
说明：添加相关代码并测试（完成）

2、导出图片文字是反的bug
说明：查阅相关代码未找到原因

3、添加全景热点切换功能ui

2/21
1、全景热点切换功能
说明：对接数据库测试（完成）

2、发布32和64位dll并测试

------------------------------------
2/24

1、测试android下载模型
（1）测试发现路径问题bug，且只能在gis下进行
（2）王硕更改代码分别写了两套代码用于gis和非gis
（3）以前android下载jni接口废弃，重新创建两套android下载jni

2、与章在荣交流鸟俯视图封装，并更改相应代码

-------------------------------------
2/25
1、java下测试gis和非gis的站所下载（成功）

2、编译android中的dll（成功）

3、android下测试gis和非gis的站所下载（出现bug）

4、解决截图反了的问题

-------------------------------------
2/26
1、android测试站所下载（模拟器下测试遇到bug）
说明：
（1）、中文乱码
（2）、下载进度条结束后报错：no data bound to the command - ignoring

2、android测试站所下载（真机测试遇到bug）
说明：
调用完HttpRequestManager::ConnectServer直接崩溃，使用每行打印输出调试，
打印到最后一行未发现问题

3、新影像图层
说明：提取图层图片获取的计算方式测试取得图片路径，根据图片路径是否存在反馈出新影像图层计算方式是否存在bug

2/27
1、android测试三维数据中心（模拟器下测试完成）
说明：
（1）、乱码bug原因：c++文件格式为gb2312格式
（2）、下载过程中报错原因：Lighting.glsl渲染中GetAttenPoint函数float与int做比较

2、android测试三维数据中心（真机测试未完成）
bug:
（1）、android不能使用c++的http请求
说明：android8以上存在c++线程中存在pthread_join函数不能调用bug
原因：https://github.com/aosp-mirror/platform_bionic/blob/master/libc/bionic/pthread_internal.cpp
解决：判断为android设备时候不调用pthread_join函数
可能存在隐患：pthread_join函数功能：当前线程会处于阻塞状态，直到被调用的线程结束后，当前线程才会重新开始执行；
android不在执行pthread_joind函数，那么就没有了pthread_join函数的功能。

（2）、加载三维数据中心下载的站所
说明：内存溢出bug
相同问题：https://answer.uwa4d.com/question/5c7e79f163826a332ad99798#5c7f64f363826a332ad9979b

（3）、c++设计的UI没有适配，ui太小点击困难，等待ui适配后再测试

3、将鸟俯小视口集成到PanoramaState.java中

2/28

1、Texture根据buffer自适应大小
说明：底层Texture2d必须知道宽高，负责不知道怎么排列

2、鸟俯小视口
（1）根据当前站所的boundingbox计算出俯视场景的高度
（2）解决按特定操作PanoramaState.enter()函数会调用多次从而创建多个鹰眼视图的bug

3、遮挡率测试案例增加点云，并测试遮挡率是否准确

--------------------------------------------------
3/2

1、获取小视口的buffer，供脱离渲染使用

2、协助测试遮挡率不准

3、三维数据中心ui适配测试验证
说明：测试了几次没成功，没带数据线不能查看到调试信息。

4、Texture的buffer的丢包测试
说明：只要知道丢失数据前总数据大小，测试丢失一半数据，图片还能显示。
（1）丢失rgba中r的数据，图片显示但无红色
（2）直接丢失一半数据，图片显示但图片少了一半
（3）丢失2/3数据，图片显示但图片少了2/3
结果：未出现崩溃问题

------------------------------------------------------------
3/3
1、linux编译测试关闭问题（测试案例测试）
说明：程序结束的时候不调用context = nullptr就不崩溃

2、测试三维数据中心ui适配
说明：自动适配的ui还是太小，需手动调用放大倍数

3、获取小视口的byte数组测试
说明：目前数组内数据全为0

--------------------------------------------
3/4
1、linux编译出现新bug程序打开崩溃

2、小视口获取实时渲染byte
--------------------------------------
3/5
1、android编译测试三维数据中心
说明：换了站所后成功下载和加载站所模型

出现的问题：c++端的http请求返回后的json格式偶尔会出现多一个大括号的情况，
导致无法解析http请求结果

目前解决方法：将请求后的数据进行字符串解析，将多余的大括号去掉

2、linux编译后在createCanvas处出现崩溃：
说明：JNI_ArgumentPusherVaArg::JNI_ArgumentPusherVaArg(_jmethodID*, __va_list_tag*)+0xa

----------------------------------------------
3/6
linux编译后在createCanvas处出现崩溃问题
说明：
（1）、将窗口的创建改为外来窗口创建（SampleApplication.java中start函数）
（2）、解决外来窗口创建没有窗口自适应功能（OGLGraphics.cpp中768行）

----------------------------------------------------

3/9
鸟俯小视口
（1）调整俯视高度
（2）实时绘制定位ui并测试

--------------------------------------
3/10
1、鸟俯小视口
（1）小视口加上JmeFXComponent使
说明：小视口鼠标事件可以被监听
（2）小视口窗口pick能获取到空间坐标
说明：相机获取到的射线和站所碰撞没有结果

2、打包DownloadTianDiTu小工具测试TianDiTuWorldRoadTag


------------------------------------------------------
3/11
1、鸟俯小视口添加pick的交互操作
说明：gis下鸟俯小视口pick不准

2、遮挡率添加遮挡区域box误差等5个jni并测试

-----------------------------------
3/12
1、linux下编译eclipse项目
说明：默认编译后没有找到debug的功能，测试了测试案例build后的可执行项目

2、测试引擎的声音系统

-------------------------------------------------------------
3/13
1、linux下编译eclipse的debug
说明：编译在gis细分的地方未通过（未找到原因）

2、添加水面效果的jni并测试

3、点云下根据高度自动切换全景
------------------------------------------------------------------
3/16
1、小视口bug
（1）、销毁时候未销毁jmeFXComponent
（2）、实时获取相机位置和旋转量时重复创建gisnode

2、点云拉近到一定距离自动切换全景
说明：完成在一定距离拉近自动切换全景

----------------------------------------
3/17

1、鸟俯小视口
（1）、添加边框并测试
（2）、视野高度过滤并测试
（3）、测试不准的情况

1、jni自动工具更改
说明：枚举参数自动生成规则更改，去掉桥梁对枚举参数的处理。
-----------------------------------------
3/18
1、一键安装包了解并更新制作
说明：将jre更新到1.8.0_241

2、小视口边框融合到小视口
说明：解决小视口飞行的时候边框不一起飞的功能

3、协助测试遮挡率
说明：创建100个相机加100个组件测试准确率

---------------------------------------------
3/19
1、全景拉远拉近切换
说明：
（1）拉近已实现
（2）拉远用java端实现的时候，当拉远达到一定阀值得时候调用全景得exit()函数，出现PickProxy.pickNativeStationMulti崩溃

2、按esc退出全景时候
说明：监听按键esc调用全景exit()出现PickProxy.pickNativeStationMulti崩溃

3、全景小视口
说明：
（1）利用经纬度计算相机高度（前提配置了经纬度）
（2）小视口加入交互，双击实现互切；
-------------------------------------------------
3/20

1、出现PickProxy.pickNativeStationMulti崩溃原因
说明：在gis下的点云中有一个线程一直执行billboard的鼠标事件，
如果现在又在另一个线程中进行节点移除操作的话会导致pickNativeStationMulti中有野指针的存在。

2、linux下更换gcc版本编译eclipse的debug版本


---------------------------------------

3/23
1、opengGL版本过低或则没有，引擎不崩溃且弹出提示信息
说明：需要更新dll

2、linux下编译（成功）
（1）、linux下使用gcc8.0编译eclipse的debug版本（成功，可以跑gis测试案例）
（2）、linux下使用gcc8.0编译引擎和jni的debug版本（成功，可以跑gis下的主子站）

-------------------

3/24
1、小视口加入关闭按钮
说明：两个关闭按钮，其中一个叠加在小视口上的会不跟随小视口移动。

2、linux下编译release版本
说明：gis下显示有问题

------------------------------

3/25
1、更改事件注册方式
说明：java端注册什么事件，c++只给java发送什么事件

2、全景销毁引起的相机不存在问题

3、发布dll并测试

------------------------------------
3/26

1、引擎未完成初始化的提示使用Message.showModalMessage
说明：需重现发布dll

2、node无效指针崩溃排查
说明：小视口中从viewport获取到相机（这个过程被new了camera），然后从相机上获取到Location（这个过程new了node），
退站的时候主相机被删了，但是小视口没有去销毁这个相机的node，最后在按N打印所有node信息的时候，
打印已经销毁的camera的node则崩溃。

3、一键安装包32位制作
-----------------------------
3/27
1、全景入库检索整合
说明：
（1）、项目中测试了根据空间位置信息定位全景（速度慢）
（2）、项目中测试了根据全景的各个点入口定位全景（速度快）

2、小视口缩放
说明：拖拽事件冲突问题

------------------------------------
3/30
1、小视口缩放
说明：使用组件的setScale每次固定放大缩小到一定大小
存在问题：
（1）、只是将图片放大，图片模糊
（2）、缩放过程不更具鼠标实际拖拽大小缩放

2、全景热点面板功能
说明：面板已整合到项目中，读库定位全景正常。

小视口缩放：
说明：
（1）使用resize，不使用setScale
（2）根据鼠标拖拽距离计算缩放大小
-------------------------------------------

3/31
1、小视口缩放改进
说明：
（1）、使用resize直接改变大小
（2）、停止缩放的时候再根据当前窗口大小去拿一帧渲染好的图片

2、添加全景搜索面板
说明：根据ModelLikeSearchPanel

----------------------------------------
4/1
1、立体巡检小视口优化
说明：立体巡检模型下增加点云小视口

2、协助遮挡率测试发布dll

------------------------------
4/2

1、立体巡检小视口优化
（1）、小视口内左上角显示当前小视口内展示的类型
（2）、点击小视口，支持模式互换（点云和全景，模型和点云）

2、测试32位dll

------------------------
4/3、4/5
1、小视口优化
（1）模型点云下为同步跟随
（2）层级操作优化
（3）小视口单例化，迁移至菜单
2、引擎字体整合
3、发布32位和64位dll并测试

-------------------------
4/7
1、鼠标拉近距离控制包装
2、小视口bug
（1）模式切换小视口未隐藏
（2）全景切到其他模式卡住

-------------------------
4/8
1、禅道bug解决
2、引擎测试类整理、修复、完善补充推进
-------------------------------
4/9
1、修复c++中创建java对象没有释放引用的bug
说明：比如以前c++传到java的事件没有释放HashMap，
导致内存不到增加的情况

2、引擎测试类整理
说明：除gis文件夹下均已整理好
----------------------------------------
4/10
1、C++代码编码批量转换工具
说明：工具已使用python脚本开发出来，
经测试可用，具体要把引擎统一成哪种编码需讨论。

2、尝试将引擎窗口渲染接到JavaFx的Canvas
说明：使用javafx的窗口句柄传入c++，窗口黑屏卡住
-------------------------
4/13
1、进站后关闭地形细分，退站开启
说明：开放了一个jni接口

2、云渲染效果
说明：开放云渲染效果jni并测试（TestCloudManager）

3、引擎窗口渲染接到JavaFx的Canvas
说明：联调测试，引擎的初始化和主循环均没有异常，
java端主循环也没有异常，但窗口任然黑屏
-------------------------------------------
4/14
1、引擎编码统一转为utf-8-sign
说明：转换的目录为：Urho3D、GIS、
Vking-Engine-V8.0-JNI、Vking-Gis-V8.0-JNI

2、将引擎窗口渲染接到JavaFx的窗口
说明：通过外来窗口的形式将JavaFx的窗口句柄传入引擎
---------------------------
4/15
1、全景入库检索支持
（1）、编写全景检索面板并测试
（2）、整合到全景热点中

2、协助测试billboard的update
说明：更改代码：
（1）、Node下的setEnable时增加调用billboard的update（Node.cpp代码2201行）
（2）、BillboardDrawable::SetVisible时增加调用billboard的update（Billboard.cpp代码243行）

----------------------------
4/16
1、引擎外来窗口优化
说明：引擎原来的窗口属于在sdl源码库暴力创建的窗口，
增加的外来窗口在窗口的缩放上与原来的窗口有冲突，因此
对外来窗口做了优化
（1）、增加一个标志位来控制是否使用外来窗口
（SampleApplication.externalWindow）
（2）、Graphics::OnWindowResizedJava函数内对window结构体的宽高进行重新赋值

2、智能视野管理支持脚本自启动
说明：
（1）、发布VR-Perception成可运行的jar包，windows下测试可运行
（2）、linux下测试shader报错，且在eclipse下测试新dll也发现shader报错，
且天空盒颠倒

----------------------------------------
4/17
linux下引擎编译
说明：
1、linux下shader不支持GL2.0的一些解释变量已通过宏定义屏蔽掉分别为：
highp、smooth、flat
说明：通过gl2.0的一些shader报错原因可以得知引擎下的shader编写并不兼容gl2.0
所以需要讨论是否强制要求引擎启动的版本为GL3.0

2、gcc编译
（1）gcc4.8.4编译：debug版本的gis编译不过。release版本编译通过，但是运行gis下的项目不显示gis的图片
（2）gcc8.0编译：debug版本编译通过，运行没问题。release版本编译通过，但是运行非gis和gis下面的场景均出现问题

3、linux下eclipse编译并联调
说明：linux下eclipse下编译出so文件，但联调多次尝试失败

------------------------------------------------------------------
4/20
1、引擎实现实现三种模式的任意切换
说明：SceneSwitchUtil中在加载全景之前做了加载点云的操作

2、麒麟下搭建编译环境和eclipse的环境
说明：
（1）安装eclipse的调试环境和cmake的编译环境
（2）编译eclipse版的so和普通版的so
（3）对编译好的普通so进行测试，由于张琨改了引擎的JNI操作，目前引擎关闭会出现RemoveEventSender的奔溃信息
--------------------------------------------------------------
4/21
麒麟下联调引擎
（1）、实现了linux下eclipse下联调jni的功能
（2）、找到了linux下引擎关闭崩溃的正在原因（全局变量scene、context、CameraNode声明的先后问题影响了释放顺序从而导致context提前被释放）
（3）、协助联调麒麟下有opengl3，为什么只能调用opengl的问题（初步定位到窗口的原因，具体原因未知）
（4）、gcc5 debug编译引擎GIS测试（编译未通过）
-------------------------------------
4/22
1、麒麟下联调引擎
说明：使用gcc4.8编译出最新的dll，并打包出智能视野项目放到麒麟和红帽下测试

2、version `GLIBC_2.17' not found原因
说明：在新的环境编译出来的程序跑在了老的环境里
（1）、查看当前linux支持得GLIBC
strings /usr/lib/libstdc++.so.6 | grep GLIBC

（2）、gcc提供了与编译器紧密相关的运行库的支持如：libgcc_s.so、libstdc++.so，
然而GLIBC存在libstdc++.so中。也就是说但出现GLIBC未找到得原因是因为未成功安装相应版本的gcc，
或者删除或覆盖了老版本的libstdc++.so。
----------------------------------------
4/23
1、麒麟linux下联调引擎
说明：使用gcc8.4编译后，跑主子站只有点云跑不起来，
目前初步定位是点云不支持gl2的原因。

2、全景热点缩略图功能完善
说明：
（1）、编写入库面板并测试
（2）、使用RenderUtil.captureCamera对全景自动截图。
遇到的问题：测试案例中对全景自动截图可以实现，对主子站项目中全景自动截图，失败且图片全黑。
-------------------------------------------
4/24
1、主子站项目中全景自动截图失败
说明：RenderUtil.captureCamera截图方法在gis下截图存在bug

2、全景热点
说明：每个全景点配置缩略图（已暂停，需改为自动配置）

3、引擎发布32和64位dll

-------------------------
4/26
1、获取AgPointCloudOptions组件失败的原因
说明：没有参数为long类型的构造函数

2、寻找其他窗口句柄的获取方法
说明：
（1）、windows下使用系统函数FindWindow可以根据窗口标题直接获取到窗口句柄。
（2）、linux好像没有这个放到，获取是没导入正确的头文件

3、小视口退出优化，禅道bug解决

-------------------------------
4/27
1、窗口句柄获取方法：EnumWindows和FindWindow
说明：
（1）、都为Windows操作系统下的方法
（2）、windows下测试：
经测试目前引擎获取到的窗口句柄和EnumWindows、FindWindow获取的窗口句柄是不一样的。
而EnumWindows和FindWindow获取到的窗口句柄是一样的。但奇怪的是不一样的窗口句柄都能
使引擎在windows下跑起来。

2、linux下找获取窗口句柄的方法
说明：查阅资料目前找到两个突破口分别是：XGetWindowProperty和XQueryTree。
------------------------------------------
4/28

引擎创建的窗口句柄（通过XQueryTree找出所有句柄包括孩子句柄）
说明：
1、swing创建的窗口
（1）传递到引擎的窗口句柄为第三层句柄；
（2）其中第一层和第二层句柄传到引擎创建的窗口均为黑屏；
（3）当传递第三层句柄到引擎时，只能创建GL2窗口，
可能原因：第三层窗口只是canvas窗口，并没有窗口的完整信息属性，导致引擎只能创建gl2窗口。

2、javafx创建的窗口
（1）传递到引擎的窗口句柄为第一层句柄，即窗口标题对应的根句柄
（2）此时创建的窗口为GL3窗口
----------------------------------------------
4/29
1、swing的窗口句柄
（1）、经测试三层句柄分别为jframe、rootPanel、canvas。
而去掉canvas，直接用第二层句柄传入c++也能创建并渲染出引擎。
（2）、直接更改c++代码使得初始化完引擎后自动在控制台输出opengGL的版本信息，
经测试将第一层句柄传入c++，虽然未渲染出引擎画面，但整个引擎已经初始化完，打印的
opengl版本还是2.0。
结论：只能使用opengl2.0渲染引擎的问题不是窗口句柄的原因。

2、协助将sprite、billboard的update改为计数控制。
------------------------------------------
4/30
1、将overlookViewport小视口的写法改用fxViewportComponent实现
2、全景热点图片完善（自动获取）
说明：基本图片自动生成和入库已测试实现
待完善：
（1）张琨需开放出一个接口：刚进全景时的全景点，也就是设置当前全景
（2）全景入库完后，需重新更新界面
----------------------------
5/6
1、全景热点完善
说明：
（1）、获取刚进入全景时候的当前全景点
（2）、全景入库更新完后，需重新更新界面

2、sprite增加addChild的jni并测试
-----------------------------
5/7
1、虚实映射下的崩溃联调
说明：
（1）release下联调得知在Filter.setNativeEnable处奔溃，且不能进入Filter的setEnable方法中
（2）debug下由于sprite--update--GetWidth的崩溃（遗留为解决的奔溃）的原因不能继续debug联调
结果：虽然不能使用debug联调，但是从第一点可以得出强制转Filter的指针为野指针

2、寻找类似引擎的外来窗口的创建案例
说明：只在urho3d的论坛中找到QT创建的外来窗口案例，并没有java的swing创建窗口的案例

3、数据面板连线优化
说明：张琨创建了张贴图开放了sprite的setImageRect直接实现了sprite下虚线的创建
----------------------------------------------------
5/8
1、编写linux现状文档
说明：以前出现过gcc8.3编译的release引擎后，
运行整个世界颠倒的情况，然后用gcc8.4和gcc9.3编译release引擎均完美运行

2、在linux下使用sdl2和opengl3编写测试界面成功
说明：等待将swing窗口整合到测试见面中

3、下载最新urho3d_1.7版本编译
说明：等待整合swing窗口
-----------------------
5/9
1、linux下整合swing窗口到纯sdl2和opengl3编写的测试界面中
说明：成功整合，且成功渲染出结果，只不过将
SDL_GL_CONTEXT_MAJOR_VERSION和SDL_GL_CONTEXT_MINOR_VERSION这两个属性值更改3和2，或则2和0，
都能渲染出画面。从中可以确定不是sdl的原因，应该是引擎本身做了啥处理后的结果。

2、发布新dll
--------------------------------------
5/11
1、linux引擎fps测试
说明：
（1）、加载相同点云场景，并且在同一摄像机位置下
c++创建的窗口引擎场景比swing创建出的引擎场景的fps多上5帧左右
（2）、使用javafx测试与swing效果相似

2、windwos下测试swing和urho3d_1.7成功
说明：将最新版的urho3d同swing窗口整合，联调出opengl的版本

3、linux下测试swing和urho3d_1.7失败
说明：编译eclipse版本的so文件失败
-----------------------
5/12
1、linux下编译最新版的urho3d_1.7
说明：编译并联调，测试出引擎调用的仍然是openGL2。

2、swing、sdl、opengGL3再次测试（shader编写测试阶段）
说明：以前验证swing、sdl、opengGL3的整合问题没有直接
通过shader使用opengl3的函数测试。所以前的测试并不准确
----------------------------------
5/13
1、swing、sdl2、openGL3再次测试（shader编写调试阶段）
说明：使用openGL3新的函数glDrawArraysInstanced测试，成功渲染出画面。
结论：通过传递swing的窗口句柄的方法确实能调用opengl3的接口并成功渲染出
画面，因此英伟达显卡的linux下引擎只能调用gl2的接口的大部分原因将定位到引擎本身
对外来窗口的处理上不够完美。

2、ubuntu显卡驱动下载并了解怎么跟新驱动
说明：等待更新
----------------------------------------
5/14
1、linux显卡驱动更新。
说明：手动下载更新显卡驱动。更新完后引擎仍然只能调用gl2的接口。
目前引擎在linux的测试结果如下：
（1）、下载urho3d最新版1.7测试swing和引擎的整合
结果：引擎仍然只能调用gl2
（2）、swing、sdl、opengGL3编译纯底层代码测试
结果：能通过opengl3.2的特有函数渲染出画面
（3）、更新linux显卡驱动
结果：引擎仍然只能调用gl2

2、linux下载gcc4.8.5源码包手动编译安装gcc4.8.5
----------------------------------------------
5/15
1、gcc4.8.5发布引擎release和debug动态库，修改不能编译的高版本语法
（1）、Gis去掉所有直接推导auto的返回类型
说明：c++11语法不支持直接推导返回类型，如果要用auto返回类型，需要用decltypr声明返回类型

（2）、其他c++11编译的错误
说明：不能通过’…’传递非平凡复制类型的对象、
FinishLoadAsyncXML函数中对临时变量XMLElement进行了非常量的引用等

2、引擎发布dll
------------------------------------------------
5/18
引擎高版本语法
说明：linux下联调并查找高版本语法
（1）、将遗漏未更改的直接推导auto函数更改掉
（2）、寻找到一个c++17的语法：在if和switch语句中进行初始化
说明：比如if(auto test = getTest())则属于c++17的语法
------------------------------------------
5/19
引擎高版本语法去除联调
说明：
1、if和switch语句中初始化变量更改掉
2、使用网格渲染模式排除了渲染问题，将问题定位到切片调度上
------------------------------
5/20
1、引擎高版本语法去除联调
说明：
（1）外部提取通过std::move提取lambda内部的变量
（2）fold表达式
（3）类模板参数推导
（4）结构化绑定

2、下载gcc6.1.0和gcc7.1.0并安装

3、android更新代码编译
说明：存在bug
-------------------------
5/21
1、使用场景管理器新建空相机，出现站所不加载问题
说明：新建的空相机变成了站所的父节点，具体bug已被姚志伟修复

2、用gcc6.1.0编译引擎
说明：release和debug版均完美运行

3、配合曹启文联调linux下的gis
------------------------------------
5/22
1、android更新代码编译打包
说明：地址\\192.168.8.189\share\文件交换区\引擎\android\2020-05-22-17-30

2、协助测试gcc4.8编译gis的bug问题
说明：暂时定位到视锥裁剪的问题，该任务暂时没头绪解决。
目前只能将gcc的版本提升到6.1.0
----------------------------------
5/25
1、编译单独的PackageTool Linux版本，支持服务端打包/拆包
说明：以前编译采用的是动态链接库编译，所以缺少引擎的外部链接库
就跑不起来，现在采用静态库编译，将引擎链接库一起编译到PackageTool

2、pak的解压封装图形化界面，支持选择pak进行解压【linux、windows】
说明：编写代码并测试
-----------------------------------
5/26
Vking_Util工具增加功能
1、合并编辑器授权工具
2、打包Vking_Util并测试
说明：
（1）、linux(麒麟)下和windows下测试pak解压
（2）、windwos下测试授权工具
------------------------------------
5/27
1、智能视野linux(redhat)配置
说明：
（1）、安装配置阿里云yum源
（2）、编译安装gcc6.1.0，并通过update-alternatives配置多个gcc切换共存
（3）、智能视野项目运行（gcc6.1.0编译的）发现运行时候需要高版本的glibc，
而glibc的升级会影响到linux系统的基本命令，要是升级失败会导致linux系统无法
启动和无法使用。因此没有去升级glibc，而是重新修改gis的细分判断（采用boundingBox裁剪）并
使用gcc4.8.5编译，然后使得项目能在低版本的系统中运行。

2、JavaFx结合Sprite效率测试
空场景下测试：
图片大小128*64
（1）加载19000个sprite，稳定时fps为30，仅加载sprite就消耗30fps，此时再加载站所的话fps将低于30。
结果：大小为128*64的sprite最好不要超过19000个，不然场景会比较卡
（2）加载100000个sprite，稳定时fps低于10，此时再加载站所将会很卡
图片大小1920*1080
加载85个sprite时，场景fps为30。

结论：sprite的性能瓶颈跟图片大小关系非常大，小图片sprite的性能瓶颈在两万个左右，大图片在一百个左右，
当然性能还和电脑的配置有关，所以这个结果只是一个参考

3、加密狗继续测试
说明：
（1）加密Vking-Engine-Core.dll、Vking-Engine-V8.0-JNI.dll、Vking-Gis-V8.0-JNI.dll成功
（2）加密GIS.dll失败

-------------------------
5/28
对GIS.dll、Vking-Engine-Core.dll、Vking-Engine-V8.0-JNI.dll、Vking-Gis-V8.0-JNI.dll加密：
（1）、全部加密当加载到GIS.dll时，程序自动退出，没有任何错误信息
（2）、除GIS.dll不加密，其他三个dll加密，程序完美运行
（3）、只加密GIS.dll，程序自动退出，没有任何错误信息
（4）、对GIS下的cmake文件进行整理，再次编译、加密，但是加密失败
（5）、将GIS.dll和Vking-Gis-V8.0-JNI.dll进行合并，再次编译、加密。但是加密失败
结论：引擎中4个dll，只有GIS.dll不能加密，初步定位GIS中的代码有其他依赖不能被加密狗加密
------------------------------------
5/29
1、全景导入和上传功能开发集成
说明：界面及导入功能实现

2、智能视野linux问题
说明：
（1）、智能视野linux将tomacat装到了usr目录下，然而usr只被分配了50G，
由于放到tomacat目录下的web静态文件过大，导致ust目录几乎被占满，出现启动失败
问题，当进入命令行界面删掉一些tomacat文件时，图形界面却报：EXT4-fs error，暂且
未解决此报错。
（2）、用第二个备用图形界面启动，跑智能视野项目报shader错，查看openGL驱动版本为
2.1，经过各种资料查找和重新打包未解决，然后升级opengGL版本至最新的版本则解决。
--------------------------------------------------------------------
6/1
全景导入和上传功能开发集成
（1）、修复全景热点创建缩略图的bug：本地没有全景图片资源，则去请求资源
（2）、全景导入测试完善
（3）、全景上传功能实现
（4）、全景的注册迁移到父类的getAfterPointCloudLoadTask方法中，原因：因为其他项目比如VR-Manager也要注册全景，但是却直接调用父类这个方法。
问题：使用FtpOperate.uploadToFtp上传的时候，要是ftp上有同名文件的时候在FtpOperate的1317行delete(remoteFileName, false)会报错，
暂时处理方法在uploadToFtp上传之前先删掉ftp上的同名文件。
---------------------------------------------------------
6/2
1、全景导入和上传功能开发集成
说明：全景上传功能测试完善

2、全景热点优化：
（1）、使用PanorService代替直接使用Dao
（2）、使用map记录热点图片排序，修复点击全景检索面板，缩略图滚动条没有自动滚动到相应的缩略图下
（3）、如果本地全景缩略图文件存在且和ftp上缩略图文件大小相等，则不需去下载，否者去跟新

-------------------------
6/3
1、全景热点优化
（1）、为全景热点缩略图单独创建版本控制文件，版本控制文件更新后则进入全景时候，
让本地缩略图片和ftp上的缩略图片对比大小，不相等则从ftp上更新缩略图。
（2）、缩略图添加可两种编辑功能：
	（2.1）当前全景视口截屏作为缩略图
	（2.2）本地其他文件上传作为缩略图

2、热点缩略图编辑优化：
（1）、若新的缩略图不是本地缓存的文件（例如C:/model），则拷贝到本地存储。
（2）、更新后的缩略图同步刷新界面

3、协助调试脱离渲染卡顿的原因
说明：初步定位到引擎本身占用大量渲染资源，使得javafx没了渲染资源
---------------------------------------------
6/4
无效窗口句柄原因调查
（1）、windows系统下获取canvas的句柄是通过jni获取的，
目前修改为使用java反射获取测试。
（2）、同时在c++增加通过FindWindow和GetWindow获取canvas句柄测试。跑主子站发现存在两个canvas,
以下答应输出测试：
Class:SunAwtFrame;Handle:13963204
Class:SunAwtCanvas;Handle:8000192
Class:SunAwtCanvas;Handle:10492496
----------------------------------------
6/5
1、gis不能被加密原因调查
说明：
（1）用其他dll加载gis的依赖，发现其他dll仍旧可以被加密，排除依赖原因
（2）细读加密狗外壳加密的高级属性配置，修改其中几个属性值，加密的gis.dll无法加载
（3）按照加密狗技术人员要求将高级属性配置全部改为false，加密的gis.dll无法加载
（4）多次运行加密的gis.dll，有极低的概率可以加载，但是运行报错：
[2020-06-05 17:30:56] ERROR: Could not create unknown component type FB3F456D
[2020-06-05 17:30:56] ERROR: Can not open elevation configure file 

2、添加素描滤镜后期特效，并测试
说明：TestNPRHatchingFilter.java

3、引擎发布dll
---------------------------------------------------------
6/8
1、以三堡为基础，完整的验证下全景的流程及业务功能
（1）修复本地没有全景图片资源，去请求资源失败bug；
（2）修复全景导入，本地图片地址错误bug
（3）通过上传文件编辑说略图判空处理

2、热点缩略图初始化流程更改
说明：
（1）本地缩略图存在
	一、对比ftp上的缩略图版本，版本一样则直接返回
	二、版本不一样，则查看ftp是否有该缩略图，有的话直接下载，没有则直接返回
（2）本地缩略图不存在
	一、查看ftp是否有该缩略图，有的话直接下载
	二、ftp上没有的话则根据全景图自动创建缩略图
----------------------------------------------------------
6/9
1、协助测试素描滤镜效果
说明：添加setTiling、setColorNode、clearColorNode、setMixColor并测试

2、全景热点优化
（1）资源优化（以前使用getResourceAsStream直接加载，现在使用ResourceLoader）
（2）资源迁移（以前放在Data下，现在放到VR-Comp-Scene）
（3）防止按钮重复点击、增加资源下载失败的日志提示等

3、加密狗加密dll
说明：路径\\192.168.8.189\share\文件交换区\引擎\加密狗外壳加密dll\2020-6-9-15-48

4、 VR设备(HTC)集成开发
说明：查看参考资料UrhoSharp，公司网络下载不下来代码。
--------------------------------------------------
6/11
1、jar包启动黑屏bug：
（1）说明：loadDllVkingEngine函数中加载jar包内的dll使用Application对象中的jarDecompressionPath属性，
所以dll的加载应该放到jarDecompressionPath赋值以后。
（2）原因：以前开启了线程加载dll，jar包运行的程序加载dll时出现空指针的错误并没有在cmd控制台中显示出来。
而引擎接下来的操作都在等待dll加载的那个线程结束，最终因为加载dll的线程有空指针的错误导致引擎一直处于等待状态。

2、 VR设备(HTC)集成开发
说明：下载UrhoSharp和urho-samples代码学习并编译。
---------------------------------------------
6/12
1、虚拟机中ubuntu14和kylin4.0.2测试引擎
说明：高显卡的windows下安装虚拟机，虚拟机分别安装ubuntu14和kylin4.0.2测试引擎，
发现引擎调用的均为GL3.0，因此目前可以认为关于GL2的问题不是引擎和系统造成的，
而问题应该出在显卡对linux桌面的兼容或者bug上。
具体截图信息请看：http://192.168.8.189:81/zentao/task-view-6571.html

2、UrhoSharp的测试与了解
说明：UrhoSharp只是将urho3d中的接口代码用c#翻译了下，类似于java的jni。
--------------------------------------------------------
6/15
1、加密狗外壳加密引擎dll成功
说明：通过彭凯公司客服了解到加密狗工具包可能版本太低存在bug，然后通过
彭凯公司发来的最新工具包将引擎dll加密成功。

2、协助测试去掉天空盒测试站所加载
说明：将天空盒组件去掉，在测试案例里加入平行光和Zone组件，场景除了比较
暗一点（应该时没加HDR的原因），其他都正常。

3、在全景内，点击别的站点列表上的运维班名称，gis未加载异常
说明：全景未退出bug，模块退出机制问题

-----------------------------------------
6/16
1、VR设备(HTC)集成开发
（1）了解c#创建窗口的流程，并获取窗口句柄
（2）学习C#调用的C++库流程，并向引擎传递窗口句柄，简单测试c#和引擎的交互

2、协助发布引擎jar包
--------------------------
6/17
1、新天空盒的jni集成
说明：对于组件的创建，以前都是通过组件的jni方法去创建的，这违背了java对象和c++对象的一致性。
就在scene.java中和node.java中分别添加了createComponent方法，本来只需要在node.java中添加，但是
java中的scene没有继承node类，且java这边业务已经集成到了node的构造方法中，所以也就没有将scene改成
继承node了，转而在scene和node类中都添加createComponent方法。

2、VR设备(HTC)集成开发
说明：寻找开发文档并了解
-----------------------------------------
6/18
1、新天空盒的jni集成
说明：协助测试效果，目前gis下有问题，会不停地切换

2、VR设备(HTC)集成开发
说明：
（1）VR设备安装，并使用其他游戏测试
（2）openVR SDK和测试案例下载
------------------------------
6/19
1、VR设备(HTC)集成开发
说明：OpenVR Samples环境配置，它依赖于Qt 5.x、
GLEW 1.11+、SDL2、OpenVR

2、协助静态天空盒测试
说明：目前gis和非gis都正常

3、引擎发布32和64位dll
-----------------------------------
6/22
VR设备(HTC)集成开发
说明：
（1）OpenVR SDK的测试案例（hellovr_opengl）成功运行
（2）分析hellovr_opengl 测试案例的运行流程
------------------------------------------
6/23
VR设备(HTC)集成开发
说明：github下载Urho3d_VR项目编译并测试，Urho3d_VR的测试
案例能跑起来，且成功初始化VR设备，但是VR设备中没有成功渲染出界面，
只有一个测试案例的标题和接下来的按钮。
---------------------------------------------------------------------
6/24
1、SceneCamera#SetAllowUnderGround JNI暴露
说明：经测试非gis有效，gis下无效

2、查找Urho3d_VR测试案例中VR设备中没有成功渲染出界面的原因
说明：
（1）、默认使用的是Direct3D渲染，改为openGL
（2）、默认使用的贴图rgb，改为rgba

3、Urho3d_VR测试案例中VR设备显示结果颠倒（张琨调式）
说明：引擎在openGL的渲染下默认颠倒渲染结果


4、引擎整合第三方库OpenVR，通过子系统的方式接入
说明：编译通过，待测试
-----------------------------------------
6/28
1、测试引擎整合VR子系统
说明：主要是测试cmake文件，cmake的导入第三方库依赖

2、opengl版本过低提示并在真机上测试
说明：以前opengl版本检测位置不正确导致程序还没有走到检测的地方就崩溃了。
在引擎还没发布新dll时，可以使用\\192.168.8.189\share\文件交换区\王路\引擎包\OpenGL Test下面的GisAnalysis_v0.42.zip测试

3、windows下驱动更新问题
问题说明：windows在更新驱动后，使用windows系统自带的远程连接控制来启动3d引擎，总是提示引擎版本过低。
原因：windows自带mstsc远程访问不走显卡输出，所以要想走显卡输出就需要使用第三方的远程连接控制软件，比如TeamViewer
-------------------------------------------------------------------
6/29
1、了解学习引擎的渲染路径
说明：vr中看不到点云，原因是引擎在渲染点云的时候走的renderpath不同，
所以就找了些资源了解学习了下引擎的渲染路径。主要是前向渲染和延迟渲染

2、VR渲染出的左右眼的站所场景有部分重合
说明：针对于VR设备的测试，引擎渲染出三个视口，一个主视口，另外两个
分别为vr头戴设备的左右眼。
--------------------------------
6/30
1、SceneCamera#SetAllowUnderGround中gis设置无效问题
说明：经联调测试出gis下isUnderGround中的标志位判断没有放到最开始判断。

2、虚实映射增加多个相机和贴图共同映射的接口并联调测试
说明：300个相机和贴图测试虚实映射，fps帧数下降6个

3、了解渲染通道、渲染目标、渲染队列
-----------------------------------------------
7/1
1、小视口场景退出崩溃无错误信息bug原因查找
说明：update和destory的使用不当的原因


2、jni内存泄漏核对排查梳理
说明：
（1）、Texture2D：（Texture2D.createTexture2D）
jni中new了Texture2D，此后的java和c++的操作都是对其地址的操作，比如：billboard->SetTextureAddress(address_texture);
所以此处会出现内存泄漏的危险
（2）Texture：
这和Texture2D的创建相似，也是通过地址操作的并没有使用智能指针去接管Texture
（3）CommonMaterialOperate.setNativeShaderParameter的jni中new了一个Texture2D没有被托管
（4）RenderUtil.captureNativeScreen的jni中new了Image，后面却只对它的引用进行操作，没有处理它的销毁。
（5）ObjectAnimation.createNativeObjectAnimation的jni中new了ObjectAnimation返回给java，java中没有将它托管出去，即没有处理它的销毁。
（6）ValueAnimation.createNativeValueAnimation的jni中new了ValueAnimation返回给java，有些交给了ObjectAnimation托管，但是ObjectAnimation是没有被托管的没有销毁的所以它也自然没人销毁
（7）Drawable.getWorldBoundingBox、Drawable.getNativeBoundingBox、BoundingBox.createBoundBox、BoundingSphere.createBoundingSphere中jni都是通过new来创建c++对象的，而java中的对BoundingBox处理只是用来获取它的属性或者拿来碰撞的，没有销毁操作
（8）KeyFrameControl.createNativeKeyFrameControl虽然是通过new来创建对象的，但是java中暂且没人使用过该类
（9）Plane.planeNative、Ray.createNativeRay中对new出来的类没有进行销毁处理和托管处理
（10）Sector_createNativeSector中创建的对象被引用没被托管
（11）GISOrbitView_flyNativeTo中new出来的LatLon对象被引用没被托管
（12）AbstractImageLayer_createNativeAbstractImageLayer虽然被new出来返回给java但是被废弃了
（13）GisPath_createGisPath虽然被new出来返回给java但是只有测试案例中被使用
-------------------------------------------------
7/2
1、禅道bug推进
说明：按要求多次测试，大部分都是无法复现的情况

2、电脑c盘扩容
----------------------------
7/3
1、发布dll和javadoc
说明：发布dll期间碰到编译报文件损坏的错，以为是昨天c盘扩容导致的，各种重新编译无效，
然后重启电脑，才知道是电脑加密策略更新的原因。

2、协助测试BoundingBox内存泄漏问题
说明：在getBoundingBox和getWorldBoundingBox中的get修改为update，
get会每次在c++中new一个BoundingBox对象
----------------------------------------------
7/6
1、android编译gis
说明：android编译出gis动态库，构建运行的时候出现无法处理kafka jar包的错误

2、EventManager代码review和代码优化
------------------------------------------
7/7
1、android运行问题
说明：
（1）以前的android测试并没有加载特效，也就是没有运行loadFilterFromXML，运行loadFilterFromXML经测试发现以前写的渲染特效大部分不支持android，也就是
会报很多shader错。
（2）目前android gis屏蔽kafka jar包可以构建成功，但是运行的时候奔溃，暂未找到原因。

2、协助查找引擎没有运行起来就闪退的原因
------------------------------------------
7/8
1、android gis 闪退定位
说明：定位到设置gisOrbitView.flyTo后的下一帧闪退

2、添加releaseAddress并测试
说明：了解到通过将long地址转换为void *再使用delete删除不会走析构函数，因此又把这个接口去除掉了
----------------------------------
7/9
1、android加载gis
说明：能够加载出地球，仍然还有些不兼容的shader和接口问题

2、查找资料尝试配置android studio联调c++代码
说明：其他的联调方案都是android项目中有c++代码的，而urho3d引擎生成的是eclipse的目录结构的项目，
导入android studio中后就自动转换成没有c++源代码目录结构，然后就无法配置联调。
----------------------
7/10
1、android不兼容的shader问题
说明：目前发现android下均不支持抗锯齿(SMAA)(TAA)、描边等特效。
而这些shader中都使用了#ifndef GL_ES下定义的变量，明确指出不支持GL_ES下的设备。

2、目前android跑gis的现状
说明：相机使用fly函数飞到地球表面，其中飞的过程没有问题，飞完后闪退，没有错误信息。
（1）、故意使用错误支持去调用函数，崩溃无错误信息。
（2）、考虑到是否是release的问题，编译debug的so动态库再次测试，崩溃堆栈信息为汇编信息，需使用adb logcat等命令翻译。
（3）、使用adb logcat翻译时，却打不开外部android虚拟机，可能是冲突问题，打算通过android studio下载内部的虚拟机测试。
-------------------------------------------
7/13
android配置debug工具--xCrash
说明：爱奇艺在github上的的安卓开源工具：xCrash能为安卓app提供捕获java崩溃，native崩溃和ANR的能力。学习并了解怎么使用。

--------------------------------------
7/14
1、android成功加载gis
说明：经debug工具分析出gis飞完后的回调函数崩溃，测试发现回调函数中的JavaVM没有被赋值。
缺少功能：gis上的所有触摸事件都需要重写

2、准备reivew全景导入和上传的资源，并测试。
---------------------------------
7/15
android的gis中添加基本的鼠标事件
说明：旋转、移动、缩放（镜头拉近拉远）
----------------------------------------------
7/16
1、android整合gis和站所发布应用
说明：地址\\192.168.8.189\share\文件交换区\引擎\android\2020-7-16-14-21

2、proguard扰码了解
说明：proguard扰码会用无意义的短变量去重命名类、变量、方法。
注意：其中第三方库、native方法、反射使用的方法、枚举、回调函数、序列化类是不能使用proguard扰码的。
--------------------------------
7/17
1、VR优化
说明：
（1）引擎坐标系修改后需更改VR摄像机的矩阵
（2）左右眼有重合问题：调整左右相机的旋转

2、引擎proguard绕码测试
说明：下载proguard工具测试出现依赖问题

3、发布dll并测试
------------------------------------
7/20
1、引擎proguard扰码测试
说明：将引擎成功扰码后进行测试，发现其中的类名和公共方法名被优化成其他字母了，
那么其他项目将不能对这些类进行调用。可以去寻找看看只对方法的实现进行混淆。

2、将android的gis和三维数据中心进行整合测试
--------------------------------------------
7/21
pak查看器界面编写

--------------------------------
7/22
pak查看器逻辑编写并测试
说明：模型功能预览、图片等文件预览测试完成
------------------------------
7/23
pak查看器完善
（1）遇到问题：pak内部的图片不能直接用字节查看，字节为dds的格式
解决：和模型查看类似，直接调用引擎查看
（2）遇到bug：查看一个模型或者图片后，再次查看第二个模型，引擎奔溃
说明：在同一个进程中，关闭引擎却没有退出程序的时候没有销毁上下文，导致第二次预览出现奔溃问题。
---------------------
7/24
1、引擎日志记录方式优化
2、pak查看器发布第一版本
-------------------------------
7/27
1、pak查看器优化
（1）单机文件查看改为双击文件查看
（2）增加xml文件的代码高亮查看
（3）修复引擎节点清除的崩溃bug
2、协助联调素描滤镜下billboard着色消失的bug
------------------------------
7/28
1、DebugUtil功能重新实现
2、协助联调素描滤镜下billboard不能置顶的bug
-----------------
7/29
1、引擎java对象hashCode重写
说明：重写了equal的类，hashCode也必须重写

2、内存泄漏问题
说明：java端重构Plane、Ray、BoundingBox、BoundingSphere，待测试
---------------------------
7/30
1、内存泄漏问题（BoundingBox有关类）
说明：添加重构后的JNI接口，修改Node、GisNode下有关BoundingBox的接口并优化。

2、linux编译最新dll
-------------
7/31
1、测试Node、GisNode下有关BoundingBox的接口
2、协助天空盒测试
-----------------------

8/3-8/4
获取gpu显存接口封装
说明：
（1）使用cuda在本机测试没有问题，其他机器均不能测试，发现需要下载对应驱动，所以放弃cuda
（2）github上寻找到一个名为gpu_performance_api的项目，发现运行需要vulkan，研究代码也需要事件，所以放弃。
（3）目前使用nvidia的接口获取gup可用显存

8/5
texture泄漏解决
说明：
java端的Texture和Texture2d基本没用到c++的功能，所以将Texture和Texture2d的构建分为两种，一种是只创建java对象，另一种是创建c++和java对象，目前只用到了第一种，至于个别用到第二种的，已经被挑出来再使用完毕后调用c++的销毁函数，以下是改正列表：

Texture
1、SimulateDisplayPanel.getPicture 
解决：改为只创建java对象
2、FFmediaPlayerView.refreshView 
解决：改为只创建java对象
3、FFMediaPlayer.init 
解决：改为只创建java对象
4、GraphicsPicture.GraphicsPicture 
解决：改为只创建java对象
5、FenceAppState.getTexture 
解决：改为只创建java对象

Texture2d
1、DepthTextureUtil.getDepthTexture
解决：增加析构c++对象的接口，在DepthTextureUtil.clear函数内调用
2、StorageInfoData.loadStorageInfo 
解决：改为只创建java对象
3、DataBillboardMannager.createNewTexture 
解决：改为只创建java对象
4、DataBillboardMannager.createTexture 
解决：改为只创建java对象
5、Shape3DUtil.getBillImage 
解决：改为只创建java对象

8/6-8/7
linux java gl2问题定位
说明：经联调和资料查找，问题出在SDL_GL_ALPHA_SIZE设置最低的颜色位数，改成默认的0就好了。
------------------------------------------------------

8/10-8/11
1、静态天空盒整合到Application中
2、静态天空盒开放阴影、环境光、反向光接口，测试光照
3、静态天空盒集成测试

8/12-8/14
1、linux下调试
（1）、vs code软件在linux下安装测试，测试联调java失败
（2）、eclipse加载c++ native项目优化，去除索引降低内存、加快加载速度
（3）、eclipse下联调会被java线程中的错误寻址、地址冲突、线程等待等原因中断
说明：其中一个原因是面板的禁用图标引起的，姚志伟已经禁用。其他的联调中断bug都非常偶然，难以定位bug。
（4）、协助联调甜心区，暂未找到原因
（5）、release下的甜心区计算直接卡死，debug下的甜心区计算不会卡死，但某些情况下有值、大多数情况下无值。
2、发布windows下32位和64位dll，发布linux_release_dll

8/17-8/21
1、协助调整静态天空盒的颜色
2、协助测试ReadDXF工具
3、小视口脱离渲染bug
（1）、Texture2d.getData中存在jni内存未清除
（2）、View::SetQueueShaderDefines中进行camera判空
4、ApertureQuad开放设置光圈是否是动态的接口并测试
5、linux下显存信息查询
说明：利用NVIDIA显卡驱动自带的动态库NVML获取显存


8/24-8/28
1、静态天空盒
（1）开启辅助光的jni
（2）协助调试场景中的光照和阴影
2、显卡显存获取
（1）开放获取nvidia和amd显卡显存的jni接口
（2）测试windows下和linux下的nvidia和amd显存接口
3、proguard混淆
（1）、混淆：private的属性、private方法、局部变量
（2）、不混淆：内部类、public方法、protected方法、private native方法、枚举类
（3）、将混淆代码重新签名并打包测试
4、引擎bug解决
（1）测试resourcecache注册url不支持中文的情况
说明：测试是没问题的
（2）进入到全景场景，后台一直提示空指针错误
说明：
	（a）、SceneSwitchUtil更改进入全景之前的判断
	BroadcastManager.broadcast(
	BroadcastType.SCENE_SWITCH_TOPCL_ENTERPANOR, 
	PersonalConfig.isOverLookViewport() ? false : true);
	（b）、PanoramaState.getCurrentPosition时候以小视口判断为主
5、发布win_x64_dll并测试
（1）、测试出gis下不停报错误的bug：GetFileSize failed with error code
（2）、gis下闪烁和相机不能拉远不能朝天空看问题

8/30-9/4
1、Emscripten cmake环境配置
（1）老版本sdk整个拷贝到本机测试，经测试可以cmake，但是在make的时候找不到wchar等宏定义
（2）github上下载新版本emsdk测试，经测试可以cmake，也可以编译，但是不支持某些老版本的写法（如老版本的枚举自定义）

2、打包后的智能视野在其他机器崩溃
说明：经测试排查发现获取显存的功能应该放在主线程中运行

3、开放画省界线的jni接口并测试

4、新dll在gis下场景退出闪退
说明：经联调排查是在TileNodeManager::UpdateTerrain中通过geom->GetRectTile()获取到了空指针

9/7-9/11
1、引擎Emscripten编译
（1）使用1.38.44(引擎原来使用的是1.38.21，目前官网最低版本为1.38.33)编译成功。
遇到的问题：
已解决：编译时Emscripten不支持自定义枚举。--post-js文件的时候出现编码问题。
未解决：编译好的文件放到项目中运行失败，原因可能是目前引擎web没有正规的加载VK-WebCore.wasm文件
（2）使用直接拷贝过来老版本的Emscripten sdk多次测试编译未能在本机编译通过

2、linux 编译模型转换的工具
说明：编译时出现重复定义和点云模型转换明确不支持linux的问题，协助张琨编译将AssetImporter编译成功。
注意：由于代码中有明确说明模型转换工具不支持linux下点云的转换，所以不能在linux下使用模型转换工具

9/14-9/18
1、锦绣变电站，地球隐藏后崩溃bug
2、引擎端的web编译
（1）老版本的sdk在本机上cmake出现未能找到所有c++的基本库
（2）新版本编译问题：首先不支持空的枚举类，强制支持后编译成功的wasm不支持引擎项目的运行流程
（3）重装系统，用老版本sdk编译成功，且能运行
3、了解web端引擎的运行流程和代码封装
4、虚实映射
（1）虚实映射重构后修改原本jni
（2）协助联调虚实映射bug
5、发布版本

9/21-9/25
1、新版本bug
（1）、字体找不到，在DefaultStyle、Gis_DefaultStyle中注释掉写死的字体
（2）、F2按键失效也是字体找不到的原因

2、重新编写引擎资源同步脚本
说明：引擎c++代码更新的同时自动实现版本日志写入、资源同步、资源过滤

3、linux编译
（1）、glxew.h中的以来和引擎的Timer.h名称冲突
解决：在获取AMD显存的代码中不引用引擎代码
（2）、GISBoundingBox.h中的GetOBBPoint方法局部变量center和全局变量center重名
（3）、QuadNode.h中初始化children语法不支持
（4）、ElevationConfig.cpp中477行的strcmp不在c++的标准库中，需引入#include <cstring>
（5）、GISHttpRequest.h中328行Time::Sleep中的Time未定义,需引入#include <Urho3D/Core/Timer.h>,并改成Urho3D::Time::Sleep

4、锦绣变电站加载点云崩溃
说明：获取pointCloudNode失败，但是判空的时候只拦截了地址为0的情况，jni以前写的返回的是地址-1，所以没拦截到位-1的情况

5、虚实映射增加4个jni接口，协助解决虚实映射传递jpg文件的bug
说明：虚实映射对于jpg文件的三通道buffer不支持的bug

9/27-9/30，10/9-10/10
1、linux更新gis后的bug解决
（1）编译通过，但运行后找不到ElevationData中SetSector函数，原因：王谦在函数前加了inline关键字
（2）瓦片细分linux不能使用OBB
2、Material添加setShaderParameter的jni并测试

3、引擎32位事件bug
说明：32位系统中使用iterator迭代器不能读取到VariantMap中的数据

4、webassembly debug c++
说明：
（1）测试案例，联调c++代码成功，但是浏览器联调本身存在变量完全映射的缺陷。可以参考：https://zhuanlan.zhihu.com/p/158586853
（2）引擎项目编译后联调失败，VK-WebCore.wasm.map中无数据

5、了解tween jni并整合SceneCamera和GISOrbitView
说明：gis下的相机的tweener有问题，不能看到地球


10/12-10/16
1、新的相机控制CamerController、Tween整合问题
说明：
	在gis下功能缺少记录：
	1）、缺少获取相机方向，参考：GISOrbitView::GetCameraDirection
	2）、lookAt缺少zoom、heading、pitch参数，参考：GISOrbitView::LookAt(Position,double,Angle,Angle)
	3）、缺少GetPitch、GetHeading、GetZoom，参考：GISOrbitView::GetPitch()等
	4）、FlyTo缺少horizontalRot(水平方位)和verticalRot(垂直方位)参数
	5）、鼠标操作拉近的最近距离限制，参考：GISOrbitView::SetMouseControlMinDistance
	6）、设置OrbitView的目标Camera，参考：GISOrbitView::ChangeCamera
	7）、获取像机的旋转角，相对于东北天的坐标系。参考:GISOrbitView::GetEnuHeadingPitch

	在非gis下功能缺少记录：
	1）、是否允许镜头到地下：SceneCamera::SetAllowUnderGround
	2）、设置相机离模型/点云的最短距离:SceneCamera::SetMouseControlMinDistance
	3）、匀速旋转：SceneCamera::UniformlyRotate
	4）、飞行结果使得模型到屏幕固定位置：SceneCamera::ModelFlyToScreen
	5）、鼠标灵敏度：SceneCamera::SetMouseSensitiveX）、SceneCamera::SetMouseSensitiveY
2、vr 调节fov、添加了手柄模型

3、热力图添加jni并测试
说明：TestHeatPoint.java

4、新虚实映射增加新jni并测试
说明：TestRenderCameraDepth.java

5、添加全部特效测试面板
说明：
TestFilter.java和TestFilterGis.java
非gis：28个特效
gis：29个特效

6、发布dll并测试

10/19-10/23
1、java侧精简
说明：
（1）、编译dll时，不用把Assimp、Tools、sample等不用的功能编入
（2）、不同步不必要的资源：Editor、VR资源

2、WebGL GIS实现站所调度机制
说明：
（1）、高层表中的数据为：PlaceEarthConfig中的dbl_TranslateY字段，这需要web服务端配合
（2）、进站退站只需要调用GISOrbitView::GetZoom方法判断高度

3、协助调试热力图和hdr特效

4、增加新虚实映射CameraProjectionBoard的jni接口和测试案例

5、lastools支持Linux编译
说明：
（1）、重新在linux下编译AssetImporter，
	1）将点云开关打开
	2）将所有写了win32宏定义的地方注释掉
	3）编译并解决不能编译的bug
结果：对编译成功的AssetImporter进行点云模型转换测试，经测试打开点云失败，详细原因需要联调测试，可能需要针对linux再写一套代码出来，直接将win32宏定义强行注释进行编译，虽然编译通过，但是运行失败
（2）、Linux下编译lastools项目
结果：编译出9个可执行文件，las2las、las2txt、lasdiff、lasindex、lasinfo、lasmerge、lasprecision、laszip、txt2las

6、发布win_32、win_64、linux_64的dll

7、窗口句柄创建失败问题
说明：尚未定位成功，但是初步定为在引擎项目侧的线程问题，业务处在给canvas的赋值父窗口的时机不对

10/26-10/30
1、协助测试所有特效效果
2、有台linux出现shader报错
说明：经过测试发现是驱动版本为2.x，由于引擎中shader使用了3.x版本语法，所以修改驱动最低要求为3.x。
3、UIElement.setHeight出现崩溃。
说明：经联调测试发现，java这边创建了对象，但是还没有获取到c++这边对象的address，java这边就通过线程用这个对象去调用c++的函数，导致c++这边的this指针为空
4、根据模型的boundingbox计算出飞行到该模型的合适位置，使得模型充满视野
说明：
（1）、非gis下测试成功（TestFlyToBoundingBox.java）
（2）、gis下的flyToLookAt会改变相机的旋转，导致测试失败（TestFlyToBoundingBoxGis.java）
（3）、gis下带经纬度的flyTo，该方法本身的参数在java和c++端出现歧义，导致测试失败
5、增加jni接口并测试
说明：
（1）LOD剔除管理组件（LODCullController）
（2）RenderCameraDepth添加addProjectionCameraDepth、setMaxDiffDepth、getMaxDiffDepth
（3）Node加载xml回掉LoadStationXml（经测试存在bug）
（4）场景拆分加载（分块）
6、协助调试VR
说明：加入HDR、抗锯齿、描边、素描等特效测试

7、用javafx做个wasm的测试
说明：查阅了相关资料，目前有两个方向
（1）、java转换成wasm代码，但是javafx和swing转换可能失败（待测试）
（2）、将虚拟机转换为wasm，https://github.com/plasma-umass/doppio（安装环境时出现问题，需进一步研究）

11/2-11/6
1、LODCullController bug协助定位
2、小视口billboard上下颠倒协助定位
3、b/s端本地搭建环境测试
说明：
（1）测试排除canvas层级的关系，使用swing在可以在引擎的上面绘制图案
（2）测试发现在c/s端的消息提示弹出框总是在引擎的上，在b/s端，消息弹出框就被浏览器给遮住了
4、开放jni接口并测试
说明：
（1）、虚实映射：SetPointCloudMode、GetPointCloudMode
（2）、Node:LoadStationXML（模型拆分后的加载回调）
（3）、renderer添：getNumViewports
5、小视口增加非sprite的功能并整合到FxOverlookViewport中
说明：暂且解决小视口billboard上下颠倒的问题
6、发布32位和64位dll并测试

11/9-11/3
1、小视口bug
说明：
（1）、mainCamerMode2d设置父节点时使用address判断
（2）、非sprite的鹰眼俯瞰摄像机之眼位置不正确bug
（3）、进全景前关闭小视口，进全景后打开小视口，会出现小视口无法显示正确内容的和不能双击切换的bug

2、添加jni接口并测试
说明：新增PointSprite点精灵组件，目前用于测试实现billboard功能

3、还原ocx方式弹出视频bug

4、java代码转换为web下可运行的代码工具：
（1）JWebAssembly（将java编译成.wasm文件）
（2）TeaVM（将java字节码编译成JavaScript文件）
（3）GWT（将Java源代码编译成JavaScript文件）

 经测试得知缺点：
（1）不能转换reflection（反射）、resources（资源）、class loaders（类加载）、jni
（2）不能对Swing，AWT或Applet应用程序进行编译
（3）大多数用于数据序列化和网络通信的Java库都不可用
（4）很难支持线程

5、将java虚拟机转换为web下工具（Web的Java编译器）
（1）CheerpJ
说明：转换一个swing项目，成功运行，转换公司引擎，出现各种bug
（2）DoppioJVM
说明：环境搭建失败

6、特效面板测试案例修改：
（1）、增加特效分类
（2）、增加特效冲突判断

11/16-11/20
1、指纹仪支持web
说明：
（1）引擎一键安装包增加一个存放指纹仪启动服务资源的文件夹
（2）配置一键安装包新增安装完启动指纹仪服务的功能和电脑开机后自启动指纹仪服务
测试：
一键安装包地址：\\192.168.8.189\share\文件交换区\王路\一键安装包\x64\2020-11-18-09-30
测试文件地址：\\192.168.8.189\share\文件交换区\王路\Test\指纹仪

2、pak文件是否完整判断
说明：
（1）、PackageFile.java中的open方法
（2）、测试pak文件是否完整的时候发现一个bug（LODData::HandleModelAsynLoad中出现空指针未判断）

3、linux不启动图形界面加载引擎问题研究（No X11 DISPLAY variable was set）
原因：linux 下的 Java GUI 是基于GTK,所以没有先启动图形界面是不行的。
解决方案：
（1）可以使用Xming+Xshell的X11转发图像功能，说白了就是将linux上的图像通过xshell转发到xming上显示，
此方案不适用引擎在无显示器下的自启动（https://blog.csdn.net/u010472607/article/details/80356216）
（2）使用虚拟显示器
此方案待测试（https://blog.csdn.net/qq_29757283/article/details/102604431）

4、jni非gis下cameraPickNode优化
说明：
（1）、java中新增数据结构RayQueryResult
（2）、cameraPickNodeNative新增maxDistance参数
（3）、jni新增RayQueryResul桥梁t和RayQueryResult列表桥梁

5、java转wasm的一些测试
对jwebassembly测试，目前全网唯一一个将java编译成wasm的工具
（1）总共发布三个版本，最新的为0.3
（2）只支持gradle构建，作者说了Maven support will follow in the future
（3）目前只支持静态方法的导出，也就是只能给web调用静态方法
对TeaVM测试，TeaVM是将字节码转换成js代码的工具
（1）构建TeaVM后直接生成tomcat服务器下运行的war包
（2）自带一个一个脚手架teavm-flavour，类似于vue2、angular，有自己的ui系统
对GWT进行测试，GWT是将java源码js的代码的工具
（1）和TeaVM类似，也是有自己的ui库，适合从头搭建web项目

6、发布新dll并测试修复的bug和新增的接口

11/25-11/27
1、PackageFile检查pak的完整性
说明：快速读写文件时，采用的都是FileChannel的map方法，
这个方法的作用是将文件映射到堆外内存中，然后通过读写内存来实现对文件的快速读写，出现Map Failed的原因：
（1）对于32-bit JVM，由于地址空间是32 bit，2^32=4GB，所以我们能映射的文件大小只有4GB，但实际上因为其他对象同样需要占用地址空间，所以正常情况下，只能映射1GB左右。
（2）Java程序有默认的maxDirectMemory，即JVM可使用的最大堆外内存，稍不注意，就有可能超过并且抛出异常（如在Phoenix数据查询中结果集过大）
（3）mmap句柄超过了系统默认最大值。
结果：目前java端检测pak大文件的完整性，在32位中地址映射被限制的大小不到1G，所以会报Map Failed错
解决方法：引擎端在添加pak文件时返回是否完整的结果

2、jni添加，并测试
（1）添加ODLine，测试类TestODLine.java
（2）全景中加载标记（gis下由于点云pick不准显示不出来）

3、引擎无渲染模式（headless）测试
说明：可用于服务器的模式，不能使用Renderer、Camera、Viewport等有关渲染的东西，
因为在headless模式中不创建Graphics和Renderer子系统

4、bug推进
（1）ERROR: Null source for setting data
说明：无法重现，新增更详细的报错信息，以便下次定位
（2）Can not set model while model component is not attached to a scene node
说明：无法重现，新增更详细的报错信息，以便下次定位
（3）无效的窗口句柄
说明：偶然bug无法重现，新增更详细的报错信息，以便下次定位

11/30-12/4
1、linux下问题
（1）、新点云无法运行
说明：导出新淮南站分别对windows和linux下进行测试，发现没问题，应该是打包的问题。
（2）、现场有报错：OpenGL 3.0 is required
说明：有对显卡驱动进行限制，现场是2.1的环境，为了防止升级驱动导致线程服务器崩溃，故重新打包限制openGL为2.0的版本

2、urho3d headless深度解析
说明：urho3d headless的模式是不包含图形和渲染这两个子系统的，任何包含这两个子系统的功能都不能使用此功能。

3、查阅谷歌浏览器对webassembly调试的更新改进
（1）https://developers.google.com/web/updates/2019/12/webassembly
说明：（2019年12月的更新）支持使用DWARF的调试信息进行源映射。
这个新的DevTools与DWARF的集成已经涵盖了对代码单步执行、设置断点和解析源语言中的堆栈跟踪的支持。
（2）https://developers.google.com/web/updates/2020/06/devtools#wasm
说明：（2020年06月的更新）使用字节码偏移量来显示Wasm反汇编的行号，更清楚地查看二进制数据，并且与Wasm运行时如何引用位置更加一致。
（3）https://developers.google.com/web/updates/2020/11/devtools
说明：（2020年11月的更新）鼠标悬停时预览Wasm变量值；在控制台中评估Wasm变量

4、使用Tracing API调试emscripten内存
说明：https://pspdfkit.com/blog/2019/debug-emscripten-with-tracing/

5、web和visual studio code 联调测试成功

6、添加鼠标滚轮、左键拖拽jni并测试

7、事件管理的优化，使用泛型的上界通配符，防止参数的误传导致事件无法移除

8、OpenGL厂商名字、渲染器标识符、版本号保存为全局变量（原来只是在引擎启动的时候输出了一下）

9、小视口折叠完，切换场景时会自动显示出来

10、发布dll、协助调试linux下的模型导出工具

12/7-12/11
1、小视口bug和优化
说明：
（1）解决小视口退出时点云场景会出现模型地面、全景中会出现模型地面bug
（2）小视口只在需要全部隐藏的时候才调用hiddenAll()，优化小视口折叠完，切换场景时会自动显示出来的问题
2、jni接口开发
（1）开放PanoramaVideoPlayer和PanVideoCamCtrl的jni接口
（2）热力图新增设置单个点的透明强度jni
（3）省界线协助测试显示隐藏的bug
（4）资源释放时间
3、Vking_Util工具
（1）编辑器授权优化（直接调用java算法，授权后的机器码自动复制到剪切板）；
（2）添加pak压缩功能；
（3）pak解压功能使用jni调用c++代码
（4）支持打包后的jar包加载dll；
（5）PackageFile工程生成win_x86_64_dll和linux_x64_so
4、BillboardGeometry优化
（1）BillboardGeometry的setDefaultTexture优化创建时间
（2）BillboardGeometry对象的属性，优化内存
5、发布win和linux的dll


2020/12/14-12-18
1、无显示器下支持独显
（1）java设置Headless模式测试
说明：使用该模式很多显示和键盘鼠标会抛出异常，导致无法启动引擎，比如：初始化JWindow就会报错
（2）使用VirtualGL+TurboVNC，成功运行智能视野管理系统，且使用的是英伟达独显
说明：VirtualGL2.6.5在麒麟上测试失败，2.3.3版本在麒麟上测试成功

2、结合静态天空盒评估个性化设置的有效性
说明：
（1）、环境光遮蔽有效：开启犄角旮旯变暗
（2）、高动态有效：关闭变亮
（3）、屏幕空间反射无效，原因未知
（4）、昼夜循环无效：原因是静态天空盒没有此特效

3、VkingUtil打包pak后，针对pak自动生成md5文件
说明:
（1）、添加生成pak.md5功能
（2）、优化界面，在压缩和解压的时候加上加载中界面（此时阻止了鼠标事件的监听，将不能做任何事）

4、添加大数据测试组件
说明：开放组件接口，并编写ui界面测试

5、点云添加jni
说明：LoadAllLod（是否加载所有lod）、FixedPointSize（是否固定点大小）、AutoReleaseResource（是否自动释放资源）

6、发布x64_x86_dll

12/21-12/25
1、测试引擎的启动参数
说明：
（1）分别在原引擎和现在的引擎上测试mq、tq、tf、af
（2）java修改引擎启动，创建新测试案例打包，供以后在其他机器上测试

2、麒麟linux由于安装虚拟显示器导致鼠标闪烁卡顿
原因：安装虚拟显示器多了个未知显示器，只要删除该显示器即可。
解决：由于该台机器控制面板无法打开，就无法删除多余的显示器，
所以就删除了原来的桌面，重新安装了一个更高版本的桌面。

3、模型、点云、点云+全景原始素材linux静默转换的so和Java封装代码提供
说明：
（1）支持两种运行方式：java项目中导入AssetImporter.jar；直接运行jar包
（2）目前支持win_32_64的模型、点云、全景转换，支持linux_64的模型转换。点云转换一直写的不支持linux，全景的转换依赖点云，
所以linux下目前只支持模型转换。

4、AgPointCloudOptions类修改
说明：新增颜色jni接口，并重新编写测试类和测试，并将node下有关点云的接口测试，无效果的交给底层查看。

5、有关VREffect_ModelEffect中setModelVisible的测试

6、新增3d柱状图jni
说明：增加有关该组件的接口，并编写测试案例测试

7、新增log相关jni接口并测试

8、新增PackageFile相关接口，用于判断pak的完整性和获取pak内文件列表

9、发布linux下和windows下的dll

12/28-12/21
1、redhat下安装无显示器下支持独显
说明：使用最新的软件：\\192.168.8.189\share\文件交换区\王路\软件\虚拟显示器

2、java端测试案例程序EngineTestLauncher优化维护
说明：重新编写java端所有测试案例的注解，使得测试案例总面板能够用中文名字显示每个测试案例

3、引擎jni优化
说明：jni全局变量重构：
删除全局变量：context、globeScene、globeCameraNode
新增全局变量：globeApplication

4、java端测试案例程序EngineTestLauncher优化维护
说明：
（1）、修改注解，支持测试总面板以中文列表显示；
（2）、彻底解决同一个进程中关闭一个引擎测试案例，然后再次启动一个引擎的测试去案例奔溃的bug。

5、node添加新碰撞TestCollideWithNodeStable.java

6、引擎编译windwos下和linux的动态库

-------------------------2021年-------------------------------------------
1/4-1/8
1、DebugUtil修复优化
说明：
（1）、修复优化测试模型、地面、线框包围盒
（2）、重新编写测试的ui界面

2、集成license-manager到vking_util项目
说明：
（1）、了解项目的运行流程（javafx+fxml+springboot）
（2）、集成至vking_util的swing项目中并测试

3、jni接口开放并测试
说明：
（1）、全景开放：是否限制楼层、设置和获取当前楼层、设置和获取距离权重
（2）、围栏：是否设置面剔除、是否为动态、设置和获取顶部颜色、设置获取底部颜色
（3）、点云：设置和获取遮挡点的大小、设置和获取透明度

3、VkingUtil增加md5校验功能

4、filter子类去除id属性测试
说明：
（1）java的filter子类不用单独维护id（况且以前设计就没有维护）
（2）提升代码质量
5、发布32位和64位dll并测试

1/11-1/15
1、测试案例组件总面板新增中文模糊搜索
说明：中文模糊搜索的是每个测试案例的类注解上的title字段，也可以直接模糊搜索类名

2、JNI侧引擎实现合理性梳理，不合理的予以记录并修改
说明：记录继承关系不合理的类和文件层级不合理的类，并在不影响业务运行的情况下考虑修正

3、java新增类
说明：D5000ByJson、RefCounted、Context、Object、Animatable、LogicComponent、Serializable、UISelectable

4、java修改继承关系的类
说明：
（1）、ObjectAnimation、ValueAnimation、Material修改为继承Resource 
（2）、Animation修改为继承ResourceWithMetadata 
（3）、SoundSource、DebugRenderer、Terrain、Navigable、NavigationMesh、Constraint、SplinePath、PhysicsWorld、RigidBody修改为继承Component 
（4）、DayNightWeatherControl、SkyUtil、CameraControl、WeatherFlagComponent、HoverMark、RaycastVehicle修改为继承LogicComponent 
（5）、RibbonTrail修改为继承Drawable  
（6）、DynamicNavigationMesh修改为继承NavigationMesh 
（7）、UIElement修改为继承Animatable 
（8）、Text修改为继承UISelectable 
（9）、LineWithBall修改为继承CustomGeometry

5、安卓环境搭建、安卓初步编译
说明：由于重装系统，须重新搭建环境，重新编译，这次需要做好必要的文档

1/18-1/22
1、编译引擎的android库
说明：在不支持android的功能内添加屏蔽android的宏定义
（1）不支持甜心区，对应修改的文件：CameraAreaManager、SceneAPI、Graphics

2、VkingAndroid安卓项目整体流程梳理并编写文档
引擎从Android到sdl再到c++的启动流程说明：
（1）android生命周期函数onCreate()中加载引擎动态库SDLActivity.onLoadLibrary()
（2）android生命周期函数onResume()中调用handleNativeState()，handleNativeState()调用SDLMain.run()
（3）SDLMain.run()调用SDL_android.c中nativeRunMain函数
（4）nativeRunMain函数调用引擎中Main.h中SDL_main函数

3、编译安卓项目
（1）搭建android studio、sdk等安卓环境
（2）运行VkingAndroid的安卓工程（失败、黑屏）
（3）编译最新的URho3D的安卓版（成功），排除环境搭建问题

4、寻找引擎在安卓中运行黑屏的原因
（1）引擎回退到6个月之前版本，也就是2020/7/17发布的版本
（2）编译2020/7/17发布的版本，并解决编译过程中遇到的问题
（3）成功编译，运行无报错信息，还是黑屏

5、开放新的虚线组件DottedLine、发布引擎动态库、编写测试案例

1/25-1/29
1、android编译
（1）尝试修改EffectsConfig调试android
（2）使用jadx工具反编译2020-7-16-14-21的引擎apk
（3）对编译后的文件进行分析，并重新搭建工程对引擎编译
（4）通过对比反编译的工程分析后解决android黑屏问题（少了这句代码renderer.setViewport(0, viewPort)）

2、引擎发布win_x64_x86、linux_x64库

2/1-2/5
1、Node和JNI传递时，指针唯一性
说明：NodeManager中将address的唯一标识改成UniqueID唯一标识

2、 WebGL最新API编译发布到196
说明：
（1）、安装doxygen、查看doxygen的用法
（2）、添加自定义简介页面
（3）、根据web的idl生成的api静态网页并发布到服务器测试

3、demo和api制作设计，参考其他软件
说明：
Doxygen自动将web的api转成xml文件，doxybook将xml转为md文件，vuepress将md文件转换为html页面

4、新增jni接口
（1）、全景播放器新增：init、SetControlViewport、SetCacheSize
（2）、新增BillboardChart类，并协助联调测试bug

5、整合多平台编译的文档（windows、linux、android、web）
说明：\\192.168.8.189\share\文件交换区\引擎\Docs\多平台\2021-02-05-13-25

6、发布win_x64_x86_dll和linux_x64_so，并测试
说明：测试发现卸载场景的时候，会出现多次卸载HoverMarkNode这个节点的bug

2/18-2/20
1、本机上编译web引擎
2、多次测试gis在web下运行的情况
说明：简单的拉远拉近操作，很大概率会出现内存越界的bug，将近四十次报错堆栈几乎每次都不一样，在偶然性上面又添加了bug不确定性。
在禅道上列出了部分内存越界的报错堆栈（也有十条）。除了内存越界的bug还有其他6条无法找到原因的bug也在禅道中记录了。
3、CollisionResults缓存指针测试

2/22-2/26
1、智慧科技风格的场景案例移植到java端

2、web下gis内存越界bug尝试修复
（1）、增加总内存（TOTAL_MEMORY）到1G，增加栈内存（TOTAL_STACK）到128MB。仍然出现bug
（2）、在细分代码后这是数据中：TiledImageLayer::SetTextureData的函数中直接截断返回，发现并不奔溃，bug范围缩短到下载贴图数据那块和设置贴图数据。
（3）、在TiledImageLayer::OnTextureLoaded截断测试定位到TiledImageLayer容器m_TileCache释放的问题

3、开放jni接口并并测试
（1）、DottedLine，pick功能和多点折线功能
（2）、PanoramaVideoPlayer::UpdateFrame方法添加参数指定alpha通道
（3）、SceneCamera实现方法FlyToFitTarget
（4）、动态围栏添加频率接口（SetFrequency）
（5）、BigDataTest添加billboardchart测试

4、发布引擎动态库

3/1-3/5
1、resource类jni添加

2、web编译参数试错
（1）、-fsanitize=undefined，捕获地址为空的错误
（2）、-fsanitize=address -s ALLOW_MEMORY_GROWTH，捕获缓冲区溢出
（3）、-s SAFE_HEAP，NULL指针（地址0）读取或写入，未对齐的读取或写入，读取或写入超出所管理的有效内存的顶部

3、webassembly debug c++
（1）、谷歌官网2020/12更新的日志中调试WebAssembly中有说出可以调试变量信息的更新
说明：下载最新谷歌浏览器测试，只有指令堆栈，并没有发现变量信息
（2）、引擎未能编译出源映射
说明：去掉自定义结构，还是未能编译出源映射
（3）、使用官网的的引擎案例编译web版本
说明：出现环境问题，未能编译成功，环境报错未能找到c++基本的头文件

4、协助同事搭建jni编译环境，协助调试一些bug

3/8-3/12
编译原引擎遇到的问题
（1）、使用最新的emsdk编译1.7.1的Urho3D，构建过程中报错找不到（stdio.h、string.h等）c的基本库。
解决：在官网的讨论区找到类似的问题，将emsdk的版本降为2.0.8，构建和编译通过。
（2）、使用2.0.8编译1.7.1 urho3d后的案例中，测试报错：Cannot read property 'length' of undefined
解决：在构建的时候打开设置EMSCRIPTEN_SHARE_DATA=1
（3）、打开URHO3D_TESTING=1时构建自动生成测试的html文件，报错：parseTools.js preprocessor error in shell.html:1: "#!/usr/bin/env firefox"!
解决：去构建目录的Source目录下编辑shell.html文件删除第一行代码#!/usr/bin/env firefox
（4）、最后报错：Module.removeRunDependency is not a function
未解决，原因：emsdk的版本urho3d的版本不兼容，官网有讨论：https://discourse.urho3d.io/t/emscripten-build-issue/5068/12
（5）、分别下载emsdk-1.39.20、emsdk-1.38.48、emsdk-2.0.8对urho3d-1.7.1版本编译
说明：都出现Module.removeRunDependency is not a function
（6）、官网最老的版本是emsdk-1.38.48，然后去其他渠道下载了1.35.0的版本，进行编译
说明：出现报错：Error: Cannot find module '../tools/eliminator/node_modules/uglify-js'
类似讨论：https://discourse.urho3d.io/t/building-urho3d-1-7-1-samples-to-html5-for-year-2020/6072
（7）、官网核心人员指出他们均在linux下编译测试成功，然后我也在linux下搭建了一套编译web的环境。
结果：未编译成功

3/15-3/19
1、引擎解压到本地的dll和pak的路径支持多个版本，并打包测试
2、3d省界线jni接口开放并测试
3、idl自动生成机制讨论及工具开发
（1）、绘制思维导图，设计c++解析工具（完成）
（2）、第一遍解析：将c++文件一次性读取到内存中，记录依赖文件，解析宏定义（完成）
（2）、第二遍解析：解析c++文件中任意嵌套命名空间中的类，记录每个类的始末位置、类名、关键字、继承类（完成）
（3）、第三遍解析：解析每个类中的所有public方法，记录每个public方法的始末位置（完成）
（4）、第四遍解析：解析每个public方法，记录它们的注释、返回值、函数名、参数名、参数类型（完成一半）
3/22-3/26
idl自动生成工具开发
（1）解析每个函数的方法
（2）第五遍解析：屏蔽不对web开放的类和public方法（只要在相应的类上的注释中添加@NoWeb注释）
（3）自动创建idl文件
（4）自动根据GIS和Urho3d中的所有头文件生成idl文件
（5）处理一些未能生成的bug

3/29-4/1
1、idl生成
（1）、解析宏定义中未考虑大于号、小于号、等于号类似判断
（2）、解析的函数中未考虑参数出现大括号的情况
（3）、宏定义包含"/"符号
（4）、数据类型的转换：如String替换成DOMString
2、添加比例尺和指南针jni
3、协助测试对比web和pc的光照
4、c++案例缺少的资源的找回并放到Test目录，配置cmake文件和在sample下注册Test资源目录
5、doxybook生成vuepress遇到的问题：（doxybook本身不完美）
（1）、注释中有@Param却没有说明会在xml_parser.py，249行报错，解决方法可以删除这些不规范的注释
（2）、markdown.py中需添加个判空
（3）、地址：http://192.168.8.196:8888/vking/engine/

4/6-4/9
1、尝试使用html-i18n-cli直接翻译生成vuepress后的html文件
说明：翻译后的html文件，被一个app.7c2bdb54.js文件修改回去了，app.7c2bdb54.js有一个内容防篡改的功能，
app.7c2bdb54.js有十二万行代码，就没有去研究了。所以改为直接翻译md文件或xml文件的方案。

2、编写脚本翻译md文件，测试并部署到线上

3、java平台可视化组件封装，并添加测试案例
说明：Billboard2DV、Billboard3DV、FenceV、ODLineV

4、提供给三维数据中心转换的JNI，增加状态返回
说明：
地址：\\192.168.8.189\share\文件交换区\王路\AssetImporter\jar\2021-04-09-15-01\AssetImporter.jar
AssetImporter类中提供两种方法：
（1）、状态通过返回值返回：boolean start(String cmdLine);
（2）、状态通过回调函数返回：void startCallback(String cmdLine, RunnableStatus status);
5、引擎发布dll

4/12-4/16
1、禅道bug解决
2、linux下点云转换
（1）、打开点云编译开关，编译代码，解决无法编译的问题
（2）、linux和windows下分别调试，发现windows下走的是laszip_dll.cpp，而linux下走的是laszip_api.c，
然后在linux中删除laszip_api.c强制linux中也走laszip_dll.cpp，发现点云转换成功。
（3）、修改cmake文件，使得模型转换工具能够编译成动态库，使得java能够调用。
3、模型转换工具
（1）、win+linux下测试完成
（2）、编写文档说明如何转换模型、点云、全景
4、服务器转换模型机制设计
说明：
（1）设计界面
（2）编写服务器代码测试上传+模型转换

4/19-4/23
1、协助调试BillboardChart的显示隐藏问题
2、防穿墙组件jni开放测试
3、模型转换工具中文路径问题
说明：点云转换中文路径无法转换问题
4、解决无显示器VirtualGL出现could not open display 0问题
说明：VirtualGL在无显示器下运行正常，在连接过显示器后再拔出显示器的时候出现could not open display 0问题
解决：
（1）、使用"nvidia-xconfig --query-gpu-info"命令获取显卡总线
（2）、使用"nvidia-xconfig -a --allow-empty-initial-configuration --busid 显卡总线"命令生成xorg.conf
（3）、然后重新配置VirtualGL就好了

5、linux下编译引擎编辑器
说明：编译成功，可以运行。
出现两个问题：机器码乱码，定位到模型坐标没了。
编译需屏蔽的两个功能：PCH、Lua
6、模型转换工具添加pak功能
7、发布win_x86_x64_dll和linux_x64_so

4/25-4/30
1、pak分包工具修改
（1）依赖于启动引擎，修改代码不启动引擎可直接分包
（2）发布dll给java测试该工具

2、模型装换工具
（1）、jni添加进度回调函数测试进度（成功）
（2）、测试多线程调用，失败，原因：c++的该工具中存在单例模式的工具调用，需重构一些工具类
（3）、中文问题协助解决
（4）、返回值有效性验证

3、linux下编译引擎编辑器协助完善
（1）、协助调试
（2）、测试加载点云、模型、全景（成功）
（3）、测试模型转换

4、3D省界线重构（ParseFile.java）

5、可视化添加路线组件和半透特效组件封装

6、协助天地图VkingMap项目的一些修改

7、MarkDown手动维护api方案设计
 
5/6-5/8
1、linux下模型转换代码整理并提交至svn
2、windows、linux下使用java测试全景转换+进度显示，pak分包测试（成功）
3、linux下测试编辑器pak分包、全景转换（成功）
4、麒麟机器鼠标显示问题解决
（1）、机器重启会出现鼠标消失的现象
（2）、注销后鼠标会出现，但是在跑引擎的时候，鼠标四周一小块区域出现图像延迟现象
解决：显卡配置allow-empty-initial-configuration
5、markdown编写node api文档
6、Application java侧改造

5/10-5/14
1、node的API文档完善并整理修改和要废弃的代码
2、Application按照设计重构-Java
3、全景相机适配器组件开放，并测试全景下的漫游和飞等操作（成功）
4、动态围栏可视化组件封装
5、引擎编辑器打包linux deb，并测试（完成）

5/17-5/21
1、全景适配器编写测试案例验证。
说明：共验证22个方法，其中8个方法有效果，14个方法无效果，底层为空方法未实现
2、协助调试虚线bug
3、scene、GisNode api文档完善
4、所有组件类或者子类添加以node为参数的构造函数
5、jni接口开放并测试
（1）、TranslationSystem、RotateSystem新增的平移旋转动画组件
（2）、RenderUtil添加CaptureScreenAndSave，支持png、jpg、webp
（3）、修复resourceCache的releaseNativeResources方法
（4）、odline新增设置箭头和拖尾大小的方法
6、发布dll

5/24-5/28
1、全景中的测量问题、安措问题定位
2、围栏、热力图、billboard2d可视化组件api整理
3、linux 下调试obj文件导出问题
4、聚光灯效果
（1）协助编辑器下测试
（2）java实现TestSpotlightVisualizer
5、AppSetting、Skybox, SceneNode api整理
6、Application Java侧的splitViewPort逻辑剥离到独立实现

5/31-6/4
1、二维热力图组件开放、动态标注组件开放并测试（TestHeatMapComponent、TestDynamicTagging）
2、api的类的关系图
（1）使用doxygen生成java的类关系图。缺点：关系图中有很长包名。
（2）编写程序，根据java的反射功能自动生成类的关系图。优点：可根据功能自由调整

3、编写脚本自动化维护vuepress的配置文件
说明：以前每增加或者删除一个md文件都要重新配置vuepress的配置文件，现在可以自动生成

4、编写脚本自动给api文档中的类添加链接
（1）循环根目录，记录当前已经整理了哪些类
（2）正则匹配md文件中出现的对象
（3）给这些对象添加链接，如果已经整理了这个对象文档，则添加相应的链接地址，要是没有整理的，则添加的链接地址为跳转到当前页面
5、编写脚本自动给api文档中的类继承关系图添加链接
（1）编写脚本修改所有api图片的样式，固定图片的大小（为了给图片相应的位置添加链接区域）
（2）注册百度的文字识别接口，编写脚本，批量识别图片中的类名和位置
（3）通过步骤2中获取到的类名和位置信息，编写脚本自动给图片中的类添加链接区域
6、更新可视化测试案例，添加ui、热力图、聚光灯

6/7-6/11
1、编辑器发布deb包
2、解决api文档中继承关系图过大，导致百度文字识别失败问题
3、动态标注组件、动画系统添加可视化测试案例中
4、api文档整理：
说明：RefCounted、CustomGeometry、Sprite、Material、
HoverMark、DynamicTagging、Vector3f
5、使用com.sun.javadoc包编写代码自动生成md文档
（1）、将Vector3f.java中的所有注释规范化
（2）、成功生成Vector3.md的文档（包含注释）
6、java侧代码和包的评估
（1）修改包名event下的大写的包名，评估影响：http://192.168.8.189:81/zentao/task-view-11780.html
（2）已删除包：com.vking.engine.enums、com.vking.engine.luascript
7、jni开放接口并测试
（1）、AgPointCloudFalseColor（设置点云颜色）、
（2）、BrokenLine（折线）
8、可视化添加动画、路径线两种模式。
9、发布windows和linux dll

6/15-6/18
1、根据java类的注释和结构自动生成JS提示的d.ts的工具
（1）、完成ui界面
（2）、可配置类名更改
（3）、可配置过滤哪些包或者类

2、API一致性整理
整理了：Vector3d，Matrix4d，Quatd，Quaternion，Transform，AgPointCloud，LODModel，StaticModel，BillboardGeometry、Texture；

3、编写脚本，将dll拷贝到java工程的同时将pdb拷贝到共享文件夹
目的：防止每一次发布dll，忘记发布pdb

4、版本发布并测试（gis速度有增加、但是存在一些贴图覆盖站所地面的现象）

6/21-6/25
1、阿里扫描插件安装，修复重要的
说明：
（1）、所有的覆写方法，必须加上@Override注解
（2）、在if/else/for/while/do语句中必须使用大括号
（3）、浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。
（4）、数组大括号要写在类后面
（5）、@Deprecated 标注的，需要标明新的用法

2、可视化
说明：
（1）、火焰粒子特效
（2）、微观天气系统，宏观的天气
（3）、圆周旋转的效果
（4）、3D文字效果

3、API一致性：
（1）、新增
BillboardDrawable、BillboardGUIDrawable、
WeatherEffectUtil，ModelEffectUtil，Texture2D，UIElement，
TextureUnit，BillboardManager
（2）、修改上周api

4、去除GisOrbitview，整理GisSceneCamera
（1）、对比GisOrbitview，在GisSceneCamera中添加缺失方法
（2）、重写GisSceneCamera的jni（32个API）
（3）、测试这32个API（TestGISSceneCamera）
（4）、去除其他依赖并测试

5、发布dll，并测试

6/28-7/2
1、可视化任务
（1）、gis上其他的天气补充全、火焰设置到设备上、3D省界
（2）、模型隐藏展示，改为帧刷新处理
（3）、新增视频小面片组件，方形面片展示在大门上方，圆形贴合到设备表盘上
（4）、新增天空盒组件，在聚光效果中体现
（5）、新增非球面扩散组件，在gis上站外的不远处 放置此效果
（6）、圆周旋转效果模型换成无人机，速度减慢，位置改为主变上空；模拟重力运动；聚光效果照在一个楼上；等其他小细节调整
2、api整理
CustomModelUtil、ModelLoader、BillboardManager、DynamicTaggingVisualizer、
FenceVisualizer、HeatMapVisualizer、ODLineVisualizer、PathLineVisualizer、
SpotlightVisualizer、Visualization
3、FxSprite重构，
4、全景适配器协助调试和测试

7/5-7/9
1、可视化任务
（1）、小视口爆炸
（2）、数字射线
（3）、小面片测试视频播放组合
（4）、集成相机飞行的多种方式
（5）、3D billboard效果
（6）、集成界面按设计方案调整
（7）、路径线集成od线效果
（8）、以往模型着色、描边多种效果
2、所有构造的address考虑改为默认构造，通过setAddress实现
说明：修改代码并测试，修改api文档
3、api文档优化整理
（1）、已有的get保持，但是API有的get改成了is，和底层保持一致，需要恢复；
（2）、可视化的API风格统一、枚举命名问题、小问题修改

7/12-7/16
1、可视化任务
（1）、数字射线
（2）、OD线效果调整
（2）、集成3d省界线的动态和非动态的效果
（4）、某些相机飞行奔溃问题
（4）、集成柱状图
（6）、集成体积云
（7）、集成城市的炫酷风格
（8）、集成 静态阴影、动态阴影
（9）、集成动态光照
（10）、其他小的调整：无人机加光圈、半透在gis下无法使用、3dBill与原先保持一致、切割视频面片成圆形、2dBillobard的字体调整
2、api一致性GIS部分：GISNode、TileNodeManager、TileImageLayer、GISCamera、GisSceneCamera
3、协助体积云调试、jni中去掉一些字符串拼接的数据传输、一些bug的联调解决
4、引擎动态库发布

7/19-7/23
1、可视化相关任务
（1）、溶解消失效果集成
（2）、小视口界面调整，不复用天空盒
（3）、视频面片，播一小段本地视频，圆形切一个现场图片
（4）、协助科技城市底色调整
2、可视化新增调整任务
（1）在变电站中用普通作业围栏划定一个作业区域，加上聚光效果，并加上3D文字标注“（工作票作业名称）”，在作业区域中展示热力图。
（2）选一个主变做成半透明，加上3D文字标注“冷备用”。
（3）关键设备上（主变、高亢）用宏观poi聚合显示巡视点位数量。
（4）选一变压器做体渲染（例：温度为变量），点击后展示模型爆炸图。
（5）主要路段标上路径线，用3Dbillboard标注为“机器人巡视路径”。
（6）（变电站和GIS）雨、雪效果 （例：大小为变量）。
（7）用动态围栏（不同颜色）圈围出各个电压等级区域（500kV、220kV...）
3、引擎国产化deb包打包研究
说明：以前直接使用linux自带的命令deb打的包，未生成：
（1）、原始的源代码tarball
（2）、源代码概要
（3）、debian目录内容的归档
（4）、当前修订版的全部变更的描述文件

7/26-7/30
1、引擎c++和java分支拉取、修改、测试
2、可视化系列的代码修改为和api一致
3、API一致性-Application
（1）、GIS初始化机制，封装自行通过appSetting.isGis进行初始化包装
（2）、BillboardManager、TileNodeManager作为标准属性
（3）、一些方法和属性是否保留，加注释
（4）、DesktopApplication修改、AndrodApplication维护、GisOrbitView等类去除
4、API一致性-WeatherEffectUtil、ModelEffectUtil
（1）、JNI侧实现，可采用复制原有VREffect_ModelEffect.cpp中的实现
5、可视化
（1）动静态天空盒切换；
（2）添加感叹号标注；
（3）无人机光圈修改；
（4）新增平面消失；
（5）小面片描边；

8/2-8/6
1、VREffect_ModelEffect.java继承ModelEffectUtil.java，去除VREffect_ModelEffect.java中的重复实现。
2、华为服务器安装系统、驱动
3、引擎国产化deb包打包研究
4、核对Null参数
5、可视化整合
（1）、热力图面板
（2）、寻路导航
6、主分支合并代码+打包（win+linux）
7、类名修改和测试（java+jni）

8/9-8/13
1、api一致性新增文档
boundingbox、boundingsphere、boundingvolume、matrix3x4、matrix4、Color、Matrix3、
Animation、Audio、AnimatedModel、AnimationController、AnimationState、ObjectAnimation、
ValueAnimation
2、修改svn总api文档目录结构，新增package.json
（1）修复在服务器一键打包失败的bug: 必须将路由依赖设置为："vue-router": "3.4.5"
（2）方便了一键打包（npm run build）、一键本地测试（npm run dev）
（3）修改图片中类链接跳转在本地测试（npm run dev）和一键打包（npm run build）出现不一致的bug
（4）修改参数链接跳转本地测试（npm run dev）和一键打包（npm run build）出现不一致的bug

3、api一致性修改不符合文档的类
BillboardManager、Camera、Graphics、LODModel、Material、Renderer、SceneCamera
4、华为服务器安装麒麟V10
（1）、最小安装（由于不是最小安装会报python版本错）
（2）、手动配置网络：安装桌面
（3）、安装必要的软件

8/16-8/20
1、根据web的api修改api文档和java、JNI代码
BillboardDrawable、Camera、Drawable、HeatMapComponent、
SkyBoxManager、LodModel、Renderer、SceneCamera、
Texture、Texture2D、Viewport、ResourceCache、Node、Scene、
Fence、ODline、PathLine、Sprite、UIElement
2、根据姚志伟上传的API一致性修改文档：
StaticModel、Texture、Texture2D、Viewport、FloatingMarker、
AgPointCloudOptions、ResourceCache、HoverMark、Component、
Scene、SceneNode
3、api评估是否保留/移除
 GISDataLoader，Console，SkyUtil,DirectMemoryManagement、
 AbstractImageLayer、
4、转换工具完善
（1）模型装换在linux下的问题，是使用了线上的jar包，重新拉取最新的代码打包没问题
（2）点云转换成功后会退出进程的原因：点云转换读取进度的线程中调用了已经释放的PointCloudImporter对象，导致线程出问题。
5、event包注释整理
6、引擎日志输出/通知到业务的机制考虑

8/23-8/27
1、Node#destory的NodeManage.getInstance().removeNode时机评估
2、转换工具发布新的dll和so
3、可视化
（1）移动到Engine-Java下
（2）可视化动态天空盒增加拖动轴改变光照
（3）热力图设置半径和设置透明度面板
4、GroundHalo组件开放并测试
5、修复maven javadoc
说明：Vking-Engine-Java整理了314个类中的函数注释，规范注释，使得javadoc没有报错也没有警告
6、WeatherEffectUtil和ModelEffectUtil中所有的函数添加主线程判断和跳转
7、引擎在arm的麒麟机器上编译不通过

8/30-9/3
1、API一致性
（1）新增CustomGeometry子类：
AngleLine、AnglePlane、ApertureQuad、Arrow、
Box、BrokenLine、CameraDepthBox、Coordinate、
Curve、CustomBox、Cylinder、DashedLine、
Fence、FrustumBox、Gyro、Line、LineWithBall、
ODLine、PathLine、PointSprite、Polygom、Polygon、
Quad、Rectangle、Spheres、TowerLine、Track、
TrackDirection、VideoPatch、WaveMesh
（2）CameraProjectionBoard,LODCullController，CameraControl，
SplinePath,AgPointCloudFalseColor，CameraCollide,全景是适配器，Text3D
2、引擎arm尝试在arm机器上编译
（1）、源码编译安装gcc4.8.5
（2）、编译引擎、编辑器（通过编译不能运行）
3、Linux整体测试
目前只有pure virtual method called，terminate called without an active exception。
初步认为是底层销毁调用虚方法的问题。
4、filter代码整理、测试类添加，覆盖所有的filter

9/6-9/10
1、组件开放jni、测试
（1）放大镜
（2）水晶模式
2、可视化增加圆角路径线、放大镜、水晶模式
3、解决pure virtual method called，terminate called without an active exception问题
说明：已定位到LODCullController::WorkingThread::ThreadFunction()中pCullCtrl_->UpdateCulling();的调用问题
4、API一致性-Java侧注释和API文档保持一致
RefCounted、Context、ResourceCache
HeatMapComponent、AppSetting、SkyBoxManager
5、customcomponent代码整理
6、编辑器在arm机器上编译运行

9/13-9/18
1、可视化测试通用改造
（1）抽取资源，新增数据本地持久化，可切换不同站所。（后期可添加界面手动配置）
（2）ui和逻辑分离
2、协助测试放大镜gis下问题、
3、多平台模型特效一致性描述修改
4、三维数据中心模型转换工具bug
（1）点云不能在一个进程中连续转换
（2）linux下点云转换无法读取文件
（3）发布linux和win的动态库并测试
5、可视化测试例子使用一段时间，bathces数量一直在涨，排查是业务侧还是底层封装问题
说明：未找到bug
6、数据中心D3DataCenterClient工程维护
（1）、整理部分代码
（2）、查阅api


9/22-9/30，10/8-10/9
1、数据中心D3DataCenterClient工程维护
（1）、页面UI重构
（3）、登录逻辑、下载速度计算逻辑、缓存逻辑、文件列表逻辑、下载完成逻辑重构
2、开JNI，编写测试案例
（1）PolygonShape
（2）PanoramaCamera::SetLodBias
（3）DistributedNodeManager
（4）GISSceneCamera::setFlyToSlowingDown
3、Java测试案例维护：非测试案例的过滤目录整理
4、测试钩子
（1）加载一个场景后，生成所有需要测试类的树状列表
（2）可选择某个类自动构建，并自动获取所有方法，模拟参数自动验证所有API的可用性
5、绕物体旋转，帧率不稳定排查优化
说明：java和jni端未发现不稳定的代码

10/11-10/15
1、开放JNI
（1）电缆井类DianLanJing
（2）倾斜摄影加载类ObliqueLoader
（3）VolumeLine迁移
2、绕物体旋转，帧率不稳定排查优化（协助底层）
3、Jenkins结合cmake+MinGW编译c++的helloworld（成功）
问题：
（1）The C/CXX compiler identification is unknown
解决：cmake文件中添加
INCLUDE(CMakeForceCompiler)
CMAKE_FORCE_C_COMPILER(gcc GNU)
CMAKE_FORCE_CXX_COMPILER(g++ GNU)
（2）make: *** No targets specified and no makefile found.  Stop.
解决：将Jenkins主目录迁移到系统盘外面
4、Jenkins+cmake+MinGW编译urho3d（失败）
问题：Could NOT find DirectX using DirectX SDK default search paths (missing:HAVE_DIRECTX)

10/18-10/22
1、jenkins+cmake自动构建
使用Jenkins+cmake+vs编译工具自动化
2、可视化相关的API增补更新发布 

10/25-10/29
1、协助32位dll运行崩溃问题定位
2、VkingUtil工具优化
（1）添加启动模式，不同模式下对应不同的功能
（2）jar包发布剪裁无用依赖
3、ParseFile过期标注,写法纠正
4、jenkins自动构建细节完善

11/1-11/5
1、可视化相关反馈优化
2、可视化打包可运行jar包
3、c++使用doxygen构建文档
4、JNI添加
KmlLoader、PanroamaCamera、Track、VolumeLine
5、OpenGL模拟器环境

11/8-11/12
1、交接文档编写
地址：Vking-Engine-V8.0\Docs\引擎交接相关\王路
2、梳理所有要下沉的JNI代码
3、jni开放接口并测试
（1）重构后的遮挡查询
（2）track置顶
（3）体积线起始点填充
（4）全景环绕漫游


11/15-11/19
1、JNI逻辑下沉根据梳理结果提出方案交流。
（1）梳理、讨论
（2）解决部分下沉（所有枚举的修改）
2、引擎尝试使用JNA转换
（1）、java的一个类库，只能实现java调用c的功能，不能实现c调用java的功能
（2）、针对c++，在使用JNA时候，需要使用JNI先构建出c++对象，再使用JNA进行调用
（3）、相比较JNI,JNA效率低一倍左右

11/22-11/26
1、按照方案下沉JNI
（1）分别拉取c++和java分支进行JNI下沉
（2）PODVector对象指针数组装换为java对象列表
（3）资源路径请求更改为资源对象请求
（4）键盘事件下沉至JNITools
（5）所有字符串拼接废弃
（6）碰撞下沉
2、继续JNA调研和讨论
（1）JNA调研、测试效率、文档编写
（2）swig、javacpp调研
3、playRoamingAround接口更改，需开放Location、LocationType、LocationValue桥梁

11/29-12/3
1、JNI下沉代码扫尾提交（主要是GIS下的下沉和FxSprite）
2、JNI下沉的代码优化：
（1）几处内存泄漏
（2）几处传参可使用引用优化性能
（3）几处函数返回了局部变量引用
（4）几处函数返回值为容器的形式会造成性能损耗, 可改为引用传参输出, 例如Node新增的碰撞函数
（5）FxSprite成员变量名规范
3、引擎截图封装byte[]方式返回，支持Web前端获取截图数据直接使用
4、下沉后的JNI测试主子站，修改崩溃bug，并打包主子站给测试测试
5、JNI下沉文档总结编写

12/6-12/10
1、引擎侧的相机相关代码查阅学习
（1）投影矩阵、视图矩阵、视锥、反射矩阵
（2）相机控制器
2、测试了模型转换添加dxt压缩的速度
（1）win:109s(压缩)  16s(不压缩)  ---cpu:i5-7400
（2）linux:367s(压缩)	9s(不压缩) ---cpu:i5-6400
3、重新编译增加多线程的模型装换工具为动态库
说明：编译并测试
结果：win--48s  linux--115s
结论：使用线程将速度提升了3倍左右
4、将水面整合到可视化案例中
5、JNI添加
（1）Image类添加
（2）GIS相机是否自动刷新NearFar
6、管廊漫游过程中在拐弯的部分不平滑
说明：搭建本地管廊测试环境，编译web代码

12/13-12/17
1、Java访问引擎C++对象的方式
（1）两种方案并测试：
方案一：java构建的时候保存node。每次调用组件的方法的时候，拿着这个node去判断有没有这个组件
方案二：c++的JNI层全局缓存对象的智能引用，定时检查对象是否可用，进行垃圾回收
（2）编写文档
2、总结ARM编译打包问题
（1）java打包测试、c++测试
（2）编译文档
3、JNI接口
（1）SphericalWave废弃TargetTime的设置并添加设置半径的接口
（2）VolumeLine新增WorldBegin和WorldEnd属性的设置和获取
4、全景适配器对应的一些细节交互问题（收集问题）
5、移除SharedPtr<Scene>形式的智能指针变量
6、管廊漫游过程中在拐弯的部分不平滑（为完成）
说明：已有思路，对相机和相机控制器的操作不熟悉。

12/20-12/24
1、室内交互API分离
2、镜头正对着模型的问题，鼠标选中的面为正面，镜头正视
（1） 根据射线检测获取正面方向, 以及物体中心位置
（2）根据物体大小确定合适观察距离, 执行相机飞行动画
3、鼠标左键单机为选中设备、添加选中的过滤条件
4、测试钩子优化
（1）支持所有jni api检查
（2）消息框中显示详细的报错信息

12/27-12/31
1、镜头拉近设备
现有已经处理好-前端或封装层, 对接联调, 使用现有的相机FlyTo动画, 
或者使用FlyToFitTarget方式;触发条件是未选中设备时的鼠标双击;
2、鼠标左键选中设备后，左键按住拖拽，定为设备为中心，
进行拖拽根据选中设备的包围球, 对拖拽范围进行限制.
3、鼠标左键双击为拉近设备，并且定位到正立面设备选中状态下, 
鼠标双击事件接入正面定位功能
4、设备镜头前面遮挡的设备需要隐藏或取消通过视野碰撞对物体进行显隐控制, 
考虑射线碰撞或几何体碰撞.
5、设备镜头前面遮挡的设备需要隐藏或取消（射线剔除）

--------------------------------------------------
-------------2022----------------
1/4-1/7
1、室内模式相机
（1）选择了视锥剔除、保留了射线剔除，可通过api自行选择
（2）修复被剔除的物体，在取消选中状态下没有复原
2、可视化相关反馈-10.28
3、最新代码编译dll，场景物体是红色的bug
重新删除cmake的缓存，再次编译
4、引擎的tweeny使用学习

1/10-1/14
1、室内模式：
（1）底层取消选中逻辑，迁移到业务层，并开放相应接口
（2）视野镜头缩放范围加以限制
（3）左键拖拽优化：当被选中物体不在视野内，使用了动画FlyToLookAtAndRotate
（4）右键旋转优化：加插值，速度是根据距离自动计算。
（5）遮挡剔除优化、剔除角度bug解决
2、全景代码和适配器代码阅读，尝试新增LookAtRotate的实现动画

1/17-1/21
1、全景事件适配器的LookAtRotate等无法实现
2、全景适配器对应的一些细节交互问题	
3、修复java单元测试	
（1）新增了部分JNI
（2）修复了一个隐晦的bug。全局Context可能被释放的bug
（3）修改部分测试数据

1/24-1/26
1、室内模式
（1）剔除效果改为透明处理
（2）右键旋转会拉远的bug
2、解决全景适配器对应的一些细节交互问题
（1）场景漫游时会出现：站所场景显示成一个球体（这业务适配器没有还原的bug，导致滚轮拉远的时候出现球，目前bug为出现）
（2）功能未实现 已实现
（3）漫游功能速度设置一致，实际漫游中全景适配器下速度更快。（速度计算方法不一样）
（4）漫游过程中的旋转方向和角度会不同（UniformlyRotate和UniformlyMove两个动画的功能上不一致）
（5）业务侧的调用时机问题。（目前调用时机业务可控）
2/17-2/18
1、室内模式
（1）、测试案例修改提交
（2）、改动代码查阅
2、相机拐弯平滑优化（测试阶段：未完成）


2/21-2/25
1、GIS隐藏后关闭碰撞检测
2、相机拐弯平滑优化
3、新增jni接口
（1）、setEnabledSelf、isEnabledSelf
（2）、flyToLookAtWithRotation
4、引擎发布window和linux动态库 并测试

3/3-3/4
1、拐弯动画，解决gis下的bug
2、新增JNI AutoUpdateGISNearFar
3、发布版本

3/7-3/11
1、平滑拐弯动画
（1）支持垂直拐弯
（2）修复路线插值过大问题
2、相机优化
（1）缩放速度适配, 根据远近自适应
（2）添加惯性, 判断当鼠标快速拖拽时触发

3/14-3/18
1、Vking-Engine-Core瘦身
Assimp   占用6346KB
webp  占用549KB
anglescript+lua  占用5946KB

2、相机的惯性动画优化
（1）重写tweeny的via，去除自带的缓动效果
（2）tweeny增加惯性动画（左键+右键）

3、尝试计算频率固化(FixedUpdate)
CameraControl::Update替换成FixedUpdate，并开启FixedUpdate，测试鼠标操作和动画有些飘，帧率没什么变化。

4、评估scenecamera在编辑器是否支持F键定位
编辑器中的F键定位的功能写在了EditorView.as中的CameraRotateAroundCenter
直接是对camera的节点进行操作，scenecamera中要使用类似的功能有两种方案：
（1）使用SceneCamere中的CameraParam进行翻译
（2）先禁用SceneCamere，然后对节点进行操作，最后解开SceneCamera的禁用


3/21-3/25
1、遮挡剔除OcclusionCulling类接口封装(JNI)
（1）新增OcclusionCullingState结构体转换桥梁
（2）新增OcclusionCulling（JNI）
（3）java新增OcclusionCulling类并测试
2、平视镜头下相机很难拖动的问题.
cameraTransform_.pitch.ToDegrees()>=60的时候设置拖动速度随相机高度变化。
3、编辑器F键定位动画代码跟踪测试
说明：编辑器中的F键定位的功能已经支持了scenecamera:
EditorUI.as文件中：HandleHotKeysStandard() -----> LocateNodesAndComponents()
EditorView.as文件中：LocateNodesAndComponents() ----------->FitCamera()：中有对是否使用scenecamera的判断
4、开放销毁Application接口，经测试没问题发布动态库（共享文件夹下的临时dll目录）
5、相机优化：
（1）左键移动优化添加高度适配。
（2）gis下添加左键和右键惯性动画
（3）开放对应的的jni接口
6、进入到地下模型后，请求未停止bug
网络请求主要在下面几个函数中调用
（1）DataLoader::LoadElevationData()
（2）DataLoader::Update()
（3）DataLoader::AfterTessellate()
解决：可以将gis调度关了TileNodeManager::SetTessellateEnable设置为false

3/28
GIS调度逻辑梳理、代码阅读
1、GisSceneCamera::OnUpdate处判断要不要进行细分。通过相机的横纵比、Near、Far值是否改变
2、TileNodeManager中的Tessellate是根据每1秒中进行定时更新（原来是每2s）
3、TileNodeManager在Update处设置了60ms、100ms、500ms、2s定时更新贴图
与原来对比，曹启文主要利用了定时器进行贴图更新优化，这也导致了更新不及时，在
一些特殊情况下贴图会是黑色或者模糊。

3/29
1、一键安装包优化：找一个破解版的重新打包
\\192.168.8.189\share\文件交换区\王路\一键安装包\x64\2022-03-29-10-05
\\192.168.8.189\share\文件交换区\王路\一键安装包\x86\20220329

2、继续阅读GIS调度代码，列出几项可优化的点
（1）依次创建了地形区块图层、星星图层、太阳图层、大气层图层、比例尺图层、指南针图层、GoogleOneMap图层、延迟加载图层、layers.xml中LayerList图层
（2）主要耗时在TiledImageLayer图层的NeedSplit处
优化的地方主要是：能够很快准确计算出NeedSplit函数。
定时器的优化导致了瞬间的黑块很容易复现（屏幕录制：\\192.168.8.189\share\文件交换区\王路\bug\20220329）。


3/30
1、地下模式交互优化、设计
（1）cesium地下模式：
https://sandcastle.cesium.com/index.html?src=Underground%20Color.html
操作上基本没变化，只有在双击模型的时候，左键的拖拽平移变成了旋转。
（2）火星科技：https://mars3d.cn/example.html
用的cesium,操作基本没有变。
结论：地下模式和室内模式差不多，都是属于小空间内的操作，可以优化：
拖拽旋转的聚焦和失焦问题。
也就是无论失去焦点还是聚焦的时候，旋转和平移不能跨越太大，导致稍微一拖拽就跳出当前视野。

2、新增RuntimeImporter的java的代码和JNI代码

3/31
影响相机交互的一些因素：
非GIS下
相机参数targetDistance_、targetPosition_改变：
（1）滚轮在失去焦点的时候滚动（只改变targetPosition_）
（2）滚轮在聚焦的时候滚动（只改变targetDistance_）
（3）左键拖动（只改变targetPosition_）
（4）左键双击，滚轮点击
（5）相机飞行动画和LookAt
（6）目标点到地面以下且摄像机的倾斜角度超过45度。
（7）左键拖拽且摄像机的倾斜角度超过45度。
（8）相机控制器初始化

GIS下
GIS相机参数targetPoint_、zoom
（1）滚轮滚动
（2）左键拖动（只改变targetPoint_）
（3）左键双击，滚轮点击
（4）相机飞行动画和LookAt

结论：可以根据这些因素对地下模式进行优化。
比如问题：定位到一个模型盒子，转动会会把模型移除画面。
是因为：targetPoint_、targetPosition_不是模型盒子的中心。
解决方法：就看上面列举的因素中哪些更改了targetPoint_、targetPosition_。

4/1
关于镜头一拉扯可能就飞了的优化
说明：
主要是非GIS下，因为非GIS下有一个操作叫做重新计算目标位置。
GIS下暂时没有测试出这个bug

复现情况：
（1）将模型定位到y值为100的地方。
（2）双击定位到一个模型，然后左键拖动一小段距离（或者滚轮向后滚动一段距离置失去焦点）

原因： 
（1）左键拖动完后会去重新计算targetPosition_的位置，而计算方法以（0,0,0）处平面开始计算的
（2）在滚轮滚动后也有一个重新计算targetPosition_的位置，计算方法也是以（0,0,0）处平面开始计算的
如果定位到的模型离原点较远的话，那么就会出现一拉扯就飞了的bug

解决：滚轮滚动和左键拖拽完后都可以不用重新计算位置。
疑惑：
（1）以前为什么要重新计算目标位置。
（2）重新计算位置的方法也是不灵活。为什么要用不灵活的计算方法计算目标位置

4/2
1、地下模式优化文档编写
2、其他引擎动画研究
（1）cocos2d c++源码动画类Action研究。
（2）DoTween 动画缓动研究


4/6
引擎自带的动画（Attribute Animation）
说明：
1、属性动画
（1）插值：没有插值、线性、三次样条插值（过度更加平滑）
（2）循环、播放一次、保留最后一个关键帧的值
2、ObjectAnimation可用于将影响不同属性的多个值动画组合在一起
优点：
（1）插值有线性和三次样条平滑插值，常见的动画都够用
（2）可以组合动画使用
（3）非常灵活可以通过配置关键帧达到缓动效果和设置速度的效果
缺点：
（1）没有动画结束的回调函数
（2）缓动类型的动画需要自己配置关键帧（需要自己写算法）
（3）由于太过灵活使用起来不太方便，没有封装好的动画类型

4/7
1、陈佳昕反馈web下GIS的左键快速拖动之后，有概率飞到地球内部去
说明:在台式机上测试，暂时没有找到问题，需要再web上看看效果
2、了解属性动画的流程
（1）、Node::HandleAttributeAnimationUpdate
（2）、Node::Animatable::UpdateAttributeAnimations
（3）、ValueAnimationInfo::Update
（4）、ValueAnimationInfo::SetTime
（5）、AttributeAnimationInfo::ApplyValue
3、创建多个SceneCamera都只会控制主视口相机的问题
说明：
（1）鼠标的双击拖拽等操作都是获取主视口鼠标的相机计算的
（2）获取相机的时候都是获取主视口中的相机

4/8
引擎属性动画测试（加入Tween）
说明：编译通过，测试不太理想，需要写个设计文档，先设计下。

4/11-4/12
动画模块设计
（1）绘制类图和继承图
（2）编写文档
4/13-4/14
动画模块扩展实现
说明：大体实现了已设计的类（EngineAction、MoveTo、MoveBy、DelayTime、RotateTo等）
4/15
1、动画模块扩展实现
说明：测试，发现回调出现设计上的问题。
2、发布引擎动态库（64位和32位）

4/11-4/12
动画模块设计
（1）绘制类图和继承图
（2）编写文档
4/13-4/14
动画模块扩展实现
说明：大体实现了已设计的类（EngineAction、MoveTo、MoveBy、DelayTime、RotateTo等）
4/15
1、动画模块扩展实现
说明：测试，发现回调出现设计上的问题。
2、发布引擎动态库（64位和32位）

4/24-4/25
动画扩展
（1）、开放JNI
（2）、新增Java代码和Java测试案例
（3）、打包动态库测试：\\192.168.8.189\share\文件交换区\王路\临时win_x64_dll\2022-04-25-19-11

GIS web下相机缓动动画bug（搭建测试环境+修复）

4/26
1、web下相机缓动动画bug
（1）web搭建环境
（2）测试运行
2、动画扩展EngineAction的声明中GetAttributeAnimationInfo在web无法编译
说明：函数前面加了类名

4/27-4/28
1、搭建web测试环境，打包web
2、修复缓动效果黑屏的bug
3、开放JNI:Node.asyncLoadXML、GetWorldOrientedBoundingBox
4、java新增Math类：OrientedBoundingBox、Polygon

4/29
动画扩展新增Tween插值

5/5-5/6
1、Tween合并到引擎动画（修改、已提交svn）
（1）31种缓动插值使用模板函数获取（节省大量代码、增加代码质量）
（2）基本共同startData、endData、useTime属性上移到父类
（3）引擎动画扩展文档完善修改

2、将Tween开放给java使用，并新增测试案例

5/9-5/13
1、模型碰撞不精确(CollideWithNode)
（1）两个节点（Box）进行碰撞调试
Sphere::CollideWithTriangle的v22值异常崩溃。
经调试查询发现是：
Geometry文件中函数CollideWithTriangleImpl的v2值赋值异常。
（2）定位到StaticModel::ProcessBoundingSphereQuery函数不精确导致
细挖代码时，一些矩阵的计算没有搞懂。后续需要查阅写资料学习三维场景中的矩阵技术

2、开放JNI、相应的java代码
（1）LODGroup
（2）LodCustomGeometry
（3）FrameInfo桥梁
（4）RouteLine

3、web的Tween扩展动画编译不通过问题
说明：枚举值做函数参数问题。将枚举改为：enum class TweenType

4、引擎扩展动画代码review的问题
关于引擎原来的动画会不会和扩展的动画起冲突
说明：扩展动画遵循了引擎原动画的运行流程，只是更改了动画的创建过程，
所以扩展动画不会和原引擎动画起冲动，测试结果也是没有冲突的。

5、引擎发布动态库发布

5/16-5/17
1、扩展动画的销毁测试设计方案
方案一：
动画create修改为返回的是一个智能指针。
缺点：JNI这边需要写一个定时器自动去删除。

方案二：
动画create的时候，加入到Manager中，Manager会定时清理动画。
缺点：动画构建好，没有及时使用，过一会再用发现被销毁。

方案三：
动画添加到Node上的时候，加入到Manager中，Manager会定时清理动画。
缺点：动画构建好，一直没有添加到节点上，那这个动画一直都存在。
2、重新发动态库（扩展动画强转的bug）
3、node添加setVertexAndColor的JNI

5/18
1、动画扩展文档更新。
补充运行原理、细节说明

2、扩展动画销毁确定
（1）动画创建成功后，放入对象池，动画绑定节点，从对象池中移除。当对象池满的时候，自动移除末尾对象。
（2）Animatable中是用智能指针保存，动画结束置空该智能指针。动画被销毁。
说明：解决内存溢出问题，解除动画创建后没有使用堆积问题。

5/19-5/20
1、Node内存优化后，性能指标对比测试，形成文档  
（1）重新拉取svn43269和svn43269代码进行编译测试
（2）针对三堡站，记录整个程序的运行内存消耗和引擎内部数据
（3）编写文档
2、碰撞不精确问题
（1）与同事交流确定节点碰撞上的问题
（2）测试发现偶尔出现崩溃
（3）两个车子的碰撞精确，车子和房子碰撞在某个角度上不够精确。


5/23-5/27
1、pick接口扩展输出经纬度(JNI)
说明：java和jni代码

2、gis TiledImageLayer调用setNativeEnabled，拉近拉远可能导致图层缺失问题

3、GIS昼夜循环
（1）了解相关代码
（2）编写测试案例测试修复
（3）修复java昼夜循环崩溃bug

4、内存调优方向调研
（1）删除没有用到的变量
（2）结构体里面数据成员按照CPU位长对齐（暂时不考虑）
（3）内存值较大的函数参数尽可能使用引用或者指针（栈内存暂时不考虑）
（4）函数不能太大（建议不超过40~50行），否则会导致线程占据的栈内存过多（栈内存暂时不考虑）
（5）减少库文件的引入（dll瘦身）
（6）使用复合赋值运算符代替普通运算符（暂时不考虑）
（7）Switch代替if-else（暂时不考虑）
（8）定义移动构造函数和移动赋值运算符，避免不必要的复制操作（暂时不考虑）
（9）避免在循环中动态地创建变量、调用隐藏的函数（for循环优化暂时不考虑）
（10）除以2或者2的幂的除法运算改用右移（运算优化暂时不考虑）

5/30-6/2
1、GIS图层支持特定范围透明
（1）首先确定范围
（2）根据范围设置透明
2、3DGIS指南针按照设计优化，加入操作事件
（1）注释掉原来的写法（原来的是直接在xml中加comand加的UI），无法添加事件操作
（2）使用Sprite在Filter中重写指南针实现，兼容原来所有的接口
（3）添加缩放、重置、移动UI，添加事件测试
3、TileNodeManager的setEnable修改
说明：组件移除后，强制渲染一次。
4、node的asyncLoadXML bug
说明：经过站所测试，没发现问题。


6/6-6/10
1、解决Node异步加载asyncLoadXML的bug
说明：StaticModel::HandleNodeDelayedResourceLoaded中判断强转的resource指针是否为空

2、3DGIS指南针加入操作事件完善
（2）增加移动功能
（3）Sprite的不能click事件的原因查找
（4）代码提交svn，操作视频录制提交禅道

3、动画修改
（1）移动动画去掉开始值，改为当前值
（2）JNI开放缓动值的获取功能
（3）node runAction新增不定参数序列动画

4、引擎支持无头模式
说明：测试案例：TestHeadless.java

5、gis贴图透明完善
说明：需要修改贴图的部分透明度。目前没有头绪。

6、模型压缩Draco预研
（1）github上下载最新的代码，编译测试模型压缩
（2）编写文档

6/13-6/17
1、GIS相机更新机制，改为非强制
说明：setGISPosition和setGISRotation最后多添加个boolean控制

2、Gis在Linux下sector的obb剪裁有问题，导致Tile缺失
说明：
（1）obb剪裁算法未发现移位操作等不兼容linux问题
（2）重新在https://github.com/hebohang/HEngine上找一个Obb算法接入测试，linux下还是缺失，排除obb算法问题。

3、新增JNI
（1）增加两个NavvisSelector/GISNavvisSelectorJNI并测试
（2）发布引擎dll

6/20-6/24
1、API一致性，更新线上api文档
（1）更新文档
（2）修改侧边栏样式，默认侧边栏不展开

2、Camera等引起的不稳定定位排查
（1）开放触发双击间隔时间的接口，默认值提升到0.3f。（原来为0.2f，双击不灵敏）
（2）PickHorizontalPlane给定范围，解决非GIS相机拖不动的bug
（3）非gis下滚轮滚动，当没有pick到物体时，速度随着相机目标距离变化

3、gis调度优化
（1）上一次的定时调度优化还有无改进空间
（2）其他地方有误改进空间

4、新增JNI接口、发布测试动态库

1、gis优化：研究地形细分是否可以关闭（距离站所很近）
2、gis优化：新增瓦片和瓦片LOD改变的时候开启贴图细分
3、网格碰撞调研

6/27-7/1
1、Gis调度耗时测试分析
说明：测试并且详细记录到文档
文档地址：Vking-Engine-V8.0\Docs\GISGis调度耗时测试分析.doc

2、使用多线程对耗时的GIS调度进行重写
说明：出现很多指针崩溃问题。
结果：目前多线程最好只用来计算数据。

3、新增JNI、测试案例
（1）DebugUtiles
（2）Line新增SetRenderOrder

4、指南针修复（无法隐藏）



7/4-7/8
1、JNI中射线碰撞的bug
（1）修复代码
（2）合并到主干、主干拉取tag代码发布动态库

2、CameraPickUtil中cameraPick失效bug
（1）编写测试案例（TestCameraPickUtil.java）
（2）还原bug场景和操作（未发现bug）

3、Node下和节点碰撞的接口修改JNI和java（兼容以前的代码）
说明：CollideWithNode、CollideWithNodeStable

4、根据Gis调度耗时测试分析文档进行优化
（1）去掉定时100ms、500ms、2s定时更新贴图的代码（相机运动结束没有返回正确的状态）
（2）使用引擎自带的性能分析工具Profiler，分析并写入文档，确定耗时来自地形细分的定时数据设置


1、gis调度优化地形顶点数据的填充
说明：web卡顿主要来源，pc端使用的多线程，但是每一帧开销还是最大。

2、调试组件DebugRenderer支持GIS环境

7/11-7/15
1、gis优化：（http://192.168.8.189/VR8.0/svn/Vking-Engine-V8.0/Docs/GIS/优化/GIS优化.doc）
（1）、去掉三次定时刷新瓦片贴图的代码，新增UpdateAllTile的接口供GisSceneCamera使用；
（2）、贴图加载好未通知到瓦片（导致某一情况下视野瓦片模糊，比如LookAt到某个比较近的区域）；
（3）、修复已经被缓存的地形瓦片不能读取地形顶点缓存的bug，提升性能

2、调试组件DebugRenderer支持GIS环境
说明：测试调试了下，已经被曹启文实现了，直接使用DebugRenderer->SetGISNode

3、去掉地形细分，或者地形远处不细分，引擎反而帧率下降
说明：暂未找到原因


7/18-7/22
1、新增相机动画状态，去掉老的，gis相机和非gis相机共用一个状态。
2、引擎默认渲染效果调优，参考东吴项目要求，固化参数作为标准
3、输电点云的las导入编辑器后，默认交互困难，优化
4、去掉地形细分，或者地形远处不细分，引擎反而帧率下降
说明：地形越模糊，地形网格越大，渲染数据越多，导致帧率下降。
5、新增OrientedBoundingBox、Polygon的JNI和数据转换桥梁，并测试。
6、JNI寻找java的类从预加载，改为懒加载。（只有用到的时候再去寻找加载，然后缓存）
说明：解决新dll中包含新的java类，但是java项目为老的项目，导致无法加载新类的bug（未测试成功）

7/25-7/29
1、场景参数配置器组件SceneConfig开发
2、同步、序列、Tween动画补全接口，修复不能跑的bug
3、开放JNI和JNI数据转换桥梁
（1）SceneConfig开放JNI、编写测试案例
（2）VolumeLine 新增获取胶囊体的JNI
（3）新增InitJavaClasses JNI（不启动引擎就能加载dll的前提）
（4）CollisionAlgorithm开放JNI
（5）CollisionUtil开放JNI
（6）WGSAnchorPort开放JNI
（7）新增数据装换桥梁：Capsule、GJKDistanceInfo
（8）更新数据装换桥梁：OrientedBoundingBox

8/1-8/5
1、OrientedBoundingBox中数据点java和c++容器不一致导致算法错误
说明：java用的是List，C++用的是类似数组的Vector，一个是链表存储一个是按顺序的数组存储
2、JNI桥梁中去除从缓存容器中获取JavaClass（存在无法获取的情况），直接从JNI环境中获取。
（1）去除JNI中JavaClass缓存
（2）搜索全部jni中的local引用，及时清除引用
（3）项目测试，观察项目内存是否有增加
3、相机交互SceneCamera扩展旋转模式
（1）支持以右键按下时pick的位置为旋转中心进行旋转（完成）
（2）对应新增旋转模式, 默认为先前的模式（完成）
（3）适配左键、滚轮（未完成）

8/8-8/12
1、相机交互SceneCamera扩展旋转模式优化
（1）适配左键、滚轮
（2）新增pick旋转模式参数，用来做没有pick到物体的时候，旋转模式的目标点处理。

2、SceneCamera飞行动画不同的距离速度不一样bug
说明：
（1）经测试Tweeny中during有缺陷，不能过大。
（2）新增接口FlyToLookAtAnimation，解决该需求。

3、java侧单元测试修复
4、java侧单元测试，模型加载相关，自动解析模型资源，设置新老光照参数，防止效果不佳
5、JNI修改、新增
（1）、CollisionAlgorithm新增胶囊体和OBB、BoundingBox的碰撞
（2）、胶囊体更新：
	（2.1）、新增函数：GetCenter/GetLength/GetCylinderLength/GetRotation；
	（2.2）、新增胶囊体和OBB的碰撞、快速碰撞；
	（2.3）、修改胶囊体与Box、点碰撞函数；
（3）、CollisionUtil

8/15-8/19
1、SceneCamera新增两个恒定速度飞行的函数  （已完成）
（1）FlyToLookAtAnimation：恒定速度飞到某个目标点
（2）RoamStableSpeed：恒定速度漫游（拐弯顺滑）

2、所有动画使用Tweeny插值，默认为线性插值，删除TweenAction动画。（已完成）

3、梳理JNI碰撞相关的代码全部封装到引擎内部(CollisionUtils)。（已完成）
（1）JNI中Node、CameraPickUtil中的碰撞迁移到CollisionUtil中
（2）GIS JNI中GisNode、GisCameraPickUtil中碰撞迁移到GISPickProxy中

4、GIS规避字或者线使用了父级图层的情况  （已完成）
说明：经测试未发现bug，已经录制测试视频上传至禅道。

5、滚轮优化（gis+非GIS） （已完成）
（1）开放滚轮拉远、拉近的最小速度
（2）解决滚轮拉近无法穿过物体的bug

6、GIS渲染性能调优--解读gis的渲染模块  （已完成）
说明：引擎和gis的渲染流程、步骤

7、RoamStableSpeedAnimation动画修复旋转bug （已完成）

8/22-8/26
1、JNI碰撞代码清理，碰撞组件开放相应JNI。
（1）c++：JNI、Node中的碰撞全部清除；
（2）java：Node.java、CameraPickUtil.java 调用 CollisionUtil.java 中碰撞方法；
（3）java：GisCameraPickUtil.java 调用 PickProxy.java 中碰撞方法；

2、发布正式版动态库
（1）版本号：8.1.5.0；
（2）版本平台：Windows_x64_x86、Linux_x64

3、RoamStableSpeedAnimation漫游动画新增俯仰角旋转
说明：RoamStableSpeedAnimation功能：稳定速度、水平旋转、俯仰角旋转、拐角顺滑

4、引擎退出，解决Billboard崩溃bug。（以前版本一直有这个bug，只是复现方法的问题）
说明：BillboardArtist::s_geometry_在引擎退出后销毁。

5、GIS渲染性能调优--优化点梳理
（1）关闭其他图层：星星、太阳、大气层、比例尺、指南针。帧数基本不变。（不是优化点）
（2）贴图渲染图层：分为地形几何网格、贴图数据（优化点）
（3）贴图数据性能分析：加载贴图数据FPS=50左右，不加载贴图数据FPS=80左右

8/29-9/2
1、SceneConfig扩展属性
新增：光照强度、镜面强度、物理色温、HDR色调映射、自动曝光、阴影开关

2、SkyBoxManager新增接口开放JNI
新增：AdaptLightVersion、SetLightVersion

3、梳理引擎应用层特性，和编辑器对照，梳理出差异点，用于编辑器尽量最大化模拟业务场景  
地址：http://192.168.8.189:81/zentao/task-view-12331.html

4、GIS渲染性能调优--drawable加载贴图数据优化
（1）去掉地形的厚度，FPS提升5~10FPS
（2）每4张贴图数据构建一个Batch，导致采样次数增多，计算量增加。
（3）考虑一张贴图构建一个Batch。

9/5-9/9
1、把instance数量显示在f2中, 仅Debug模式
（1）instancesNum_是batchQueues中每个Batch包含的Instances数量
（2）totalInstancesNum_包括batchQueues、lightQueues（shadowBatches、litBaseBatches、litBatches）中的Instances数量

2、评估Urho3D 1.8正式版
说明：
（1）通过代码对比，发现我们引擎在2018/5/6和Urho3D的代码更新一致，
（2）需要对2018/5/6以后的更新代码进行对比（未完成）

3、GIS渲染性能调优--一张贴图构建一个Batch（未测试完全）。
（1）保留球形细分结果
（2）重新构建新Drawable（TileDrawable）
（3）根据贴图创建TileDrawable（一个贴图一个TileDrawable）
9/13-9/16
1、修复全景测试案例
2、评估Urho3D 1.8正式版（目前对比了5个月的提交）
（1）详细版：Vking-Engine-V8.0\Docs\整体\版本更新日志\Urho3D官方修改日志整理.doc
（2）简单版：
【4/30-6/2】最大改动：StringHash的反向支持、Containers下的容器优化
【6/3-7/15】最大改动：使用枚举和FlagSet替换了很多类里面的常量
【8/11-10/8】最大改动：将网络连接kNet替换为SlikeNet
3、GIS渲染性能调优--一张贴图构建一个Batch
（1）开会确定可行性、可优化性。（Vking-Engine-V8.0\Docs\GIS\优化\GIS渲染优化整体.doc）
（2）渲染重构过程没有详细的文档设计，导致耦合其他功能出问题比如gis Pick。
（3）需重新编写重构设计文档，再开回讨论。

9/19-9/23
1、迁移到碰撞组件下的方法优化
迁移的碰撞分为两种：
（1）节点和Shape类型的碰撞：CollideWith[Shape类型]
（2）节点和节点碰撞：NodeNodeCollision
2、SceneConfig扩展
（1）参数扩展：环境光模式、强度；阴影品质、分辨率、强度。
（2）序列化的xml文件中增加参数名称，提升可阅读性。
3、NavvisSelector功能computeSelect JNI修复
4、发布引擎版本v8.1.6：win_x64_x86_dll、linx_x64_so
5、Linux下崩溃问题排查
说明：会在gis地形构建顶点数据、或者地形细分的时候崩溃。
（1）GIS下linux下测试主子站进站退站，内存只增不降。
（2）非GIS下linux下测试主子站进站退站，内存只增不降。
（3）windows做同样的测试，发现内存也只增不降。

6、评估Urho3D 1.8正式版（对比了2019年的更新）
主要改动：
（1）BatchQueue修复缺少移位的bug
（2）修复Audio::PauseSoundType线程安全的bug
（3）添加了若干个自定义几何
（4）添加 ETC2 纹理支持
http://192.168.8.189/VR8.0/svn/Vking-Engine-V8.0/Docs/整体/版本更新日志/Urho3D官方修改日志整理.doc

7、GIS渲染性能调优--详细文档设计
http://192.168.8.189/VR8.0/svn/Vking-Engine-V8.0/Docs/GIS/优化/GIS渲染重构.doc

9/26-9/30
1、GIS渲染性能调优--讨论并实现
（1）开回讨论确认
（2）release下不能加载问题。（未找到原因）
2、评估Urho3D 1.8正式版（对比了2020更新）
说明：
（1）主要新增了新的PBR技术
（2）Math文件夹下修改了很多类
3、进站退站内存只增不降的原因
说明：通过多次测试发现是java虚拟机的释放问题，
本机电脑测试不停进站退站，内存增加到2G左右不在增加
过半个小时内存回到1个G


10/18-10/21
1、核心库cmake文件更新，JNI项目cmake文件重写。
（1）核心库cmake文件更改：vs目录中h和cpp文件放在同一目录中（github urho3d 2020-2-16/17的更新）。
（2）JNI和GISJNI两个项目的cmake文件重写，使用define_source_files去除大量分组代码。

2、根据梳理表格, 将JNI逻辑代码抽离
（1）EventManagerJNI：废弃，新增JNITools.java。JNITools是java和c++数据交换的桥梁代码，是java特有，web不需要。
（2）BillboardGeometryJNI：废弃，将相应函数迁移到BillboardDrawable中。
（3）CommonMaterialOperateJNI：废弃，将逻辑迁移到java。
（4）EngineUtilJNI：废弃，新增EngineJNI，SystemInfo.cpp，逻辑迁移到相应的类中
（5）RenderUtilJNI：废弃，开放相应的子系统，相应的逻辑迁移到java
（6）NodeManageJNI：废弃，相应的逻辑迁移到java
（7）RobotQuadJNI：废弃，使用Quad在java实现
（8）SystemStaticSettingJNI：废弃，相关逻辑迁移到相应类中
（9）Version：废弃，且有关Version的JNI迁移到EngineInfo.cpp中
（10）DepthTextureUtil：迁移到java中
（11）SystemToolsJNI：废弃，迁移到CanvasHandle.cpp和SystemInfo.cpp中
（12）ComputingGeometry：迁移到引擎Math文件夹下
（13）CommUiUtilJNI：废弃，新开放DebugHud子系统
（14）EngineStateGraphicsJNI：废弃，开放UIShow组件
（15）FxSprite：c++新建FxSprite继承Sprite，将Sprite中的有关JNI的代码全部迁移到FxSprite中
（16）GuiNode：java端未找到该类，已经废弃，删除JNI代码

10/24-10/28
1、JNI逻辑代码抽离后的测试验证
说明：c++代码已提交，java端代码未提交（删除修改了较多接口，java代码需要和dll一起提交）。

2、评估Urho3D 1.8正式版，将官网修改记录都统计了一遍

3、相机交互需求，新增滚轮旋转模式
使用方法：
（1）、sceneCamera->SetSceneCameraMode(SceneCameraMode::WHEEL_ROTATION);//滚轮旋转模式
（2）、sceneCamera->SetForcePosition(position);//设置聚焦中心点
不设置聚焦中心点，则旋转中心默认以滚轮按下的点为中心


4、SceneCamera射线检测性能优化可行性评估
（1）OnMousePress有一次Pick检测，默认相机操作是没有用到的，可以优化；
（2）相机动画，每帧运行的次数是否过多，考虑优化；
（3）使用耗时工具检测耗时的地方（是否是模型过大导致性能下降，而不是相机动画）


10/31-11/4
1、Urho3D 1.8正式版同步
说明：整理文档、开会、列出任务

2、C++测试用例一体式集成, 简化使用方式。
（1）测试程序自动添加依赖头文件、自动注册、自动添加UI
（2）测试程序增加缓存，启动的测试场景为上一次关闭的测试场景

3、协助排查SceneConfig在Java端无法生效的问题

11/7-11/11
1、linux下GIS崩溃问题排查
说明：去掉了多线程，加载GIS目前不需要多线程

2、完成Urho3D 1.8同步代码

3、引擎8.1.5的一些崩溃问题
（1）碰撞经纬度为inf问题，引擎8.1.6中已解决。（反向合并至8.1.5）
（2）引擎关闭Billboard崩溃问题，引擎8.1.6中已解决。（反向合并至8.1.5）
（3）定位碰撞索引内存访问越界崩溃问题（姚志伟笔记本崩溃bug）

4、GIS渲染重构
（1）学会使用RenderDoc调试渲染
（2）渲染无法显示的原因出现在顶点索引设置顺序上

1、调研Tracy profiler
2、继续GIS渲染重构

11/14-11/18
1、修复gis下相机拖不动问题
2、重写GIS地下判断，优化判断的性能和准确性，解决判断不准的bug
3、解决业务右上角小视口崩溃bug
说明：全景适配器绑定之前先还原绑定，防止二次绑定造成崩溃。
4、linux下修复abs问题后的测试、打包
5、GIS渲染重构后原来GIS的网格顶点算法无法使用（原因无法定位）
说明：打算使用新的网格顶点算法计算

11/21-11/25
1、JNI接口开放LodCull组件
2、C++测试用例一体式集成（Scene没有销毁）
3、优化代码, 使c++测试用例工程VkingTestCases能在linux上顺利编译
说明：linux可以打开AngelScript编译，但是同时打开Lua编译就会出问题，目前可以关闭Lua，后续继续解决
4、SceneConfig参数扩展
5、GIS渲染重构：顶层贴图成功渲染，其他贴图出现层级不匹配等问题

11/28-12/2
1、GIS渲染重构
（1）贴图出现层级不匹配，层级混乱（同一层级下统一渲染）
（2）不同层级的贴图出现互相遮挡的情况（不同层级的贴图使用不同pass）
结论：
（1）远处禁止状态，重构后的帧数比原来多20左右
（2）运动状态，重构后的帧数比原来多10左右

2、相机旋转模式一定角度崩溃bug
解决：射线和平面没有焦点时导致相机目标点为nan

3、java端开放禁止相机重新定位至原点的接口

12/12-12/16
1、GIS重构bug修复
说明：目前只有一个问题：由于精度损失导致2D省界线有的地方被地形覆盖

2、排查编译OSG模块时发生的错误
（1）先是安装OSG的官方教程单独编译了一遍（成功）
（2）解决引擎集成OSG模块的cmake文件问题

3、滚轮旋转相机的bug
说明：相机旋转后键盘不能操作

4、引擎的底层授权机制调研并简单测试实现
说明：调研、设计，代码基本实现

12/26-12/30
1、开放JNI
（1）、全景相机flyToNearestPanorama、flyToTargetNearestPanorama
（2）、OcclusionQuery查询模式接口SetQueryMode开出

2、引擎的底层授权基本实现
（1）底层测试通过
（2）JNI接口开发测试通过

3、GIS重构渲染问题
（1）尝试多种方案未能解决
（2）汇总问题（待讨论）
\\192.168.8.189\share\文件交换区\王路\gis优化\GIS渲染重构遮挡问题.doc

12/30、1/3-1/6
1、左右拖拽交互困难
bug地址：http://192.168.8.189:81/zentao/task-view-12625.html
说明：多次测试，问题久远未能还原

2、线路飞行，视野抖动排查
bug地址：http://192.168.8.189:81/zentao/task-view-12617.html
说明：测试有抗锯齿原因的抖动，其他抖动问题未能还原。

3、进入三维鼠标操作很难用
bug地址：http://192.168.8.189:81/zentao/bug-view-18300.html
说明：旋转模式中的拖拽去除distDragScale的设置

4、EngineTestLauncher运行2~3次会崩溃
（1）c++多次delete Application，每次delete的时候加判断且赋值nullptr
（2）java端的firstApp改为静态属性

5、合并Urho3D1.8
-------------------------------------------2023---------------------------------------
1/9-1/13
1、完成linux授权代码实现
说明：linux使用hostnamectl命令获取机器码。

2、EditorGizmo组件新增强制选择模式
说明：添加是否使用鼠标选择目标点，默认true（为了不影响原来的逻辑）。

3、点云工具解耦
说明：Tools下新增项目PctManager，是点云处理工具类的入口。

4、修复点云转换进度不显示问题
说明：进度刷新线程被拦截。

5、JNI接口层适配引擎代码位置迁移

6、点云转换工具linux编译
说明：修复点云无法编译的情况并成功编译，无法运行（无法识别GISNode）

7、Urho3D1.7在Arm平台编译
说明：成功编译测试案例，由于没有桌面环境，暂时无法测试

5、引擎支持Arm平台发布

1/31-2/3
1、VkingUtil的编辑器授权失效
说明：更新、优化该工具。
（1）java端获取注册码算法更新
（2）优化导入选项：文件导入、直接输入。

2、osg的编译的问题
说明：重新测试，没问题。

3、点云转换、pak压缩在linux无效bug
（1）linux测试机器无法重启（请求其他运维人员也无法解决），重装了系统
（2）重新搭建编译环境
（3）成功编译引擎

2/6-2/10
1、解决点云转换、pak压缩在linux无效bug
（1）linux下点云转换修复了若干个c++语法问题，cmake配置链接库的问题
（2）linux下pak压缩经测试没问题

2、发布windows_dll、linux_so（8.1.5.3）

3、引擎支持Arm平台测试
（1）原引擎Urho3D1.8在Arm平台上编译测试案例成功且运行成功
（2）我们引擎编译成功，无法运行

2/13-2/17
1、linux下编译出现GLIBC_2.7无法找到的问题
原因：排除gcc版本的问题（使用的是gcc4.8.5）,可能是linux系统版本太高的原因
解决：使用老的linux机器再次编译，解决问题

2、模型点云转换工具Linux下libGL.so.1无法找到问题
原因：libGL.so.1是docker环境问题
（1）编译好jar包在linux下单独运行没有问题
（2）在docker环境下测试有问题

3、开放暂停引擎渲染的接口
（1）engine->SetEngineStart()、engine->SetEnginePause()
（2）发布window_dll、Linux_so

4、pak压缩工具新增压缩进度回调
（1）c++代码中新增详细的进度回调
（2）提供JNI，发布windows_x64_x86_dll、linux_so动态库


2/20-2/24
1、工具制作（Java版本）：全景Faro的xml转化为Vking的标准xml。
说明：该工具可以提供给“全景转换”使用。
备注：工具地址（http://192.168.8.189/VR8.0/svn/AssetImporter）

2、业务反馈转换工具出问题，验证。
（1）全景转换无法转换，已验证是xml和图片被加密。（业务需要注意不能上传加密的）
（2）点云更新接口是否可用，已验证可以使用，但是转换进度条无效。（需要点云开发人员添加）

3、点云或者模型转换出现过主进程退出的bug
说明：编辑器需要退出模型转换进程，应该向管道中写入“EXIT”数据（原来是写入“End”数据）。
模型转换完成后也会写入“End”数据，编辑器的进程退出和模型转换结束冲突了，所以需要新增一个
“EXIT”的管道通知。

4、pak解压工具无法解压
说明：经过测试分析发现是传入的参数的问题，由于功能被后人更改为解压文件夹下多个pak，
所以若传入单个pak文件，解压工具无效

5、pak压缩工具新增解压进度回调
（1）c++代码中新增详细的进度回调
（2）提供JNI，发布windows_x64_x86_dll、linux_so动态库

6、NavvisSelector适配web平台
（1）根据测试案例测试该工具
（2）web编译
（3）功能适配（未完成）

2/27-3/3
1、NavvisSelector适配web平台
说明：代码已提交，等待web验证

2、引擎支持Arm平台发布
（1）分别测试了Ubuntu和麒麟
（2）编译完成、测试成功

3、优化代码, 使c++测试用例工程VkingTestCases能在linux上顺利编译
（1）编译成动态库
（2）编译成静态库（需要关闭Lua+AngelScript）

3/6-3/10
1、编辑器仿真培训模型转换需求改变
说明：转换后的模型需保留父子层级结构

2、web鼠标保持按下的状态移出三维场景再移入时出现无法正确控制相机bug
说明：给web开放相应的鼠标状态接口。

3、编辑器熟悉发布流程并发布
（1）熟悉发布流程
（2）发布编辑器版本（修改仿真培训模型转换）

3/13-3/17
1、ARM机器openGL版本降级测试引擎（等待web2.0升级）
说明：不推荐通过降级openGL版本来兼容引擎（严重导致linux无法启动），而是建议通过写渲染代码来兼容不同机器。下面几点是需要升级的功能
（1）SMAA功能下有不兼容高版本的渲染代码（需要渲染人员修改）
（2）arm机器不兼容使用深度纹理贴图（需要渲染人员修改）

2、全景框选组件（NavvisSelector）web无法回调问题（无需解决）
说明：web调用时机问题

3、全景下新增获取当前相机下的深度图（完成）
（1）全景代码研究，新增功能
（2）开放JNI、打包动态库、编写java测试代码

4、在站所附件加载局部卫星影像（预研）
（1）构建局部网格
（2）加载局部网格的贴图
（3）挖填方
（4）加载站所
难点：完全理解地形的加载和计算，将算法迁移出来。

3/20-3/24
1、向JAVA开放UTM坐标转经纬度、WGS84坐标的接口（完成）
说明：点云方向定位需求

2、点云转换工具问题--无法同步或异步转换多个（完成）
说明：经测试可以同步、异步转换多个

3、点云转换工具问题--内存无法卸载问题（未完成）
说明：其他任务优先

4、编辑器导出场景配置（完成）
说明：完成后发现原来有这个功能。

5、全景当前相机下获取深度图，自动异步下载兼容web（完成）
（1）全景相机新增GetCurrentDepthImgFromRemote方法
（2）开放JNI、打包动态库、编写java测试代码

6、全景Navvis转换工具合并全景的时候没有合并深度图（完成）
说明：代码写在AngleScript脚本代码的NavvisBatch.as中

7、全景转换后图片不清晰的问题
（1）分析转换过程：全景转换后的图片分为3层，第1层图片质量为10，第2层图片质量为90，第3层图片质量为100（最高质量），
也就是说第3层图片是目前引擎底层最高质量的图片。不清晰的原因是全景调度的时候未调度到第3层。（完成）
（2）全景调度优化（未完成）

ExtendedOctreeImportPoint


---------------
m_tempPoints

m_rootNodePtr
mUmbrellaNodeInformation


m_intermediateLeafNodeList

3/27-3/31
1、点云转换工具问题--内存无法卸载问题（完成）
（1）将rootNode_根节点改为智能指针，转换结束后自动销毁根节点。
（2）每次转换完成需要释放单例对象的内存：
PctConvertStatistic::GetInstance().Reset();
PctConvertConfigGlobal::GetInstance().Reset();
运行截图：

2、相机增加拉远限制
（1）、相机动画新增范围限制，限制动作：拉远、旋转、拖拽。 
（2）、室内模式的范围限制继承父类方法。

3、全景转换后图片不清晰的问题--全景调度优化
说明：全景调度在2021/9/22进行了重构，重构后的全景调度思想：
（1）根据Lod图层数量将相机缩放的区域平均分割（目前是3层，所以分成了3份区域）
（2）每一帧根据相机的当前缩放计算出对应的区域。由于LOD0区太模糊，所有区域对应加1，最大不超过最大的LOD层级数
（3）相机每次定位到一个全景点位，自动加载LOD1层图片，相机拉近缩放，缩放到LOD2区域加载LOD2图片，若相机再拉远到LOD1区域，还是加载更清晰的LOD2图片。
目前优化：
优化原来的LOD因子，通过设置`PanoramaCamera.SetLodBias(2.0f)`,可以让全景自动从LOD2区域加载图片。


4/6-4/7
在站所附件加载局部卫星影像
说明：在非GIS环境下加载局部地形。
优点：能满足在非GIS环境下加载局部地形，同时性能也远超过GIS下的性能

4/10-4/14
1、局部地形优化、修改（完成）
（1）添加挖填方
（2）添加局部地形组件，通过组件方式构建和卸载局部地形
（3）地形和贴图下载修改为异步下载（web下载是异步的）

2、解决编辑器无法加载点云pak的bug（完成）
说明：读取xml文件没有判空，导致Node.pak中包含PointCloud.bin文件的时候脚本崩溃

3、法如转换的新全景坐标太大（完成）
问题：
（1）坐标太大导致不能和点云对齐
（2）坐标太大导致图片抖动、模糊

4、点云加载硬件测试（完成）
说明：分别测试点云在GTX750、GTX1060、RTX3060、RTX2080Ti机器上加载（web+PC）
文档截图：\\192.168.8.189\share\文件交换区\王路\文档\点云\点云加载硬件测试.docx

4/17-4/21
1、局部地形优化：（完成）
（1）、优化地形层级，使得web性能提升至秒级加载和满帧加载
（2）、修复局部地形上没有小黄点的bug

2、给建模员工提供全景坐标转换的工具（完成）
说明：\\192.168.8.189\share\文件交换区\王路\全景\法如全景转换

3、引擎手机端
（1）编译手机端引擎（搭建环境、编译问题修改）（完成）
（2）手机端操作简单优化 （未完成）
（3）引擎手机端问题统计 （未完成）

4/23-4/28

1、引擎手机端
（1）无法启动、运行bug修复
（2）操作优化
（3）问题统计（查看附件）
（4）视频演示（\\192.168.8.189\share\文件交换区\引擎\android\视频演示）
（6）软件安装（\\192.168.8.189\share\文件交换区\引擎\android\2023\二合一（推荐安装））

2、相机bug修复：左键拖拽、滚轮滚动、键盘向下操作能够移动到地面以下。

3、引擎无显示器调研
（1）从引擎本身调研
OpenGL的渲染需要使用窗口创建上下文，渲染完以后还要拿窗口更新数据，所以引擎的
渲染离不开窗口，窗口的构建必须有显示器或者虚拟显示器。

（2）从第三方软件调研（有无更简单方便的虚拟显示器）
有一个简单的方案，先让服务器连接上一台显示器，再将显示器拔掉，然后输入export DISPLAY=:0.0命令
只要服务器不重启，可以一直运行引擎。

（3）从驱动调研（与英伟达技术人员交流）
传统上，OpenGL需要窗口来构建OpenGL上下文。
因此，它们专为非无头操作而设计。当谈到无头操作时，应用程序可以使用其他API来创建OpenGL上下文，
从而避免对窗口系统（或本次讨论的 X 服务器）的这种依赖。换句话说是引擎使用OpengGL渲染流程上的问题。可以考虑使用OSMesa

5/5-5/12
1、专利修改：基于Navvis全景的点位标定
2、引擎无显示器（调研）
说明：linux自带的xvfb测试不支持GLX渲染，目前市面上只有VirtualGL支持3D无显示器模拟。
目前如果不使用VirtualGL的话，只能更改引擎底层构建OpenGL上下文的方式（OpenGL构建上下文必须要窗口），使用mesa去构建OpenGL上下文。
3、修复编辑器中键平移，右键无法旋转的bug
4、修复编辑器点云转换无法转换带有中文路径的bug
5、修复编辑器模型转换仿真培训无法导出motion.xml的bug

5/15-5/19
1、全景相机给Java开放参数的设置，并测试
（1）、setCameraFov：内部封装设置相机参数，设置后立马显示
（2）、set/getNowCameraParam：设置/获取当前相机参数，设置的时候如果没有更改TargetCameraParma，设置会还原。
（3）、set/getTargetCameraParma：设置/获取目标相机参数，设置后可以更改相机参数，设置的时候如果同时设置NowCameraParam，设置会立刻生效，否则会有动画。

2、编译OSMesa测试离屏显示功能
说明：windows下测试成功

3、引擎在安卓上测试点云
说明：没有报错无法加载

4、安卓的webview加载引擎
说明：黑屏无法加载

5/22-5/26
1、引擎整合离屏渲染OSMesa
说明：需要舍弃原引擎的渲染流程，使用OSMesa构建一套新的渲染流程，属于对引擎渲染重构，涉及到的技术需要专业的渲染架构师设计。

2、UE4的离屏渲染功能调研
说明：从讨论组里和官网中得知UE4引擎的离屏渲染功能只针对Vulkan 。而且对显卡的驱动版本也有很高的限制。我们引擎不是Vulkan的，是OpenGL的，所以没有参考意义。

3、原生安卓无法加载点云
说明：没有报错信息，应该是渲染不兼容。

4、web安卓加载引擎（成功）
说明：安卓编译腾讯x5web内核，引擎加载点云和模型测试成功。
5、解决gis下接口（更新所有瓦片）无法使用问题。
说明：相机参数没有及时更新

6、模型转换工具编译win和linux动态库

5/29-6/2
1、模型上传后，转换过程较慢，需优化
说明：经过代码分析90%的耗时时间是模型mdl文件内容的生成和保存。
原来是单线程，改为多线程后效率明显增加，如下对比。
（1）原来单线程转换：CPU使用率12%左右，耗时1203597ms(20分钟)
（2）现在多线程转换：CPU使用率30%左右，耗时30199ms（30秒）

2、linux发布动v8.1.5引擎态库

6/5-6/9
1、模型转换性能优化完善测试
说明：整体测试结果优化了大概20%左右。
（1）开启线程数（cpu核心数）：cpu利用率为50%左右
（2）开启线程数（cpu核心数*2）：cpu利用率为100%

2、倾斜摄影代码了解

6/12-6/16
1、修改专利（全景框选）
2、业务全景崩溃（传递的坐标点为null）
3、全景添加最大fov设置
说明：全景看的视野更加大
4、切斜摄影调度代码解读
5、GIS和非GIS功能切换
说明：进过测试，只需要移除相应的组件，我的测试是移除原场景，构建新场景。

6/19-6/30
1、编辑器修改
（1）全景新增控制fov的按钮
（2）屏幕缩小，全景相机失效bug
（3）编辑器GIS场景无法打开bug
（4）编辑器GIS场景切非GIS场景相机无法正常操作bug
（5）编辑器打包发布

2、斜摄影转换代码解读
（1）使用OpenSceneGraph图形工具包对倾斜摄影数据解析
（2）对图片进行webp格式压缩

3、非GIS模式下创建GIS组件会崩溃
说明：编辑器版本在1.0.42.4以后版本或者用补丁更新
补丁地址：
\\192.168.8.189\share\文件交换区\王路\编辑器\补丁\非GIS环境下构建GIS组件崩溃

4、模型在GISNode下，以及有kmlLoader时，关闭GIS崩溃

5、倾斜摄影加载优化
说明：临时添加的任务，下周继续

7/3-7/7
1、JNI开放UTM转经纬度的接口，发布引擎测试包
2、倾斜摄影加载优化（合并零散pak）
说明：当个文件分别合成1MB，2MB，4MB左右进行测试，
结果没有较大的提升，由于网络的不稳定性4MB还会导致性能下降


7/10-7/14
1、编辑器模型拆分功能修改
（1）新增功能：模型拆分检验
说明：以前模型拆分后pak过大，使用这个功能二次拆分，限制pak最大大小
（2）修改功能：模型拆分
说明：对拆分好的pak进行大小限制
（3）编辑器版本发布
2、linux下业务运行全景bug
（1）无显示器下截图始终没有图像bug
（2）有显示器下崩溃

7/17-7/21
1、linux业务运行全景bug
说明：编写独立的全景测试程序，打包到linux下测试，功能测试正常。

2、编辑器中二次拆分功能在建模那边的电脑失效
说明：重新用vs2015打包解决问题，具体什么问题原因未能找到

3、编辑器全景转换功能在建模电脑失效
说明：多次测试，发现建模使用的磁盘满了，导致功能卡住不动

4、倾斜射线重构设计

7/26-7/28
1、dmp崩溃文件、pdb文件调试编辑器崩溃bug
说明：老编辑器未卸载完全导致编辑器无法启动。
学习了vs调试dmp文件步骤：
（1）编译的时候勾选生成pdb文件
（2）在vs中添加符号表
（3）将崩溃dmp文件拖入编辑器调试

2、编辑器无法导出和加载外包的模型
说明：外包模型的LOD未能构建问题，导致加载模型越界。

3、浏览器切换页面web相机失效测试
说明：下载86谷歌浏览器，并输出日志测试。

7/31-8/4
1、模型转换工具发布windows和Linux动态库

2、编辑器模型拆分新增是否二次拆分按钮
说明：以前的项目没有二次拆分的加载代码，需兼容以前的代码

3、倾斜摄影调度重构优化
说明：目前PC版本没啥问题，性能影响不大，web版本代码需重构

8/7-8/11
1、GIS相机新增区域限制
（1）单纯的经纬度限制
（2）球形区域限制
（3）圆柱区域限制

2、倾斜摄影调度重构优化（web）
目前遇到问题：有的LOD低层级的图层和高层级的图层共同组成一个区域的内容，
这样就不能在加载完高图层的内容后删除低图层的内容，要是不删除低图层的内容，
就会导致有些低图层的模糊模型覆盖了高图层的精细模型。
一句话总结就是：重构后的倾斜摄影存在低图层和高图层耦合的问题

8/14-818
1、解决全景第0层图片马赛克问题
说明：测试后比较通用一点的配置如下
（1）256*256压缩70%，图片最大大小在10kb左右
（2）128*128压缩20%，图片最大大小在10kb左右

2、编辑器新增全景导出设置LOD功能
（1）新增LOD设置功能
（2）全景相机新增默认显示LOD层级功能

3、协助解决未带经纬度的点云和全景的融合问题

4、带经纬度的点云和全景无法完美融合的问题（未解决）
说明：全景的点位对应到点云上面相差40cm左右

8/21-8/25
1、倾斜摄影优化
说明：优化加载和下载逻辑，先按照LOD层级排序，相同LOD层级按照距离相机距离排序。
优化前后加载速度提升60%左右。

2、带经纬度的点云和全景点位融合问题
（1）经过测试，目前点云和全景相差40cm左右的差距。
（2）由于没有任何位置操作的点云和全景也不能融合到一起，所以需要分析数据源，这个需要现场拍摄人员的协助。

8/28-9/1
1、了解点云调度逻辑代码（点云LOD未正确加载）
说明：调度距离所用的包围盒不准确导致。

2、点云底层LOD合并导致加载不友好问题
说明：对点云转换代码进行解读，修改合并参数。

9/4-9/8
1、点云各个区域的LOD层级不统一，有明显的分界
（1）获取屏幕中心点云区块的LOD层级，其他的区块统一加载该LOD层级。
缺点：由于远近的原因导致距离相机近的点云稀疏，远的点云秘籍。（方案否决）
（2）调整LOD之间的距离，使得LOD层级调度不会太过敏感，距离比较近的加载统一LOD层级，
距离较远的才加载低等级LOD层级。（此方案通过）

2、编辑器版本发布
（1）点云转换降低默认的LOD层级的敏感度，解决点云各个区域有明显LOD分界问题。
（2）点云转换添加默认不合并LOD的勾选框
（3）模型拆分不进行二次拆分成功后精度条不消失的bug

3、分支引擎的内容整理合并到主干

4、协助解决Linux发布的最新代码碰撞不准确问题
5、navvis云端IVION调研使用（为了解决点云和全景的完美融合问题）
说明：经过测试公司导出的点云无法上传到navvis云端，后续需继续调研

9/11-9/15
1、使用wasd移动全景，全景加载过程，使用鼠标转动场景，会出现全景图片错位问题（测试新提交BUG）
说明：加载新的贴图的时候，取消老的贴图下载，无法取消回调。
解决方法：加载好的回调函数中贴图与当前贴图做对比，名称不同则不加载。

2、空间管理机模型转换缺少依赖
说明：模型转换工具打包没有去除倾斜摄影转换，倾斜摄影转换需要很多依赖。
解决方法：先屏蔽倾斜摄影的转换，后续需要则另外研发。

3、点云和全景数据源不能融合的问题调研
说明：引擎内部UTM坐标和WGS84坐标算法相互转换存在比较大的误差。

9/18-9/22
1、点云和全景融合问题（UTM坐标和WGS84坐标算法转换优化）
说明：git上找到两个算法，且用python的两个GIS库pyproj和pymap3d验证了算法没有问题，
但是算出来转换的点云是镜像的。

2、模型转换工具新增支持navvis全景转换（编辑器中navvis全景代码解耦）

3、最新版编辑器osg无法转换（打开osg开关重新编译发布编辑器）

9/25-9/28
1、点云和全景融合问题（转换的点云是镜像问题）
说明：算法重构后，全景和点云的旋转相差1.5度左右偏差，重构前相差91.5度左右的偏差。
重构算法地址：https://github.com/ethz-asl/geodetic_utils/blob/master/geodetic_utils/include/geodetic_utils/geodetic_conv.hpp#L98

2、恒定速度漫游结束后无法旋转bug
说明：相机飞到终点后的目标点和相机位置重合的原因

3、发布引擎编辑器

10/7-10/13
1、全景和点云对齐问题
（1）先用经验值发布了编辑器，目前美术那边导出的白音查干点云和全景基本能对齐。
（2）测试不带大地坐标的巴彦杭盖的点云和全景对齐问题。（基本能对齐）
（3）下一步验证大地坐标转换的精度问题。（未完成）

2、带GIS的拆分点云las转换无法合并成一个文件
说明：由于带GIS的las转换需要导出一个锚点信息文件，由于每个las都拥有一个锚点信息
文件，故以前的导出功能就分开转换每个las，导致转换后不能合并成一个文件。
解决：拆分的GIS点云，多个las共用一个锚点信息，将其他las合并。

10/16-10/20
1、全景和点云对齐问题（验证数据精度问题）
（1）添加日志输出
（2）将float全部改为double验证
说明：结果仍旧无法对其。

2、全景和点云对齐问题（算法最终修改）
说明：将使用人数最多的开源pythonGIS库（pyproj、pymap3d）中的算法直接翻译成c++代码。
结果：测试转换后的坐标值和pythonGIS的两个库一样，但是全景和点云仍旧无法对其。
推测：Navvis测试我们的las数据是为合并的文件，推测是带大地坐标的点云合并的时候出了问题，
可以测试未合并的带GIS的点云文件（推测前提未合并的不带GIS的点云能够完美融合）。

10/23-10/27
1、编辑器支持Las地理坐标（WGS84/CGCS2000）和投影坐标（UTM/高斯-克吕格）的显示、检查
2、编辑器支持Las（CGCS2000/Gauss-Kruger投影）转换
3、全景和点云对齐问题（测试未合并的带GIS的点云文件）
说明：测试结果仍无法完美对齐

10/30-11/3
1、linux下点云转换无法释放内存问题
2、编辑器点云全景查看优化
（1）点云当前视角能够切入到附件全景点位
（2）全景切入点云能够刷新视角
2、有关点云全景对齐数据验证（协助田总）
（1）验证坐标转换数据结果一样（精确到小数点后8位）
（2）经过验证以前的算法也没有问题，只不过将（x,y,z）的wgs坐标变成了（y,z,x）,这样的好处就是坐标转换之前就已经将z轴朝上变成了y轴朝上，后续坐标无需对坐标轴进行转换。缺点就是，我们引擎的wgs84坐标的转换和市面上的不一样，和市面做对比验证的时候需要重新调换坐标轴顺序。
（3）为了和市面统一，将wgs坐标更改回统一正确的顺序，后续导入我们引擎再做坐标轴的统一变换。


11/6-11/10
1、验证webp图片的格式适配全景、编辑器支持webp和jpg格式的全景转换
2、点云转换内存释放问题
（1）windows下转换每转化一次内存增加10MB左右，测试多次内存未释放的可达几个G。
内存分析找到SVOHelperNode未释放的结果。
（2）linux下转换一次测试结果内存增加至几个G，且无法释放（未找到问题）
3、编辑器发布

11/13-11/17
1、点云转换内存释放问题（linux）
说明：结束转换的时候调用malloc_trim(0);

2、点云全景对齐问题调研
说明：找到位置无法对其的原因，旋转问题暂未找到
位置无法对其是因为只对锚点坐标origin.json进行东北天坐标变换，
没有对全景图片进行东北天坐标变换。

11/20-11/24
1、带地理信息的非GIS点云无法转换问题
原因：点云导出设计之初是拦截了带地理信息却是小坐标的las点云文件
解决：增加带地理信息的小坐标点云的转换，并发布编辑器

2、倾斜摄影转换增加GIS地理信息（在GIS下和点云自动对齐）

3、现场linux机器无法调用引擎动态库的问题
说明：现场linux机器没有安装桌面环境，在linux下没有桌面环境就没有鼠标事件。

11/27-12/1
1、解决和平站点云全景无法对齐问题
说明：不同的UTM值，全景的偏移程度不同，经过测试UTM50的偏移值是1.4，UTM51的偏移值是-0.4，目前解决点云全景完美融合的方法是开放出偏移值的接口。现在编辑器可以自动计算的偏移值为UTM50和UTM51.(当然也可以手动修改）


2、引擎在linux下打包是否能够将底层依赖拷贝到目标机器运行
说明：经测试，在目标机器上引擎不在当前目录下寻找依赖（编译机器上拷贝的依赖），依然会去系统默认的路径下找依赖（目标机器上的依赖）。

12/4-12/8
1、引擎在linux下打包是否能够将底层依赖拷贝到目标机器运行（让引擎找到正确位置依赖）
说明：经调研和测试，改方案不可行。
原因：引擎依赖libc.so.6、libm.so.6等linux下的系统库，linux的链接器又依赖libc.so.6库，更改libc.so.6库
会导致linux的链接器失效，linux的链接器失效会导致系统瘫痪。
2、修复编辑器输入框，crtl+a后，输入数值存在焦点bug
3、修复编辑器UI和场景交互存在混淆情况
4、GIS图源的一些调研
说明：调研了用QGIS软件预览和下载谷歌图源、天地图图源、星图图源。

12/11-12/15
1、模型压缩和解压过程中没有进度条显示需求
说明：重构了压缩和解压的UI逻辑，新增进度展示。

2、一台电脑安装多个编辑器需求（建模那边需求）
说明：取消编辑器加载缓存资源（缓存资源会导致不同编辑器版本资源冲突）

3、GIS点云转换，新旧点云锚点不一样导致模型对齐问题。
原因：点云转换默认取第一个点为锚点转换，新旧点云的第一个点可能不一样，导致旧模型无法和新的点云对齐。
解决：转换新的点云，可选择旧的点云锚点作为锚点。

4、倾斜摄影添加经纬度后，转换并压缩pak卡到98%问题
解决：添加了父节点后GISNode，无法找到组件NodeVisitor，导致空指针崩溃，添加递归查找解决问题。

5、解决编辑器obj转换过程中崩溃bug
说明：经过测试未发现bug，以后发现bug需上传导致该崩溃的资源。以防bug太久远无法重现。

6、模型转换后，节点栏检索输入框无法输入
说明：经过测试未发现bug，以后发现bug需上传导致该崩溃的资源。以防bug太久远无法重现。

12/25-12/29
1、引擎集成GIS转换库Proj
说明：windows和linux编译Proj库，并以插件集成到引擎中（ProjTool）

2、倾斜摄影支持EPSG坐标转换

3、点云转换支持EPSG坐标转换
--------------------------------2024----------------------------------------
1/2-1/5
1、倾斜摄影解决中文路径无法转换的bug（支持中文路径）
2、解决web中，GIS飞到某个地方图层不清晰的bug
3、发布编辑器

1/8-1/12
1、web中，GIS图层模糊不稳定的问题（低层级的贴图覆盖了高层级倾斜的贴图）
说明：web贴图排序和pc的不一样，增加RenderOrder排序解决问题

2、GIS图层调试增加可视化显示

3、倾斜摄影转换增加ENU转换

1/15-1/19
1、编辑器的坐标轴操作迁移到c++（空间管理机可以使用）
说明：Java和web都可以使用

2、模型转换隐藏空调等其他小物件的问题
说明：模型转换代码中固定写死了隐藏一些小物件，现在取消这个限制，如果有需要隐藏的小物件，
应该让建模或者转换模型的同事勾选场景中的需要隐藏物件，进行配置隐藏。

3、编辑器配置默认以管理员权限运行
说明：一些同事默认将引擎编辑器安装到C盘，若是编辑器不是用管理员权限打开的话
会导致某种功能失效或者崩溃。

4、点云转换进度不准确优化

5、发布编辑器

1/22-1/26
1、编辑器添加EPSG代号查询（web和java可用）

2、编辑器添加单个坐标转换（web和java可用）

1/29-2/2
1、倾斜摄影重构优化--编辑器转换优化
说明：多个xml合并至一个xml，每个节点只有一个模型组件。

2、倾斜摄影转换支持linux
（1）倾斜摄影转换工具linux编译
（2）proj下支持linux（EPSG坐标转换）

2/18-2/22
1、平遥站点云全景有一部分完全无法对其问题
说明：经过测试调试发现是全景文件夹中有一次拍摄的内容为空，导致后面的全景全部错位。

2、切斜摄影转换导出给java使用
说明：java项目已发布了window和linux版本，空间管理机可以直接通过java服务转换切斜摄影。

3、编写脚本批量对齐全景和点云

2/26-3/1
1、编辑器加载站所场景相机的缩放、旋转、拖拽出现前后闪烁问题
说明：是去年6月份的一个优化，不过这个bug只会在性能不好的机器上加载很卡的场景复现。
现在已经解决，并重新发了编辑器给了穆梦杰测试（反馈已解决）。

2、3dMax导出的模型的缩放值不是1的时候，模型发生位置偏移的问题。
说明：已经调研过且和组里的人员讨论过，这个问题不是引擎这边的转换问题，主要是建模规范的问题。

3、倾斜摄影重构优化（PC端）
说明：已经将倾斜摄影的多个xml文件合并为一个入口文件，调度逻辑已经重构完，
目前测试还有一些bug，下个星期继续完善解决。

3/4-3/8
1、空间管理机使用引擎的压缩工具崩溃（无法找到libGL.so）
说明：这是没有找到显卡驱动的原因，按理来说压缩工具是不会使用渲染功能的，
需要使用依赖工具分析那个文件依赖了渲染功能。

2、倾斜摄影重构优化（PC端）--解决bug并完善
说明：当前已重构了调度逻辑和资源下载逻辑，并在PC端成功运行。

3/11-3/15
1、倾斜摄影重构优化（已完成，下周进行web限速测试生成对比报告）
（1）pc端加载GIS和非GIS的倾斜摄影（测试了南瑞和渭南的倾斜摄影运行流畅）
（2）web端加载GIS和非GIS的倾斜摄影

2、倾斜摄影重构优化兼容问题
说明：利用版本标志，保留老倾斜摄影的转换和调度，可以自动判断新老版本的倾斜摄影进行加载。

3/18-3/22
1、业务测试倾斜摄影转换出现多个依赖无法加载问题
说明：引擎的测试linux软件齐全，业务的测试机器软件不过齐全，在业务机器上重新测试倾斜摄影转换
解决依赖问题。

2、倾斜摄影重构优化对比
重构前：
（1）、网速限制50M带宽，加载南瑞耗时40s左右。
（2）、不可使用编辑器编辑
重构后：
（1）、网速限制50M带宽，加载南瑞耗时30s左右。
（2）、可以使用编辑器编辑
（3）、可以控制层级优先加载还是距离优先加载或者是两者结合

3/25-3/29
1、倾斜摄影图片资源压缩测试（南瑞园区）
说明：图片压缩后，整个资源大小从3.2G减少到1.8G，下载速度提升40%左右

2、编辑器支持模型所有帧动画共同播放功能

3、引擎的各种工具（转换、压缩）依赖opengl的问题调研
起因：没有装显卡驱动的linux无法运行压缩、模型转换等工具。
说明：引擎底层非渲染的结构（节点、资源、上下文context等）都耦合了opengl的内容，所以
只要依赖了引擎就会依赖opengl。
解决方案：解耦或者重写转换工具。这两种方案工作量都挺大，解耦风险也很高。

4、新的倾斜摄影转换工具发布
说明：支持新老倾斜摄影转换


4/7-4/12
1、解决编辑器刷新场景出现坐标轴节点的bug
2、倾斜摄影源数据没有入口文件无法转换的问题
倾斜摄影转换入口文件逻辑修改：
（1）判断根目录下有没有root.osgb、Block.osgb等入口文件
（2）有则加载，无则判断有无自定义的root.txt入口文件（格式：\\192.168.8.189\share\文件交换区\王路\AssetImporter\倾斜摄影如果自定义文件）
（3）如既没有默认的入口文件也没有自定义的入口文件，则加载当前目录下与目录同名的osgb文件作为入口文件
3、编辑器新增一键启动帧动画和骨骼动画
4、为建模人员开发检测模型缩放不为1的工具



4/15-4/19
编写交接文档或者思维导图，已交接的内容：
1、引擎编译（Linux、Android、JNI）
2、JNI（java调用引擎接口）
3、空间管理机转换工具（模型、全景、点云、倾斜摄影）
4、倾斜摄影
5、引擎编辑器（发布部署、某些功能）


4/22-4/30
1、三维相机
2、三维GIS
3、全景
4、vuepress的api平台构建
5、加密狗（加密引擎的动态库）
6、一键安装包
7、编辑器注册（VK_Util）
8、模型缩放检测（AssetImporter:ErrorScale）


1、编辑器支持骨骼动画播放
2、调研好的图片压缩工具集成到引擎

for (unsigned i = 0; i < model.meshes_.Size(); ++i)
GetPosRotScale(GetMeshBakingTransform(model.meshNodes_[i], model.node_), pos, rot, scale);
if (scale.x_>1.0)
				{
					std::cout <<"ScaleError:"<< model.modelName_.CString() << scale.x_ << "," << scale.y_ << "," << scale.z_ << std::endl;
				}

1、解决引擎的压缩工具依赖libGL的问题

2、同步解决倾斜摄影重构优化的web端




1、倾斜摄影重构优化（PC端）--解决bug并完善

2、同步解决倾斜摄影重构优化的web端





{3AB521D1-D1F1-4330-92F3-E538F9B15352}
{3AB521D1-D1F1-4330-92F3-E538F9B15352}


1240.58 0 0 0.62281 0 1240.58 0 2.44639 0 0 1240.58 6.04602


scale = {x_=1100.85254 y_=1100.85266 z_=1100.85254 }
scale = {x_=1240.58472 y_=1240.58472 z_=1240.58472 }

1240.58472
124058.469

1100.85254
110085.25

56170
56594
56667

倾斜摄影重构优化
"Osg" "E:/Model/qxsy/WN-osgb/cj/osgb/" "E:/Model/qxsy/WN-osgb/cj/osgbOut22/Tile.xml" "-nAutoPak" "-nCompress" "-data" "E:/Project/Compile/trunk/build_x64all2015/bin"

"Osg" "E:/Model/qxsy/nl/terra_osgbs/" "E:/Model/qxsy/nl/outCom/Tile.xml" "-yAutoPak" "-yCompress" "-data" "E:/Project/Compile/trunk/build_x64all2015/bin"

"Osg" "D:/model/qxsy/yc/models/pc/0/terra_osgbs/" "D:/model/qxsy/yc/models/pc/0/outOld/Tile.xml" "-yAutoPak" "-nCompress" "-data" "E:/Project/Compile/trunk/build_x64all2015/bin"

"Osg" "E:/Model/qxsy/nl/outCom/" "-yCompress" "-onlypak"

coreDataFolder = {length_=54 capacity_=55 buffer_=0x0000022fe0117c50 "E:/Project/Compile/trunk/build_x64all2015/bin/CoreData" }
String baseurl1="/home/vking/Project/trunk/Asset1/bin/tool/";
System.load(baseurl1 + "libOpenThreads.so");
System.load(baseurl1 + "libosg.so");
System.load(baseurl1 + "libosgUtil.so");
System. load(baseurl1 + "libosgDB.so");//libAssetImporter.so
System.load( baseurl1 + "libproj.so.25");

System.load(baseurl1 + "osgPlugins-3.4.0.2/osgdb_osg.so");
System.load(baseurl1 + "osgPlugins-3.4.0.2/osgdb_serializers_osg.so");
System.load(baseurl1 + "osgPlugins-3.4.0.2/osgdb_jpeg.so");
System.load(baseurl1 + "libAssetImporter.so");
//              
final String cmdLine = "Osg /home/vking/test/AssetImporter/qxsy/wn/ /home/vking/test/AssetImporter/qxsyout1/Tile.xml -data /home/vking/Project/trunk/Asset1/bin/tool";


Osg /home/vking/test/AssetImporter/qxsy/wn/ /home/vking/test/AssetImporter/qxsyout/test.xml -data /home/vking/Project/trunk/Asset1/bin/tool/
ReaderWriter::ReadResult Registry::read(const ReadFunctor& readFunctor) fileName = "osgPlugins-3.4.0/osgdb_osg.dll"
ObjectWrapper* ObjectWrapperManager::findWrapper( const std::string& name )  fileName = "osg.dll"
ObjectWrapper* ObjectWrapperManager::findWrapper( const std::string& name ) fileName = "osgPlugins-3.4.0/osgdb_serializers_osg.dll"
ReaderWriter* Registry::getReaderWriterForExtension(const std::string& ext) fileName = "osgPlugins-3.4.0/osgdb_jpeg.dll"

1、全景转换支持linux
2、倾斜摄影重构优化--编辑器转换实现

倾斜摄影重构优化---编辑器转换优化
说明：只生成一个xml统领节点，包括父子节点。







file(COPY "${CMAKE_SOURCE_DIR}/Source/ThirdParty/Proj/bin/libproj.so" DESTINATION "${CMAKE_BINARY_DIR}/bin/tool")

target_link_libraries(${TARGET_NAME} ${CMAKE_BINARY_DIR}/lib/libosg.so)

"Osg" "E:/Model/qxsy/普云实景(1)/models/pc/0/terra_osgbs/" "E:/Model/qxsy/普云实景(1)/models/pc/0/out/Tile.xml" "-yAutoPak" "-nCompress"
"Osg" "E:/Model/qxsy/WN-osgb/cj/osgb/" "E:/Model/qxsy/WN-osgb/cj/osgbOut/Tile.xml" "-yAutoPak" "-nCompress"

"Osg" "E:/Model/qxsy/pxsj/models/pc/0/terra_osgbs/" "E:/Model/qxsy/pxsj/models/pc/0/terra_osgbs_out/Tile.xml" "-yAutoPak" "-nCompress"

Osg E:/Model/qxsy/WN-osgb/cj/osgb/ E:/Model/qxsy/WN-osgb/cj/osgbOut1/Tile.xml -nAutoPak -nCompress

1、编辑器添加单个点坐标转换功能
说明：新的倾斜摄影无法和老的点云对齐，这个时候需要修改倾斜摄影
的经纬度位置，需要提供一个可视化的单个点转换工具。

2、编辑器手动快速对齐工具开发
说明：当倾斜摄影和点云对齐、全景和点云对齐有需要微调的地方，这时候需要一个
快速简单的操作工具。

"Osg" "E:/Model/qxsy/WN-osgb/cj/osgb/" "E:/Model/qxsy/WN-osgb/cj/osgbOut/Tile.xml" "-yAutoPak" "-nCompress" "-projdb" "E:/Project/Compile/trunk/build_x64all2022/bin/tool/proj.db"

-projdb E:/Project/Compile/trunk/build_x64all2022/bin/tool/proj.db

Proj query "WGS 84 / UTM zone 50N" "-o" "PROJJSON" "-q"
Proj transform -s 32650 -t 4326 -i 247228.01993521987,3385940.7994526192
Proj transform -s 4326 -t 32650 -i 114.364185685,30.579320725
32650
4326

114.364185685
30.579320725

34.4548797744239||109.432777148952
-86.2152 13.1748 -27.19833
<attribute name="Position" value="-86.2152 13.1748 -27.19833" />17分钟前
local = {x=-86.215243519749492 y=13.174802191555500 z=-27.198331843161373 ...}

1、点云转换进度不准确bug
2、编辑器的坐标轴操作迁移到c++（空间管理机可以使用）
说明：编辑器下的坐标轴操作包括原点任意平移旋转，固定一个轴的面的操作
3、发布编辑器

1、web中，GIS图层不稳定的bug
2、点云转换进度不准确bug
3、编辑器的坐标轴操作迁移到c++（空间管理机可以使用）
说明：编辑器下的坐标轴操作包括原点任意平移旋转，固定一个轴的面的操作



1、在GIS模式下，当前视野下有不清晰的图层
2、倾斜摄影解决中文路径无法转换的bug（支持中文路径）
3、点云转换进度不准确bug


34°27'17.618"
0.45
0.00489388
34.45489388

109°25'58.78"
109.43299444444777
34.454894008495394, 109.43299437222672


1、编辑器中的坐标轴添加面拖动、任意拖动功能（美术建模提的需求）
2、编辑器中添加面旋转、任意旋转、屏幕旋转的功能（美术建模提的需求）
3、编辑器模型点云转换进度不准问题
http://192.168.8.187:2170/

VkingMap/googleearthmap?service=WMS&request=GetMap&version=1.3&crs=CRS:84&layers=GoogleEarthMapLayer_JiangSu&styles=&transparent=true&format=image/png&width=256&height=256&bbox=-180,-90,-157.5,-67.5

http://192.168.8.187:2170/VkingMap/googleearthmap?

service=WMS&
request=GetMap&
version=1.3&
crs=CRS:84&
layers=GoogleEarthMapLayer_JiangSu&
styles=&
transparent=true&
format=image/png&
width=256&
height=256&
bbox=
minLat, maxLat,minLon, maxLon
-90 -67.5  -180  -157.5

-180,-90,-157.5,-67.5
0       1  2      3
minLon，minLat，maxLon，maxLat


http://t0.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=1266.2575019999999&TILEROW=4702159.4023310002&TILECOL=326134.02823&tk=40001397d19847f480faf21d59e612b6


<item name="anchorUTM">
			<attribute name="x" value="326134.02823" />
			<attribute name="y" value="4702159.4023310002" />
			<attribute name="z" value="1266.2575019999999" />
		</item>
1、公司内部的全国影像图层开发（目前有很多地区没有清晰的图层）
2、引擎在linux下打包是否能够将底层依赖拷贝到目标机器运行（让引擎找到正确位置依赖）

GIS服务器
192.168.8.187
root 
vkinggis

http://t0.tianditu.gov.cn/img_c/wmts?tk=40001397d19847f480faf21d59e612b6
http://t0.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=40001397d19847f480faf21d59e612b6


export LD_LIBRARY_PATH=/opt/vking/lib/
export LD_PRELOAD=/opt/vking/lib/ld-linux-x86-64.so.2

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-rpath=/opt/vking/lib -Wl,--dynamic-linker=/opt/vking/lib/ld-linux-x86-64.so.2")

 "Osg" "E:/Model/qxsy/osgb/terra_osgbs/" "E:/Model/qxsy/terra_osgbs/osgb_export/Tile.xml" "-yAutoPak" "-nCompress"

E:/Model/qxsy/普云实景(1)/models/pc/0/terra_osgbs/

"Osg" "E:/Model/qxsy/普云实景(1)/models/pc/0/terra_osgbs/" "E:/Model/qxsy/普云实景(1)/models/pc/0/out/Tile.xml" "-yAutoPak" "-nCompress"


1、全景和点云对齐问题（测试未合并的带GIS的点云文件）
2、编辑器支持Las地理坐标（WGS84/CGCS2000）和投影坐标（UTM/高斯-克吕格）的显示、检查、转换

EPSG:32600 N
EPSG:32700 S

EPSG:32650, WGS 84 / UTM zone 50N
325978.111  4702026.665  1265.457

# crs_CGCS2000 =CRS.from_epsg(4479)    #meter#这两个都不行
# crs_CGCS2000=CRS.from_epsg(4490)    #degree#这两个都不行
crs_CGCS2000=CRS.from_wkt(
'PROJCS[
"CGCS_2000_3_Degree_GK_CM_114E",
GEOGCS["GCS_China_Geodetic_Coordinate_System_2000",
DATUM["D_China_2000",SPHEROID["CGCS2000",6378137.0,298.257222101]],
PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],P
ROJECTION["Gauss_Kruger"],PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",114.0],PARAMETER["Scale_Factor",1.0],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]')    #degree
crs_WGS84=CRS.from_epsg(4326)
from_crs = crs_CGCS2000
to_crs = crs_WGS84
transformer = Transformer.from_crs(from_crs, to_crs)
new_x,new_y = transformer.transform(x,y)	#new_x,new_y即为转换后的坐标，也可以分别使用数组

Gauss-Kruger

PointCloud E:/Model/bycg/DY/BYCG.las E:/Model/bycg/BYCG_export/PointCloud.xml -octreeLeafBounds 26 -maxLeafDepth 32 -leafSplitStopSize 0.02 -octreePointDistribution 0.03125,0.03125,0.0625,0.125,0.25 -mergeMinOctreeDepth 1 -mergeMaxOctreeDepth 5 -utmzone 50 -domdir  -needfilterpoint false -addOffect false -conversiontype 1 -sparseType 0 
"Osg" "E:/Model/qxsy/WN-osgb/cj/osgb/" "E:/Model/qxsy/WN-osgb/cj/osgbOut22/Tile.xml" "-nAutoPak" "-nCompress" "-data" "E:/Project/Compile/trunk/build_x64all2015/bin"


"PointCloud" "E:/Model/bycg/DY/BYCG.las" "E:/Model/bycg/BYCG_export3/PointCloud.xml" "-octreeLeafBounds" "26" "-maxLeafDepth" "32" "-leafSplitStopSize" "0.02" "-octreePointDistribution" "0.03125,0.03125,0.0625,0.125,0.25" "-mergeMinOctreeDepth" "1" "-mergeMaxOctreeDepth" "5" "-utmzone" "50" "-domdir" "" "-needfilterpoint" "false" "-addOffect" "false" "-conversiontype" "1" "-sparseType" "0"     

 "PointCloud" "E:/Model/bycg/DY/BYCG.las" "E:/Model/bycg/BYCG_export/PointCloud.xml" "-octreeLeafBounds" "26" "-maxLeafDepth" "32" "-leafSplitStopSize" "0.02" "-octreePointDistribution" "0.03125,0.03125,0.0625,0.125,0.25" "-mergeMinOctreeDepth" "1" "-mergeMaxOctreeDepth" "0" "-utmzone" "-1" "-domdir" "" "-needfilterpoint" "false" "-addOffect" "false" "-conversiontype" "0" "-sparseType" "0"


"Panorama" "E:/Model/bycg/test2_output/Panoramas" "E:E:/Model/bycg/test2_output/Panoramas_export/Panorama.xml" "256,256,30;512,512,90;1024,1024,100"


"Assimp" "node" "E:/Model/fbx/maps/aishan1202.FBX" "E:/Model/fbx/maps/out/aishan1202.xml" "-lod" "20:1|75:0.5|150:0.25" "-nbih" "-ydxt"
			BuildAndSaveModel(outScene.models_[i]);
			
			


"Assimp" "node" "D:/model/FBX/ScaleTest/error.FBX" "D:/model/FBX/ScaleTest/outError/error.xml"
"Assimp" "node" "D:/model/FBX/ScaleTest/normal.FBX" "D:/model/FBX/ScaleTest/outNormal/normal.xml" 

"Assimp" "node" "D:/model/SLZ-0306/SLZ-0306.FBX" "D:/model/SLZ-0306/out/Station.xml"
"Assimp" "errorscale" "D:/model/FBX/ScaleTest/error.FBX" "D:/model/FBX/ScaleTest/out11/Station.xml"


PointCloud /home/vking/test/AssetImporter/company-Cloud2.las /home/vking/test/AssetImporter/out2/PointCloud.xml
Osg /home/vking/Project/test/qxsy/wn/ /home/vking/Project/test/qxsy/wnout/Tile.xml -yAutoPak -nCompress

Assimp node E:/Model/fbx/maps/aishan1202.FBX E:/Model/fbx/maps/out/aishan1202.xml -lod 20:1|75:0.5|150:0.25 -nbih -ydxt

"Osg" "E:/Model/qxsy/WN-osgb/cj/中文/" "E:/Model/qxsy/WN-osgb/cj/中文out5/Tile.xml" "-yAutoPak" "-nCompress"

srcFileName = {length_=44 capacity_=45 buffer_=0x000002cf496c8200 "E:/Model/qxsy/WN-osgb/cj/涓枃/metadata.xml" }

/home/vking/Project/test/qxsy/wn

"Disassemble" "E:/data/dg/dgcj/" "E:/data/dg/dgcj_export/"

"PointCloud" "E:/Model/pointCloud/中午/QT-QTZD.las" "E:/Model/pointCloud/中午/out/test.xml"

PrintLine(String().AppendWithFormat("模型'%s'没有UV数据!!!", mesh->mName.C_Str()), PrintLevel::LEVEL_FATAL);
http://cgit.freedesktop.org/mesa/demos/tree/src/osdemos/osdemo.c


./AssetImporter Osg /home/vking/Project/test/qxsy/wn/ /home/vking/Project/test/qxsy/wnout/Tile.xml -yAutoPak -nCompress


armeabi-v7a
cmake_android.bat BuildAndroid -DURHO3D_LUA=OFF -DURHO3D_ASSIMP=OFF -DURHO3D_LIB_TYPE=SHARED -DURHO3D_ANDROIDJNI=ON -DURHO3D_TOOLS=OFF

Unrecognized 'arm-linux-androideabi-clang' specified in the ANDROID_TOOLCHAIN_NAME option, supported values are: "".

cmake ../ -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE="D:\Project\VS2015\branche\CMake\Toolchains\Android.cmake" -DURHO3D_LUA=OFF -DURHO3D_ASSIMP=OFF -DURHO3D_LIB_TYPE=SHARED -DURHO3D_ANDROIDJNI=ON -DURHO3D_TOOLS=OFF


http://192.168.8.187:2170/VkingMap/elev?service=OGC:WMS&request=GetMap&version=1.3&crs=CRS:84&layers=ASTGTM&styles=&format=application/bil16&width=150&height=150&bbox=



"PointCloud" "E:/Model/bycg/DY/BYCG.las" "E:/Model/bycg/BYCG_export01/PointCloud.xml" "-octreeLeafBounds" "26" "-maxLeafDepth" "32" "-leafSplitStopSize" "0.02" "-octreePointDistribution" "0.03125,0.03125,0.0625,0.125,0.25" "-mergeMinOctreeDepth" "1" "-mergeMaxOctreeDepth" "0" "-utmzone" "-1" "-domdir" "" "-epsg" "32650" "-needfilterpoint" "false" "-addOffect" "false" "-conversiontype" "1" "-sparseType" "0"

麒麟的ARM架构：10.1.1.13
账号：vking
密码：123456.com


Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-43-generic aarch64)
[root@testlnx01 ~]# ps -A | egrep -i "gnome|kde|mate|cinnamon|lx|xfce|jwm"



1、每个地形瓦片一个Drawable
2、每个Drawable下多个Layer
3、每个Layer根据层级存储TextureData


python EngineVersion.py -t RelWithDebug -o d: -svn D:\Project\c++\Vking-Engine-V8.0\v8.0.2
python "D:\Project\Jenkins/EngineVersion.py" -t RelWithDebInfo -svn "D:\Project\Jenkins/workspace/VkingEngine/V8.0.2" -o ./bin 
python: can't open file 'D:\Project\Jenkins/EngineVersion.py'
 

Mesa2.0----openGL 1.1
Mesa3.0----openGL 1.2
Mesa4.0----openGL 1.3
Mesa5.0----openGL 1.4
Mesa6.0----openGL 1.5
Mesa7.0----openGL 2.1
Mesa8.0----openGL 3.0




sudo ./configure --prefix=/usr/SQLite3
sudo make
sudo make install

BUILD_SHARED_LIBS
cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=OFF -DEXE_SQLITE3=/usr/SQLite3/bin/sqlite3 -DSQLITE3_INCLUDE_DIR=/usr/SQLite3/include -DSQLITE3_LIBRARY=/usr/SQLite3/lib/libsqlite3.a -DENABLE_CURL=OFF -DBUILD_PROJSYNC=OFF -DBUILD_TESTING=OFF ..

sudo cmake 

-DCMAKE_INSTALL_PREFIX=./install 
-DBUILD_SHARED_LIBS=OFF 
-DEXE_SQLITE3=/usr/SQLite3/bin/sqlite3 
-DSQLITE3_INCLUDE_DIR=/usr/SQLite3/include 
-DSQLITE3_LIBRARY=/usr/SQLite3/lib/libsqlite3.a 
-DENABLE_CURL=OFF 
-DBUILD_PROJSYNC=OFF 
-DBUILD_TESTING=OFF ..

